// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_shared_enums.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from dota_shared_enums.proto</summary>
public static partial class DotaSharedEnumsReflection {

  #region Descriptor
  /// <summary>File descriptor for dota_shared_enums.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DotaSharedEnumsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Chdkb3RhX3NoYXJlZF9lbnVtcy5wcm90byK/AQoYQ0RPVEFDbGllbnRIYXJk",
          "d2FyZVNwZWNzEhoKEmxvZ2ljYWxfcHJvY2Vzc29ycxgBIAEoDRIdChVjcHVf",
          "Y3ljbGVzX3Blcl9zZWNvbmQYAiABKAYSHQoVdG90YWxfcGh5c2ljYWxfbWVt",
          "b3J5GAMgASgGEhQKDGlzXzY0X2JpdF9vcxgEIAEoCBIaChJ1cGxvYWRfbWVh",
          "c3VyZW1lbnQYBSABKAQSFwoPcHJlZmVyX25vdF9ob3N0GAYgASgIIsUOChZD",
          "TXNnRE9UQUNvbWJhdExvZ0VudHJ5EiMKBHR5cGUYASABKA4yFS5ET1RBX0NP",
          "TUJBVExPR19UWVBFUxITCgt0YXJnZXRfbmFtZRgCIAEoDRIaChJ0YXJnZXRf",
          "c291cmNlX25hbWUYAyABKA0SFQoNYXR0YWNrZXJfbmFtZRgEIAEoDRIaChJk",
          "YW1hZ2Vfc291cmNlX25hbWUYBSABKA0SFgoOaW5mbGljdG9yX25hbWUYBiAB",
          "KA0SHAoUaXNfYXR0YWNrZXJfaWxsdXNpb24YByABKAgSGAoQaXNfYXR0YWNr",
          "ZXJfaGVybxgIIAEoCBIaChJpc190YXJnZXRfaWxsdXNpb24YCSABKAgSFgoO",
          "aXNfdGFyZ2V0X2hlcm8YCiABKAgSGgoSaXNfdmlzaWJsZV9yYWRpYW50GAsg",
          "ASgIEhcKD2lzX3Zpc2libGVfZGlyZRgMIAEoCBINCgV2YWx1ZRgNIAEoDRIO",
          "CgZoZWFsdGgYDiABKAUSEQoJdGltZXN0YW1wGA8gASgCEhUKDXN0dW5fZHVy",
          "YXRpb24YECABKAISFQoNc2xvd19kdXJhdGlvbhgRIAEoAhIcChRpc19hYmls",
          "aXR5X3RvZ2dsZV9vbhgSIAEoCBIdChVpc19hYmlsaXR5X3RvZ2dsZV9vZmYY",
          "EyABKAgSFQoNYWJpbGl0eV9sZXZlbBgUIAEoDRISCgpsb2NhdGlvbl94GBUg",
          "ASgCEhIKCmxvY2F0aW9uX3kYFiABKAISEwoLZ29sZF9yZWFzb24YFyABKA0S",
          "FQoNdGltZXN0YW1wX3JhdxgYIAEoAhIZChFtb2RpZmllcl9kdXJhdGlvbhgZ",
          "IAEoAhIRCgl4cF9yZWFzb24YGiABKA0SEQoJbGFzdF9oaXRzGBsgASgNEhUK",
          "DWF0dGFja2VyX3RlYW0YHCABKA0SEwoLdGFyZ2V0X3RlYW0YHSABKA0SGAoQ",
          "b2JzX3dhcmRzX3BsYWNlZBgeIAEoDRIWCg5hc3Npc3RfcGxheWVyMBgfIAEo",
          "DRIWCg5hc3Npc3RfcGxheWVyMRggIAEoDRIWCg5hc3Npc3RfcGxheWVyMhgh",
          "IAEoDRIWCg5hc3Npc3RfcGxheWVyMxgiIAEoDRITCgtzdGFja19jb3VudBgj",
          "IAEoDRIXCg9oaWRkZW5fbW9kaWZpZXIYJCABKAgSGgoSaXNfdGFyZ2V0X2J1",
          "aWxkaW5nGCUgASgIEhkKEW5ldXRyYWxfY2FtcF90eXBlGCYgASgNEhEKCXJ1",
          "bmVfdHlwZRgnIAEoDRIWCg5hc3Npc3RfcGxheWVycxgoIAEoDRIUCgxpc19o",
          "ZWFsX3NhdmUYKSABKAgSGwoTaXNfdWx0aW1hdGVfYWJpbGl0eRgqIAEoCBIb",
          "ChNhdHRhY2tlcl9oZXJvX2xldmVsGCsgASgNEhkKEXRhcmdldF9oZXJvX2xl",
          "dmVsGCwgASgNEgsKA3hwbRgtIAEoDRILCgNncG0YLiABKA0SFgoOZXZlbnRf",
          "bG9jYXRpb24YLyABKA0SFgoOdGFyZ2V0X2lzX3NlbGYYMCABKAgSEwoLZGFt",
          "YWdlX3R5cGUYMSABKA0SHQoVaW52aXNpYmlsaXR5X21vZGlmaWVyGDIgASgI",
          "EhcKD2RhbWFnZV9jYXRlZ29yeRgzIAEoDRIQCghuZXR3b3J0aBg0IAEoDRIV",
          "Cg1idWlsZGluZ190eXBlGDUgASgNEiEKGW1vZGlmaWVyX2VsYXBzZWRfZHVy",
          "YXRpb24YNiABKAISGAoQc2lsZW5jZV9tb2RpZmllchg3IAEoCBIbChNoZWFs",
          "X2Zyb21fbGlmZXN0ZWFsGDggASgIEhcKD21vZGlmaWVyX3B1cmdlZBg5IAEo",
          "CBIUCgxzcGVsbF9ldmFkZWQYOiABKAgSIgoabW90aW9uX2NvbnRyb2xsZXJf",
          "bW9kaWZpZXIYOyABKAgSFwoPbG9uZ19yYW5nZV9raWxsGDwgASgIEh4KFm1v",
          "ZGlmaWVyX3B1cmdlX2FiaWxpdHkYPSABKA0SGgoSbW9kaWZpZXJfcHVyZ2Vf",
          "bnBjGD4gASgNEhUKDXJvb3RfbW9kaWZpZXIYPyABKAgSHgoWdG90YWxfdW5p",
          "dF9kZWF0aF9jb3VudBhAIAEoDRIVCg1hdXJhX21vZGlmaWVyGEEgASgIEh0K",
          "FWFybW9yX2RlYnVmZl9tb2RpZmllchhCIAEoCBIjChtub19waHlzaWNhbF9k",
          "YW1hZ2VfbW9kaWZpZXIYQyABKAgSGAoQbW9kaWZpZXJfYWJpbGl0eRhEIAEo",
          "DRIXCg9tb2RpZmllcl9oaWRkZW4YRSABKAgSIwobaW5mbGljdG9yX2lzX3N0",
          "b2xlbl9hYmlsaXR5GEYgASgIEhgKEGtpbGxfZWF0ZXJfZXZlbnQYRyABKA0S",
          "GQoRdW5pdF9zdGF0dXNfbGFiZWwYSCABKA0SHgoWc3BlbGxfZ2VuZXJhdGVk",
          "X2F0dGFjaxhJIAEoCCqaBQoNRE9UQV9HYW1lTW9kZRIWChJET1RBX0dBTUVN",
          "T0RFX05PTkUQABIUChBET1RBX0dBTUVNT0RFX0FQEAESFAoQRE9UQV9HQU1F",
          "TU9ERV9DTRACEhQKEERPVEFfR0FNRU1PREVfUkQQAxIUChBET1RBX0dBTUVN",
          "T0RFX1NEEAQSFAoQRE9UQV9HQU1FTU9ERV9BUhAFEhcKE0RPVEFfR0FNRU1P",
          "REVfSU5UUk8QBhIUChBET1RBX0dBTUVNT0RFX0hXEAcSHAoYRE9UQV9HQU1F",
          "TU9ERV9SRVZFUlNFX0NNEAgSFgoSRE9UQV9HQU1FTU9ERV9YTUFTEAkSGgoW",
          "RE9UQV9HQU1FTU9ERV9UVVRPUklBTBAKEhQKEERPVEFfR0FNRU1PREVfTU8Q",
          "CxIUChBET1RBX0dBTUVNT0RFX0xQEAwSFwoTRE9UQV9HQU1FTU9ERV9QT09M",
          "MRANEhQKEERPVEFfR0FNRU1PREVfRkgQDhIYChRET1RBX0dBTUVNT0RFX0NV",
          "U1RPTRAPEhQKEERPVEFfR0FNRU1PREVfQ0QQEBIUChBET1RBX0dBTUVNT0RF",
          "X0JEEBESHwobRE9UQV9HQU1FTU9ERV9BQklMSVRZX0RSQUZUEBISFwoTRE9U",
          "QV9HQU1FTU9ERV9FVkVOVBATEhYKEkRPVEFfR0FNRU1PREVfQVJETRAUEhgK",
          "FERPVEFfR0FNRU1PREVfMVYxTUlEEBUSGwoXRE9UQV9HQU1FTU9ERV9BTExf",
          "RFJBRlQQFhIXChNET1RBX0dBTUVNT0RFX1RVUkJPEBcSGgoWRE9UQV9HQU1F",
          "TU9ERV9NVVRBVElPThAYEiMKH0RPVEFfR0FNRU1PREVfQ09BQ0hFU19DSEFM",
          "TEVOR0UQGSrsAwoORE9UQV9HYW1lU3RhdGUSHQoZRE9UQV9HQU1FUlVMRVNf",
          "U1RBVEVfSU5JVBAAEjEKLURPVEFfR0FNRVJVTEVTX1NUQVRFX1dBSVRfRk9S",
          "X1BMQVlFUlNfVE9fTE9BRBABEicKI0RPVEFfR0FNRVJVTEVTX1NUQVRFX0hF",
          "Uk9fU0VMRUNUSU9OEAISJgoiRE9UQV9HQU1FUlVMRVNfU1RBVEVfU1RSQVRF",
          "R1lfVElNRRADEiEKHURPVEFfR0FNRVJVTEVTX1NUQVRFX1BSRV9HQU1FEAQS",
          "KQolRE9UQV9HQU1FUlVMRVNfU1RBVEVfR0FNRV9JTl9QUk9HUkVTUxAFEiIK",
          "HkRPVEFfR0FNRVJVTEVTX1NUQVRFX1BPU1RfR0FNRRAGEiMKH0RPVEFfR0FN",
          "RVJVTEVTX1NUQVRFX0RJU0NPTk5FQ1QQBxImCiJET1RBX0dBTUVSVUxFU19T",
          "VEFURV9URUFNX1NIT1dDQVNFEAgSKgomRE9UQV9HQU1FUlVMRVNfU1RBVEVf",
          "Q1VTVE9NX0dBTUVfU0VUVVAQCRItCilET1RBX0dBTUVSVUxFU19TVEFURV9X",
          "QUlUX0ZPUl9NQVBfVE9fTE9BRBAKEh0KGURPVEFfR0FNRVJVTEVTX1NUQVRF",
          "X0xBU1QQCyq2AQoMRE9UQV9HQ19URUFNEhoKFkRPVEFfR0NfVEVBTV9HT09E",
          "X0dVWVMQABIZChVET1RBX0dDX1RFQU1fQkFEX0dVWVMQARIcChhET1RBX0dD",
          "X1RFQU1fQlJPQURDQVNURVIQAhIaChZET1RBX0dDX1RFQU1fU1BFQ1RBVE9S",
          "EAMSHAoYRE9UQV9HQ19URUFNX1BMQVlFUl9QT09MEAQSFwoTRE9UQV9HQ19U",
          "RUFNX05PVEVBTRAFKoIGCgZFRXZlbnQSEQoNRVZFTlRfSURfTk9ORRAAEhUK",
          "EUVWRU5UX0lEX0RJUkVUSURFEAESHAoYRVZFTlRfSURfU1BSSU5HX0ZFU1RJ",
          "VkFMEAISGwoXRVZFTlRfSURfRlJPU1RJVlVTXzIwMTMQAxIcChhFVkVOVF9J",
          "RF9DT01QRU5ESVVNXzIwMTQQBBIaChZFVkVOVF9JRF9QV1JEX0RBQ18yMDE1",
          "EAYSGwoXRVZFTlRfSURfTkVXX0JMT09NXzIwMTUQBxIfChtFVkVOVF9JRF9J",
          "TlRFUk5BVElPTkFMXzIwMTUQCBIcChhFVkVOVF9JRF9GQUxMX01BSk9SXzIw",
          "MTUQCRIWChJFVkVOVF9JRF9PUkFDTEVfUEEQChIkCiBFVkVOVF9JRF9ORVdf",
          "QkxPT01fMjAxNV9QUkVCRUFTVBALEhYKEkVWRU5UX0lEX0ZST1NUSVZVUxAM",
          "Eh4KGkVWRU5UX0lEX1dJTlRFUl9NQUpPUl8yMDE2EA0SHwobRVZFTlRfSURf",
          "SU5URVJOQVRJT05BTF8yMDE2EA4SHAoYRVZFTlRfSURfRkFMTF9NQUpPUl8y",
          "MDE2EA8SHgoaRVZFTlRfSURfV0lOVEVSX01BSk9SXzIwMTcQEBIbChdFVkVO",
          "VF9JRF9ORVdfQkxPT01fMjAxNxAREh8KG0VWRU5UX0lEX0lOVEVSTkFUSU9O",
          "QUxfMjAxNxASEh4KGkVWRU5UX0lEX1BMVVNfU1VCU0NSSVBUSU9OEBMSHQoZ",
          "RVZFTlRfSURfU0lOR0xFU19EQVlfMjAxNxAUEhsKF0VWRU5UX0lEX0ZST1NU",
          "SVZVU18yMDE3EBUSHwobRVZFTlRfSURfSU5URVJOQVRJT05BTF8yMDE4EBYS",
          "GwoXRVZFTlRfSURfRlJPU1RJVlVTXzIwMTgQFxIbChdFVkVOVF9JRF9ORVdf",
          "QkxPT01fMjAxORAYEh8KG0VWRU5UX0lEX0lOVEVSTkFUSU9OQUxfMjAxORAZ",
          "EhIKDkVWRU5UX0lEX0NPVU5UEBoqqAIKEkRPVEFMZWF2ZXJTdGF0dXNfdBIU",
          "ChBET1RBX0xFQVZFUl9OT05FEAASHAoYRE9UQV9MRUFWRVJfRElTQ09OTkVD",
          "VEVEEAESJQohRE9UQV9MRUFWRVJfRElTQ09OTkVDVEVEX1RPT19MT05HEAIS",
          "GQoVRE9UQV9MRUFWRVJfQUJBTkRPTkVEEAMSEwoPRE9UQV9MRUFWRVJfQUZL",
          "EAQSHwobRE9UQV9MRUFWRVJfTkVWRVJfQ09OTkVDVEVEEAUSKAokRE9UQV9M",
          "RUFWRVJfTkVWRVJfQ09OTkVDVEVEX1RPT19MT05HEAYSIgoeRE9UQV9MRUFW",
          "RVJfRkFJTEVEX1RPX1JFQURZX1VQEAcSGAoURE9UQV9MRUFWRVJfREVDTElO",
          "RUQQCCqeAgoVRE9UQUNvbm5lY3Rpb25TdGF0ZV90EiEKHURPVEFfQ09OTkVD",
          "VElPTl9TVEFURV9VTktOT1dOEAASKwonRE9UQV9DT05ORUNUSU9OX1NUQVRF",
          "X05PVF9ZRVRfQ09OTkVDVEVEEAESIwofRE9UQV9DT05ORUNUSU9OX1NUQVRF",
          "X0NPTk5FQ1RFRBACEiYKIkRPVEFfQ09OTkVDVElPTl9TVEFURV9ESVNDT05O",
          "RUNURUQQAxIjCh9ET1RBX0NPTk5FQ1RJT05fU1RBVEVfQUJBTkRPTkVEEAQS",
          "IQodRE9UQV9DT05ORUNUSU9OX1NUQVRFX0xPQURJTkcQBRIgChxET1RBX0NP",
          "Tk5FQ1RJT05fU1RBVEVfRkFJTEVEEAYqjAEKDUZhbnRhc3lfUm9sZXMSGgoW",
          "RkFOVEFTWV9ST0xFX1VOREVGSU5FRBAAEhUKEUZBTlRBU1lfUk9MRV9DT1JF",
          "EAESGAoURkFOVEFTWV9ST0xFX1NVUFBPUlQQAhIYChRGQU5UQVNZX1JPTEVf",
          "T0ZGTEFORRADEhQKEEZBTlRBU1lfUk9MRV9NSUQQBCqKAQoSRmFudGFzeV9U",
          "ZWFtX1Nsb3RzEhUKEUZBTlRBU1lfU0xPVF9OT05FEAASFQoRRkFOVEFTWV9T",
          "TE9UX0NPUkUQARIYChRGQU5UQVNZX1NMT1RfU1VQUE9SVBACEhQKEEZBTlRB",
          "U1lfU0xPVF9BTlkQAxIWChJGQU5UQVNZX1NMT1RfQkVOQ0gQBCrdAgoWRmFu",
          "dGFzeV9TZWxlY3Rpb25fTW9kZRIdChlGQU5UQVNZX1NFTEVDVElPTl9JTlZB",
          "TElEEAASHAoYRkFOVEFTWV9TRUxFQ1RJT05fTE9DS0VEEAESHQoZRkFOVEFT",
          "WV9TRUxFQ1RJT05fU0hVRkZMRRACEh8KG0ZBTlRBU1lfU0VMRUNUSU9OX0ZS",
          "RUVfUElDSxADEhsKF0ZBTlRBU1lfU0VMRUNUSU9OX0VOREVEEAQSIAocRkFO",
          "VEFTWV9TRUxFQ1RJT05fUFJFX1NFQVNPThAFEh8KG0ZBTlRBU1lfU0VMRUNU",
          "SU9OX1BSRV9EUkFGVBAGEh4KGkZBTlRBU1lfU0VMRUNUSU9OX0RSQUZUSU5H",
          "EAcSJAogRkFOVEFTWV9TRUxFQ1RJT05fUkVHVUxBUl9TRUFTT04QCBIgChxG",
          "QU5UQVNZX1NFTEVDVElPTl9DQVJEX0JBU0VEEAkqnAUKFURPVEFDaGF0Q2hh",
          "bm5lbFR5cGVfdBIcChhET1RBQ2hhbm5lbFR5cGVfUmVnaW9uYWwQABIaChZE",
          "T1RBQ2hhbm5lbFR5cGVfQ3VzdG9tEAESGQoVRE9UQUNoYW5uZWxUeXBlX1Bh",
          "cnR5EAISGQoVRE9UQUNoYW5uZWxUeXBlX0xvYmJ5EAMSGAoURE9UQUNoYW5u",
          "ZWxUeXBlX1RlYW0QBBIZChVET1RBQ2hhbm5lbFR5cGVfR3VpbGQQBRIbChdE",
          "T1RBQ2hhbm5lbFR5cGVfRmFudGFzeRAGEhsKF0RPVEFDaGFubmVsVHlwZV9X",
          "aGlzcGVyEAcSGwoXRE9UQUNoYW5uZWxUeXBlX0NvbnNvbGUQCBIXChNET1RB",
          "Q2hhbm5lbFR5cGVfVGFiEAkSGwoXRE9UQUNoYW5uZWxUeXBlX0ludmFsaWQQ",
          "ChIbChdET1RBQ2hhbm5lbFR5cGVfR2FtZUFsbBALEh4KGkRPVEFDaGFubmVs",
          "VHlwZV9HYW1lQWxsaWVzEAwSIQodRE9UQUNoYW5uZWxUeXBlX0dhbWVTcGVj",
          "dGF0b3IQDRIYChRET1RBQ2hhbm5lbFR5cGVfQ2FmZRAPEh4KGkRPVEFDaGFu",
          "bmVsVHlwZV9DdXN0b21HYW1lEBASGwoXRE9UQUNoYW5uZWxUeXBlX1ByaXZh",
          "dGUQERIcChhET1RBQ2hhbm5lbFR5cGVfUG9zdEdhbWUQEhIdChlET1RBQ2hh",
          "bm5lbFR5cGVfQmF0dGxlQ3VwEBMSIQodRE9UQUNoYW5uZWxUeXBlX0hMVFZT",
          "cGVjdGF0b3IQFBIeChpET1RBQ2hhbm5lbFR5cGVfR2FtZUV2ZW50cxAVEhoK",
          "FkRPVEFDaGFubmVsVHlwZV9Ucml2aWEQFiqEAgoURVByb2ZpbGVDYXJkU2xv",
          "dFR5cGUSIAoca19FUHJvZmlsZUNhcmRTbG90VHlwZV9FbXB0eRAAEh8KG2tf",
          "RVByb2ZpbGVDYXJkU2xvdFR5cGVfU3RhdBABEiEKHWtfRVByb2ZpbGVDYXJk",
          "U2xvdFR5cGVfVHJvcGh5EAISHwoba19FUHJvZmlsZUNhcmRTbG90VHlwZV9J",
          "dGVtEAMSHwoba19FUHJvZmlsZUNhcmRTbG90VHlwZV9IZXJvEAQSIwofa19F",
          "UHJvZmlsZUNhcmRTbG90VHlwZV9FbW90aWNvbhAFEh8KG2tfRVByb2ZpbGVD",
          "YXJkU2xvdFR5cGVfVGVhbRAGKpUBChdFTWF0Y2hHcm91cFNlcnZlclN0YXR1",
          "cxIgChxrX0VNYXRjaEdyb3VwU2VydmVyU3RhdHVzX09LEAASMQota19FTWF0",
          "Y2hHcm91cFNlcnZlclN0YXR1c19MaW1pdGVkQXZhaWxhYmlsaXR5EAESJQoh",
          "a19FTWF0Y2hHcm91cFNlcnZlclN0YXR1c19PZmZsaW5lEAIqTwoMRE9UQV9D",
          "TV9QSUNLEhIKDkRPVEFfQ01fUkFORE9NEAASFQoRRE9UQV9DTV9HT09EX0dV",
          "WVMQARIUChBET1RBX0NNX0JBRF9HVVlTEAIqiwEKFkRPVEFMb3dQcmlvcml0",
          "eUJhblR5cGUSIQodRE9UQV9MT1dfUFJJT1JJVFlfQkFOX0FCQU5ET04QABIh",
          "Ch1ET1RBX0xPV19QUklPUklUWV9CQU5fUkVQT1JUUxABEisKJ0RPVEFfTE9X",
          "X1BSSU9SSVRZX0JBTl9TRUNPTkRBUllfQUJBTkRPThACKn0KE0RPVEFMb2Ji",
          "eVJlYWR5U3RhdGUSIgoeRE9UQUxvYmJ5UmVhZHlTdGF0ZV9VTkRFQ0xBUkVE",
          "EAASIAocRE9UQUxvYmJ5UmVhZHlTdGF0ZV9BQ0NFUFRFRBABEiAKHERPVEFM",
          "b2JieVJlYWR5U3RhdGVfREVDTElORUQQAipECg9ET1RBR2FtZVZlcnNpb24S",
          "GAoUR0FNRV9WRVJTSU9OX0NVUlJFTlQQABIXChNHQU1FX1ZFUlNJT05fU1RB",
          "QkxFEAEqmAQKE0RPVEFKb2luTG9iYnlSZXN1bHQSHAoYRE9UQV9KT0lOX1JF",
          "U1VMVF9TVUNDRVNTEAASJAogRE9UQV9KT0lOX1JFU1VMVF9BTFJFQURZX0lO",
          "X0dBTUUQARIiCh5ET1RBX0pPSU5fUkVTVUxUX0lOVkFMSURfTE9CQlkQAhIn",
          "CiNET1RBX0pPSU5fUkVTVUxUX0lOQ09SUkVDVF9QQVNTV09SRBADEiIKHkRP",
          "VEFfSk9JTl9SRVNVTFRfQUNDRVNTX0RFTklFRBAEEiIKHkRPVEFfSk9JTl9S",
          "RVNVTFRfR0VORVJJQ19FUlJPUhAFEiYKIkRPVEFfSk9JTl9SRVNVTFRfSU5D",
          "T1JSRUNUX1ZFUlNJT04QBhIiCh5ET1RBX0pPSU5fUkVTVUxUX0lOX1RFQU1f",
          "UEFSVFkQBxIjCh9ET1RBX0pPSU5fUkVTVUxUX05PX0xPQkJZX0ZPVU5EEAgS",
          "HwobRE9UQV9KT0lOX1JFU1VMVF9MT0JCWV9GVUxMEAkSMgouRE9UQV9KT0lO",
          "X1JFU1VMVF9DVVNUT01fR0FNRV9JTkNPUlJFQ1RfVkVSU0lPThAKEhwKGERP",
          "VEFfSk9JTl9SRVNVTFRfVElNRU9VVBALEikKJURPVEFfSk9JTl9SRVNVTFRf",
          "Q1VTVE9NX0dBTUVfQ09PTERPV04QDBIZChVET1RBX0pPSU5fUkVTVUxUX0JV",
          "U1kQDSpxChpET1RBU2VsZWN0aW9uUHJpb3JpdHlSdWxlcxInCiNrX0RPVEFT",
          "ZWxlY3Rpb25Qcmlvcml0eVJ1bGVzX01hbnVhbBAAEioKJmtfRE9UQVNlbGVj",
          "dGlvblByaW9yaXR5UnVsZXNfQXV0b21hdGljEAEq9gEKG0RPVEFTZWxlY3Rp",
          "b25Qcmlvcml0eUNob2ljZRIpCiVrX0RPVEFTZWxlY3Rpb25Qcmlvcml0eUNo",
          "b2ljZV9JbnZhbGlkEAASKwona19ET1RBU2VsZWN0aW9uUHJpb3JpdHlDaG9p",
          "Y2VfRmlyc3RQaWNrEAESLAooa19ET1RBU2VsZWN0aW9uUHJpb3JpdHlDaG9p",
          "Y2VfU2Vjb25kUGljaxACEikKJWtfRE9UQVNlbGVjdGlvblByaW9yaXR5Q2hv",
          "aWNlX1JhZGlhbnQQAxImCiJrX0RPVEFTZWxlY3Rpb25Qcmlvcml0eUNob2lj",
          "ZV9EaXJlEAQqYgoNRE9UQU1hdGNoVm90ZRIZChVET1RBTWF0Y2hWb3RlX0lO",
          "VkFMSUQQABIaChZET1RBTWF0Y2hWb3RlX1BPU0lUSVZFEAESGgoWRE9UQU1h",
          "dGNoVm90ZV9ORUdBVElWRRACKoMCChdET1RBX0xvYmJ5TWVtYmVyWFBCb251",
          "cxIjCh9ET1RBX0xvYmJ5TWVtYmVyWFBCb251c19ERUZBVUxUEAASKgomRE9U",
          "QV9Mb2JieU1lbWJlclhQQm9udXNfQkFUVExFX0JPT1NURVIQARInCiNET1RB",
          "X0xvYmJ5TWVtYmVyWFBCb251c19TSEFSRV9CT05VUxACEiEKHURPVEFfTG9i",
          "YnlNZW1iZXJYUEJvbnVzX1BBUlRZEAMSJwojRE9UQV9Mb2JieU1lbWJlclhQ",
          "Qm9udXNfUkVDUlVJVE1FTlQQBBIiCh5ET1RBX0xvYmJ5TWVtYmVyWFBCb251",
          "c19QQ0JBTkcQBSp4ChNET1RBTG9iYnlWaXNpYmlsaXR5Eh4KGkRPVEFMb2Ji",
          "eVZpc2liaWxpdHlfUHVibGljEAASHwobRE9UQUxvYmJ5VmlzaWJpbGl0eV9G",
          "cmllbmRzEAESIAocRE9UQUxvYmJ5VmlzaWJpbGl0eV9Vbmxpc3RlZBACKqMD",
          "ChJFRE9UQVBsYXllck1NUlR5cGUSIAoca19FRE9UQVBsYXllck1NUlR5cGVf",
          "SW52YWxpZBAAEiYKImtfRURPVEFQbGF5ZXJNTVJUeXBlX0dlbmVyYWxIaWRk",
          "ZW4QARIvCitrX0VET1RBUGxheWVyTU1SVHlwZV9HZW5lcmFsQ29tcGV0aXRp",
          "dmUyMDE5EAMSLAooa19FRE9UQVBsYXllck1NUlR5cGVfU29sb0NvbXBldGl0",
          "aXZlMjAxORAEEi4KKmtfRURPVEFQbGF5ZXJNTVJUeXBlXzF2MUNvbXBldGl0",
          "aXZlX1VOVVNFRBAFEi4KKmtfRURPVEFQbGF5ZXJNTVJUeXBlX0dlbmVyYWxT",
          "ZWFzb25hbFJhbmtlZBAGEisKJ2tfRURPVEFQbGF5ZXJNTVJUeXBlX1NvbG9T",
          "ZWFzb25hbFJhbmtlZBAHEikKJWtfRURPVEFQbGF5ZXJNTVJUeXBlX0NvbXBl",
          "dGl0aXZlX0NvcmUQCBIsCihrX0VET1RBUGxheWVyTU1SVHlwZV9Db21wZXRp",
          "dGl2ZV9TdXBwb3J0EAkqhwMKCU1hdGNoVHlwZRIVChFNQVRDSF9UWVBFX0NB",
          "U1VBTBAAEhgKFE1BVENIX1RZUEVfQ09PUF9CT1RTEAESIQodTUFUQ0hfVFlQ",
          "RV9MRUdBQ1lfVEVBTV9SQU5LRUQQAhIgChxNQVRDSF9UWVBFX0xFR0FDWV9T",
          "T0xPX1FVRVVFEAMSGgoWTUFUQ0hfVFlQRV9DT01QRVRJVElWRRAEEh4KGk1B",
          "VENIX1RZUEVfV0VFS0VORF9UT1VSTkVZEAUSGQoVTUFUQ0hfVFlQRV9DQVNV",
          "QUxfMVYxEAYSFAoQTUFUQ0hfVFlQRV9FVkVOVBAHEh4KGk1BVENIX1RZUEVf",
          "U0VBU09OQUxfUkFOS0VEEAgSIAocTUFUQ0hfVFlQRV9MT1dQUklfREVQUkVD",
          "QVRFRBAJEhoKFk1BVENIX1RZUEVfU1RFQU1fR1JPVVAQChIXChNNQVRDSF9U",
          "WVBFX01VVEFUSU9OEAsSIAocTUFUQ0hfVFlQRV9DT0FDSEVTX0NIQUxMRU5H",
          "RRAMKoQCChFET1RBQm90RGlmZmljdWx0eRIaChZCT1RfRElGRklDVUxUWV9Q",
          "QVNTSVZFEAASFwoTQk9UX0RJRkZJQ1VMVFlfRUFTWRABEhkKFUJPVF9ESUZG",
          "SUNVTFRZX01FRElVTRACEhcKE0JPVF9ESUZGSUNVTFRZX0hBUkQQAxIZChVC",
          "T1RfRElGRklDVUxUWV9VTkZBSVIQBBIaChZCT1RfRElGRklDVUxUWV9JTlZB",
          "TElEEAUSGQoVQk9UX0RJRkZJQ1VMVFlfRVhUUkExEAYSGQoVQk9UX0RJRkZJ",
          "Q1VMVFlfRVhUUkEyEAcSGQoVQk9UX0RJRkZJQ1VMVFlfRVhUUkEzEAgqkwYK",
          "DURPVEFfQk9UX01PREUSFgoSRE9UQV9CT1RfTU9ERV9OT05FEAASGAoURE9U",
          "QV9CT1RfTU9ERV9MQU5JTkcQARIYChRET1RBX0JPVF9NT0RFX0FUVEFDSxAC",
          "EhYKEkRPVEFfQk9UX01PREVfUk9BTRADEhkKFURPVEFfQk9UX01PREVfUkVU",
          "UkVBVBAEEh0KGURPVEFfQk9UX01PREVfU0VDUkVUX1NIT1AQBRIbChdET1RB",
          "X0JPVF9NT0RFX1NJREVfU0hPUBAGEhYKEkRPVEFfQk9UX01PREVfUlVORRAH",
          "EiAKHERPVEFfQk9UX01PREVfUFVTSF9UT1dFUl9UT1AQCBIgChxET1RBX0JP",
          "VF9NT0RFX1BVU0hfVE9XRVJfTUlEEAkSIAocRE9UQV9CT1RfTU9ERV9QVVNI",
          "X1RPV0VSX0JPVBAKEiIKHkRPVEFfQk9UX01PREVfREVGRU5EX1RPV0VSX1RP",
          "UBALEiIKHkRPVEFfQk9UX01PREVfREVGRU5EX1RPV0VSX01JRBAMEiIKHkRP",
          "VEFfQk9UX01PREVfREVGRU5EX1RPV0VSX0JPVBANEhoKFkRPVEFfQk9UX01P",
          "REVfQVNTRU1CTEUQDhImCiJET1RBX0JPVF9NT0RFX0FTU0VNQkxFX1dJVEhf",
          "SFVNQU5TEA8SGwoXRE9UQV9CT1RfTU9ERV9URUFNX1JPQU0QEBIWChJET1RB",
          "X0JPVF9NT0RFX0ZBUk0QERIdChlET1RBX0JPVF9NT0RFX0RFRkVORF9BTExZ",
          "EBISIwofRE9UQV9CT1RfTU9ERV9FVkFTSVZFX01BTkVVVkVSUxATEhgKFERP",
          "VEFfQk9UX01PREVfUk9TSEFOEBQSFgoSRE9UQV9CT1RfTU9ERV9JVEVNEBUS",
          "FgoSRE9UQV9CT1RfTU9ERV9XQVJEEBYSGwoXRE9UQV9CT1RfTU9ERV9DT01Q",
          "QU5JT04QFxIfChtET1RBX0JPVF9NT0RFX1RVVE9SSUFMX0JPU1MQGBIYChRE",
          "T1RBX0JPVF9NT0RFX01JTklPThAZKvMBCg5NYXRjaExhbmd1YWdlcxIaChZN",
          "QVRDSF9MQU5HVUFHRV9JTlZBTElEEAASGgoWTUFUQ0hfTEFOR1VBR0VfRU5H",
          "TElTSBABEhoKFk1BVENIX0xBTkdVQUdFX1JVU1NJQU4QAhIaChZNQVRDSF9M",
          "QU5HVUFHRV9DSElORVNFEAMSGQoVTUFUQ0hfTEFOR1VBR0VfS09SRUFOEAQS",
          "GgoWTUFUQ0hfTEFOR1VBR0VfU1BBTklTSBAFEh0KGU1BVENIX0xBTkdVQUdF",
          "X1BPUlRVR1VFU0UQBhIbChdNQVRDSF9MQU5HVUFHRV9FTkdMSVNIMhAHKtgC",
          "ChpFVG91cm5leVF1ZXVlRGVhZGxpbmVTdGF0ZRInCiNrX0VUb3VybmV5UXVl",
          "dWVEZWFkbGluZVN0YXRlX05vcm1hbBAAEicKI2tfRVRvdXJuZXlRdWV1ZURl",
          "YWRsaW5lU3RhdGVfTWlzc2VkEAESKgoma19FVG91cm5leVF1ZXVlRGVhZGxp",
          "bmVTdGF0ZV9FeHBpcmVkT0sQAhIrCidrX0VUb3VybmV5UXVldWVEZWFkbGlu",
          "ZVN0YXRlX1NlZWtpbmdCeWUQAxIyCi5rX0VUb3VybmV5UXVldWVEZWFkbGlu",
          "ZVN0YXRlX0VsaWdpYmxlRm9yUmVmdW5kEAQSLAofa19FVG91cm5leVF1ZXVl",
          "RGVhZGxpbmVTdGF0ZV9OQRD///////////8BEi0KKWtfRVRvdXJuZXlRdWV1",
          "ZURlYWRsaW5lU3RhdGVfRXhwaXJpbmdTb29uEGUqxwIKDUVNYXRjaE91dGNv",
          "bWUSGwoXa19FTWF0Y2hPdXRjb21lX1Vua25vd24QABIeChprX0VNYXRjaE91",
          "dGNvbWVfUmFkVmljdG9yeRACEh8KG2tfRU1hdGNoT3V0Y29tZV9EaXJlVmlj",
          "dG9yeRADEjMKL2tfRU1hdGNoT3V0Y29tZV9Ob3RTY29yZWRfUG9vck5ldHdv",
          "cmtDb25kaXRpb25zEEASJAoga19FTWF0Y2hPdXRjb21lX05vdFNjb3JlZF9M",
          "ZWF2ZXIQQRIpCiVrX0VNYXRjaE91dGNvbWVfTm90U2NvcmVkX1NlcnZlckNy",
          "YXNoEEISKgoma19FTWF0Y2hPdXRjb21lX05vdFNjb3JlZF9OZXZlclN0YXJ0",
          "ZWQQQxImCiJrX0VNYXRjaE91dGNvbWVfTm90U2NvcmVkX0NhbmNlbGVkEEQq",
          "hgEKCUVMYW5lVHlwZRIVChFMQU5FX1RZUEVfVU5LTk9XThAAEhIKDkxBTkVf",
          "VFlQRV9TQUZFEAESEQoNTEFORV9UWVBFX09GRhACEhEKDUxBTkVfVFlQRV9N",
          "SUQQAxIUChBMQU5FX1RZUEVfSlVOR0xFEAQSEgoOTEFORV9UWVBFX1JPQU0Q",
          "BSrWAQoKRUJhZGdlVHlwZRIUChBrX0VCYWRnZVR5cGVfTmlsEAASHAoYa19F",
          "QmFkZ2VUeXBlX1RJN19NaWR3ZWVrEAESGwoXa19FQmFkZ2VUeXBlX1RJN19G",
          "aW5hbHMQAhIdChlrX0VCYWRnZVR5cGVfVEk3X0FsbEV2ZW50EAMSHAoYa19F",
          "QmFkZ2VUeXBlX1RJOF9NaWR3ZWVrEAQSGwoXa19FQmFkZ2VUeXBlX1RJOF9G",
          "aW5hbHMQBRIdChlrX0VCYWRnZVR5cGVfVEk4X0FsbEV2ZW50EAYq1AEKDUVM",
          "ZWFndWVTdGF0dXMSFwoTTEVBR1VFX1NUQVRVU19VTlNFVBAAEh0KGUxFQUdV",
          "RV9TVEFUVVNfVU5TVUJNSVRURUQQARIbChdMRUFHVUVfU1RBVFVTX1NVQk1J",
          "VFRFRBACEhoKFkxFQUdVRV9TVEFUVVNfQUNDRVBURUQQAxIaChZMRUFHVUVf",
          "U1RBVFVTX1JFSkVDVEVEEAQSGwoXTEVBR1VFX1NUQVRVU19DT05DTFVERUQQ",
          "BRIZChVMRUFHVUVfU1RBVFVTX0RFTEVURUQQBiq1AQoNRUxlYWd1ZVJlZ2lv",
          "bhIXChNMRUFHVUVfUkVHSU9OX1VOU0VUEAASFAoQTEVBR1VFX1JFR0lPTl9O",
          "QRABEhQKEExFQUdVRV9SRUdJT05fU0EQAhIYChRMRUFHVUVfUkVHSU9OX0VV",
          "Uk9QRRADEhUKEUxFQUdVRV9SRUdJT05fQ0lTEAQSFwoTTEVBR1VFX1JFR0lP",
          "Tl9DSElOQRAFEhUKEUxFQUdVRV9SRUdJT05fU0VBEAYqqAEKC0VMZWFndWVU",
          "aWVyEhUKEUxFQUdVRV9USUVSX1VOU0VUEAASFwoTTEVBR1VFX1RJRVJfQU1B",
          "VEVVUhABEhwKGExFQUdVRV9USUVSX1BST0ZFU1NJT05BTBACEhUKEUxFQUdV",
          "RV9USUVSX01JTk9SEAMSFQoRTEVBR1VFX1RJRVJfTUFKT1IQBBIdChlMRUFH",
          "VUVfVElFUl9JTlRFUk5BVElPTkFMEAUqmgEKE0VMZWFndWVUaWVyQ2F0ZWdv",
          "cnkSHAoYTEVBR1VFX1RJRVJfQ0FURUdPUllfTmlsEAASIAocTEVBR1VFX1RJ",
          "RVJfQ0FURUdPUllfQU1BVEVVUhABEiUKIUxFQUdVRV9USUVSX0NBVEVHT1JZ",
          "X1BST0ZFU1NJT05BTBACEhwKGExFQUdVRV9USUVSX0NBVEVHT1JZX0RQQxAD",
          "KqABCgxFTGVhZ3VlRmxhZ3MSFQoRTEVBR1VFX0ZMQUdTX05PTkUQABIdChlM",
          "RUFHVUVfQUNDRVBURURfQUdSRUVNRU5UEAESHQoZTEVBR1VFX1BBWU1FTlRf",
          "RU1BSUxfU0VOVBACEh0KGUxFQUdVRV9DT01QRU5ESVVNX0FMTE9XRUQQBBIc",
          "ChhMRUFHVUVfQ09NUEVORElVTV9QVUJMSUMQCCqrAQoYRUxlYWd1ZUJyb2Fk",
          "Y2FzdFByb3ZpZGVyEhwKGExFQUdVRV9CUk9BRENBU1RfVU5LTk9XThAAEhoK",
          "FkxFQUdVRV9CUk9BRENBU1RfU1RFQU0QARIbChdMRUFHVUVfQlJPQURDQVNU",
          "X1RXSVRDSBACEhwKGExFQUdVRV9CUk9BRENBU1RfWU9VVFVCRRADEhoKFkxF",
          "QUdVRV9CUk9BRENBU1RfT1RIRVIQZCqGAQoMRUxlYWd1ZVBoYXNlEhYKEkxF",
          "QUdVRV9QSEFTRV9VTlNFVBAAEiMKH0xFQUdVRV9QSEFTRV9SRUdJT05BTF9R",
          "VUFMSUZJRVIQARIcChhMRUFHVUVfUEhBU0VfR1JPVVBfU1RBR0UQAhIbChdM",
          "RUFHVUVfUEhBU0VfTUFJTl9FVkVOVBADKscCChNFTGVhZ3VlRmFudGFzeVBo",
          "YXNlEh4KGkxFQUdVRV9GQU5UQVNZX1BIQVNFX1VOU0VUEAASHQoZTEVBR1VF",
          "X0ZBTlRBU1lfUEhBU0VfTUFJThABEiUKIUxFQUdVRV9GQU5UQVNZX1BIQVNF",
          "X1FVQUxJRklFUl9OQRACEiUKIUxFQUdVRV9GQU5UQVNZX1BIQVNFX1FVQUxJ",
          "RklFUl9TQRADEikKJUxFQUdVRV9GQU5UQVNZX1BIQVNFX1FVQUxJRklFUl9F",
          "VVJPUEUQBBImCiJMRUFHVUVfRkFOVEFTWV9QSEFTRV9RVUFMSUZJRVJfQ0lT",
          "EAUSKAokTEVBR1VFX0ZBTlRBU1lfUEhBU0VfUVVBTElGSUVSX0NISU5BEAYS",
          "JgoiTEVBR1VFX0ZBTlRBU1lfUEhBU0VfUVVBTElGSUVSX1NFQRAHKrsNChJF",
          "TGVhZ3VlQXVkaXRBY3Rpb24SHwobTEVBR1VFX0FVRElUX0FDVElPTl9JTlZB",
          "TElEEAASJQohTEVBR1VFX0FVRElUX0FDVElPTl9MRUFHVUVfQ1JFQVRFEAES",
          "IwofTEVBR1VFX0FVRElUX0FDVElPTl9MRUFHVUVfRURJVBACEiUKIUxFQUdV",
          "RV9BVURJVF9BQ1RJT05fTEVBR1VFX0RFTEVURRADEigKJExFQUdVRV9BVURJ",
          "VF9BQ1RJT05fTEVBR1VFX0FETUlOX0FERBAEEisKJ0xFQUdVRV9BVURJVF9B",
          "Q1RJT05fTEVBR1VFX0FETUlOX1JFVk9LRRAFEiwKKExFQUdVRV9BVURJVF9B",
          "Q1RJT05fTEVBR1VFX0FETUlOX1BST01PVEUQBhIpCiVMRUFHVUVfQVVESVRf",
          "QUNUSU9OX0xFQUdVRV9TVFJFQU1fQUREEAcSLAooTEVBR1VFX0FVRElUX0FD",
          "VElPTl9MRUFHVUVfU1RSRUFNX1JFTU9WRRAIEiwKKExFQUdVRV9BVURJVF9B",
          "Q1RJT05fTEVBR1VFX0lNQUdFX1VQREFURUQQCRIsCihMRUFHVUVfQVVESVRf",
          "QUNUSU9OX0xFQUdVRV9NRVNTQUdFX0FEREVEEAoSKAokTEVBR1VFX0FVRElU",
          "X0FDVElPTl9MRUFHVUVfU1VCTUlUVEVEEAsSLQopTEVBR1VFX0FVRElUX0FD",
          "VElPTl9MRUFHVUVfU0VUX1BSSVpFX1BPT0wQDBIyCi5MRUFHVUVfQVVESVRf",
          "QUNUSU9OX0xFQUdVRV9BRERfUFJJWkVfUE9PTF9JVEVNEA0SNQoxTEVBR1VF",
          "X0FVRElUX0FDVElPTl9MRUFHVUVfUkVNT1ZFX1BSSVpFX1BPT0xfSVRFTRAO",
          "EioKJkxFQUdVRV9BVURJVF9BQ1RJT05fTEVBR1VFX01BVENIX1NUQVJUEA8S",
          "KAokTEVBR1VFX0FVRElUX0FDVElPTl9MRUFHVUVfTUFUQ0hfRU5EEBASLwor",
          "TEVBR1VFX0FVRElUX0FDVElPTl9MRUFHVUVfQUREX0lOVklURURfVEVBTRAR",
          "EjIKLkxFQUdVRV9BVURJVF9BQ1RJT05fTEVBR1VFX1JFTU9WRV9JTlZJVEVE",
          "X1RFQU0QEhItCilMRUFHVUVfQVVESVRfQUNUSU9OX0xFQUdVRV9TVEFUVVNf",
          "Q0hBTkdFRBATEioKJkxFQUdVRV9BVURJVF9BQ1RJT05fTEVBR1VFX1NUUkVB",
          "TV9FRElUEBQSKAokTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFR1JPVVBfQ1JF",
          "QVRFEGQSKQolTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFR1JPVVBfREVTVFJP",
          "WRBlEioKJkxFQUdVRV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX0FERF9URUFN",
          "EGYSLQopTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFR1JPVVBfUkVNT1ZFX1RF",
          "QU0QZxIvCitMRUFHVUVfQVVESVRfQUNUSU9OX05PREVHUk9VUF9TRVRfQURW",
          "QU5DSU5HEGgSJgoiTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFR1JPVVBfRURJ",
          "VBBpEioKJkxFQUdVRV9BVURJVF9BQ1RJT05fTk9ERUdST1VQX1BPUFVMQVRF",
          "EGoSKwonTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFR1JPVVBfQ09NUExFVEVE",
          "EGsSJAofTEVBR1VFX0FVRElUX0FDVElPTl9OT0RFX0NSRUFURRDIARIlCiBM",
          "RUFHVUVfQVVESVRfQUNUSU9OX05PREVfREVTVFJPWRDJARIoCiNMRUFHVUVf",
          "QVVESVRfQUNUSU9OX05PREVfQVVUT0NSRUFURRDKARImCiFMRUFHVUVfQVVE",
          "SVRfQUNUSU9OX05PREVfU0VUX1RFQU0QywESKwomTEVBR1VFX0FVRElUX0FD",
          "VElPTl9OT0RFX1NFVF9TRVJJRVNfSUQQzAESKwomTEVBR1VFX0FVRElUX0FD",
          "VElPTl9OT0RFX1NFVF9BRFZBTkNJTkcQzQESJgohTEVBR1VFX0FVRElUX0FD",
          "VElPTl9OT0RFX1NFVF9USU1FEM4BEi0KKExFQUdVRV9BVURJVF9BQ1RJT05f",
          "Tk9ERV9NQVRDSF9DT01QTEVURUQQzwESJwoiTEVBR1VFX0FVRElUX0FDVElP",
          "Tl9OT0RFX0NPTVBMRVRFRBDQARIiCh1MRUFHVUVfQVVESVRfQUNUSU9OX05P",
          "REVfRURJVBDRASqaCwoURE9UQV9DT01CQVRMT0dfVFlQRVMSGQoVRE9UQV9D",
          "T01CQVRMT0dfREFNQUdFEAASFwoTRE9UQV9DT01CQVRMT0dfSEVBTBABEh8K",
          "G0RPVEFfQ09NQkFUTE9HX01PRElGSUVSX0FERBACEiIKHkRPVEFfQ09NQkFU",
          "TE9HX01PRElGSUVSX1JFTU9WRRADEhgKFERPVEFfQ09NQkFUTE9HX0RFQVRI",
          "EAQSGgoWRE9UQV9DT01CQVRMT0dfQUJJTElUWRAFEhcKE0RPVEFfQ09NQkFU",
          "TE9HX0lURU0QBhIbChdET1RBX0NPTUJBVExPR19MT0NBVElPThAHEhcKE0RP",
          "VEFfQ09NQkFUTE9HX0dPTEQQCBIdChlET1RBX0NPTUJBVExPR19HQU1FX1NU",
          "QVRFEAkSFQoRRE9UQV9DT01CQVRMT0dfWFAQChIbChdET1RBX0NPTUJBVExP",
          "R19QVVJDSEFTRRALEhoKFkRPVEFfQ09NQkFUTE9HX0JVWUJBQ0sQDBIiCh5E",
          "T1RBX0NPTUJBVExPR19BQklMSVRZX1RSSUdHRVIQDRIeChpET1RBX0NPTUJB",
          "VExPR19QTEFZRVJTVEFUUxAOEhwKGERPVEFfQ09NQkFUTE9HX01VTFRJS0lM",
          "TBAPEh0KGURPVEFfQ09NQkFUTE9HX0tJTExTVFJFQUsQEBIlCiFET1RBX0NP",
          "TUJBVExPR19URUFNX0JVSUxESU5HX0tJTEwQERIeChpET1RBX0NPTUJBVExP",
          "R19GSVJTVF9CTE9PRBASEicKI0RPVEFfQ09NQkFUTE9HX01PRElGSUVSX1NU",
          "QUNLX0VWRU5UEBMSJQohRE9UQV9DT01CQVRMT0dfTkVVVFJBTF9DQU1QX1NU",
          "QUNLEBQSHgoaRE9UQV9DT01CQVRMT0dfUElDS1VQX1JVTkUQFRIlCiFET1RB",
          "X0NPTUJBVExPR19SRVZFQUxFRF9JTlZJU0lCTEUQFhIdChlET1RBX0NPTUJB",
          "VExPR19IRVJPX1NBVkVEEBcSIAocRE9UQV9DT01CQVRMT0dfTUFOQV9SRVNU",
          "T1JFRBAYEh8KG0RPVEFfQ09NQkFUTE9HX0hFUk9fTEVWRUxVUBAZEiMKH0RP",
          "VEFfQ09NQkFUTE9HX0JPVFRMRV9IRUFMX0FMTFkQGhIgChxET1RBX0NPTUJB",
          "VExPR19FTkRHQU1FX1NUQVRTEBsSJAogRE9UQV9DT01CQVRMT0dfSU5URVJS",
          "VVBUX0NIQU5ORUwQHBIeChpET1RBX0NPTUJBVExPR19BTExJRURfR09MRBAd",
          "Eh4KGkRPVEFfQ09NQkFUTE9HX0FFR0lTX1RBS0VOEB4SHgoaRE9UQV9DT01C",
          "QVRMT0dfTUFOQV9EQU1BR0UQHxIsCihET1RBX0NPTUJBVExPR19QSFlTSUNB",
          "TF9EQU1BR0VfUFJFVkVOVEVEECASIAocRE9UQV9DT01CQVRMT0dfVU5JVF9T",
          "VU1NT05FRBAhEh8KG0RPVEFfQ09NQkFUTE9HX0FUVEFDS19FVkFERRAiEhsK",
          "F0RPVEFfQ09NQkFUTE9HX1RSRUVfQ1VUECMSIgoeRE9UQV9DT01CQVRMT0df",
          "U1VDQ0VTU0ZVTF9TQ0FOECQSIQodRE9UQV9DT01CQVRMT0dfRU5EX0tJTExT",
          "VFJFQUsQJRIkCiBET1RBX0NPTUJBVExPR19CTE9PRFNUT05FX0NIQVJHRRAm",
          "EiIKHkRPVEFfQ09NQkFUTE9HX0NSSVRJQ0FMX0RBTUFHRRAnEh8KG0RPVEFf",
          "Q09NQkFUTE9HX1NQRUxMX0FCU09SQhAoEiIKHkRPVEFfQ09NQkFUTE9HX1VO",
          "SVRfVEVMRVBPUlRFRBApEiMKH0RPVEFfQ09NQkFUTE9HX0tJTExfRUFURVJf",
          "RVZFTlQQKip1ChBFRFBDRmF2b3JpdGVUeXBlEhUKEUZBVk9SSVRFX1RZUEVf",
          "QUxMEAASGAoURkFWT1JJVEVfVFlQRV9QTEFZRVIQARIWChJGQVZPUklURV9U",
          "WVBFX1RFQU0QAhIYChRGQVZPUklURV9UWVBFX0xFQUdVRRADKtsDChRFRFBD",
          "UHVzaE5vdGlmaWNhdGlvbhIdChlEUENfUFVTSF9OT1RJRklDQVRJT05fTmls",
          "EAASKAokRFBDX1BVU0hfTk9USUZJQ0FUSU9OX01BVENIX1NUQVJUSU5HEAES",
          "KgomRFBDX1BVU0hfTk9USUZJQ0FUSU9OX1BMQVlFUl9MRUZUX1RFQU0QChIs",
          "CihEUENfUFVTSF9OT1RJRklDQVRJT05fUExBWUVSX0pPSU5FRF9URUFNEAsS",
          "JwojRFBDX1BVU0hfTk9USUZJQ0FUSU9OX0xFQUdVRV9SRVNVTFQQFBI2CjJE",
          "UENfUFVTSF9OT1RJRklDQVRJT05fUFJFRElDVElPTl9NQVRDSEVTX0FWQUlM",
          "QUJMRRAeEisKJ0RQQ19QVVNIX05PVElGSUNBVElPTl9QUkVESUNUSU9OX1JF",
          "U1VMVBAfEjAKLERQQ19QVVNIX05PVElGSUNBVElPTl9GQU5UQVNZX1BMQVlF",
          "Ul9DTEVBUkVEECgSLworRFBDX1BVU0hfTk9USUZJQ0FUSU9OX0ZBTlRBU1lf",
          "REFJTFlfU1VNTUFSWRApEi8KK0RQQ19QVVNIX05PVElGSUNBVElPTl9GQU5U",
          "QVNZX0ZJTkFMX1JFU1VMVFMQKkIFSAGAAQBiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DOTA_GameMode), typeof(global::DOTA_GameState), typeof(global::DOTA_GC_TEAM), typeof(global::EEvent), typeof(global::DOTALeaverStatus_t), typeof(global::DOTAConnectionState_t), typeof(global::Fantasy_Roles), typeof(global::Fantasy_Team_Slots), typeof(global::Fantasy_Selection_Mode), typeof(global::DOTAChatChannelType_t), typeof(global::EProfileCardSlotType), typeof(global::EMatchGroupServerStatus), typeof(global::DOTA_CM_PICK), typeof(global::DOTALowPriorityBanType), typeof(global::DOTALobbyReadyState), typeof(global::DOTAGameVersion), typeof(global::DOTAJoinLobbyResult), typeof(global::DOTASelectionPriorityRules), typeof(global::DOTASelectionPriorityChoice), typeof(global::DOTAMatchVote), typeof(global::DOTA_LobbyMemberXPBonus), typeof(global::DOTALobbyVisibility), typeof(global::EDOTAPlayerMMRType), typeof(global::MatchType), typeof(global::DOTABotDifficulty), typeof(global::DOTA_BOT_MODE), typeof(global::MatchLanguages), typeof(global::ETourneyQueueDeadlineState), typeof(global::EMatchOutcome), typeof(global::ELaneType), typeof(global::EBadgeType), typeof(global::ELeagueStatus), typeof(global::ELeagueRegion), typeof(global::ELeagueTier), typeof(global::ELeagueTierCategory), typeof(global::ELeagueFlags), typeof(global::ELeagueBroadcastProvider), typeof(global::ELeaguePhase), typeof(global::ELeagueFantasyPhase), typeof(global::ELeagueAuditAction), typeof(global::DOTA_COMBATLOG_TYPES), typeof(global::EDPCFavoriteType), typeof(global::EDPCPushNotification), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientHardwareSpecs), global::CDOTAClientHardwareSpecs.Parser, new[]{ "LogicalProcessors", "CpuCyclesPerSecond", "TotalPhysicalMemory", "Is64BitOs", "UploadMeasurement", "PreferNotHost" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgDOTACombatLogEntry), global::CMsgDOTACombatLogEntry.Parser, new[]{ "Type", "TargetName", "TargetSourceName", "AttackerName", "DamageSourceName", "InflictorName", "IsAttackerIllusion", "IsAttackerHero", "IsTargetIllusion", "IsTargetHero", "IsVisibleRadiant", "IsVisibleDire", "Value", "Health", "Timestamp", "StunDuration", "SlowDuration", "IsAbilityToggleOn", "IsAbilityToggleOff", "AbilityLevel", "LocationX", "LocationY", "GoldReason", "TimestampRaw", "ModifierDuration", "XpReason", "LastHits", "AttackerTeam", "TargetTeam", "ObsWardsPlaced", "AssistPlayer0", "AssistPlayer1", "AssistPlayer2", "AssistPlayer3", "StackCount", "HiddenModifier", "IsTargetBuilding", "NeutralCampType", "RuneType", "AssistPlayers", "IsHealSave", "IsUltimateAbility", "AttackerHeroLevel", "TargetHeroLevel", "Xpm", "Gpm", "EventLocation", "TargetIsSelf", "DamageType", "InvisibilityModifier", "DamageCategory", "Networth", "BuildingType", "ModifierElapsedDuration", "SilenceModifier", "HealFromLifesteal", "ModifierPurged", "SpellEvaded", "MotionControllerModifier", "LongRangeKill", "ModifierPurgeAbility", "ModifierPurgeNpc", "RootModifier", "TotalUnitDeathCount", "AuraModifier", "ArmorDebuffModifier", "NoPhysicalDamageModifier", "ModifierAbility", "ModifierHidden", "InflictorIsStolenAbility", "KillEaterEvent", "UnitStatusLabel", "SpellGeneratedAttack" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum DOTA_GameMode {
  [pbr::OriginalName("DOTA_GAMEMODE_NONE")] None = 0,
  [pbr::OriginalName("DOTA_GAMEMODE_AP")] Ap = 1,
  [pbr::OriginalName("DOTA_GAMEMODE_CM")] Cm = 2,
  [pbr::OriginalName("DOTA_GAMEMODE_RD")] Rd = 3,
  [pbr::OriginalName("DOTA_GAMEMODE_SD")] Sd = 4,
  [pbr::OriginalName("DOTA_GAMEMODE_AR")] Ar = 5,
  [pbr::OriginalName("DOTA_GAMEMODE_INTRO")] Intro = 6,
  [pbr::OriginalName("DOTA_GAMEMODE_HW")] Hw = 7,
  [pbr::OriginalName("DOTA_GAMEMODE_REVERSE_CM")] ReverseCm = 8,
  [pbr::OriginalName("DOTA_GAMEMODE_XMAS")] Xmas = 9,
  [pbr::OriginalName("DOTA_GAMEMODE_TUTORIAL")] Tutorial = 10,
  [pbr::OriginalName("DOTA_GAMEMODE_MO")] Mo = 11,
  [pbr::OriginalName("DOTA_GAMEMODE_LP")] Lp = 12,
  [pbr::OriginalName("DOTA_GAMEMODE_POOL1")] Pool1 = 13,
  [pbr::OriginalName("DOTA_GAMEMODE_FH")] Fh = 14,
  [pbr::OriginalName("DOTA_GAMEMODE_CUSTOM")] Custom = 15,
  [pbr::OriginalName("DOTA_GAMEMODE_CD")] Cd = 16,
  [pbr::OriginalName("DOTA_GAMEMODE_BD")] Bd = 17,
  [pbr::OriginalName("DOTA_GAMEMODE_ABILITY_DRAFT")] AbilityDraft = 18,
  [pbr::OriginalName("DOTA_GAMEMODE_EVENT")] Event = 19,
  [pbr::OriginalName("DOTA_GAMEMODE_ARDM")] Ardm = 20,
  [pbr::OriginalName("DOTA_GAMEMODE_1V1MID")] _1V1Mid = 21,
  [pbr::OriginalName("DOTA_GAMEMODE_ALL_DRAFT")] AllDraft = 22,
  [pbr::OriginalName("DOTA_GAMEMODE_TURBO")] Turbo = 23,
  [pbr::OriginalName("DOTA_GAMEMODE_MUTATION")] Mutation = 24,
  [pbr::OriginalName("DOTA_GAMEMODE_COACHES_CHALLENGE")] CoachesChallenge = 25,
}

public enum DOTA_GameState {
  [pbr::OriginalName("DOTA_GAMERULES_STATE_INIT")] DotaGamerulesStateInit = 0,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD")] DotaGamerulesStateWaitForPlayersToLoad = 1,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_HERO_SELECTION")] DotaGamerulesStateHeroSelection = 2,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_STRATEGY_TIME")] DotaGamerulesStateStrategyTime = 3,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_PRE_GAME")] DotaGamerulesStatePreGame = 4,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_GAME_IN_PROGRESS")] DotaGamerulesStateGameInProgress = 5,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_POST_GAME")] DotaGamerulesStatePostGame = 6,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_DISCONNECT")] DotaGamerulesStateDisconnect = 7,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_TEAM_SHOWCASE")] DotaGamerulesStateTeamShowcase = 8,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP")] DotaGamerulesStateCustomGameSetup = 9,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD")] DotaGamerulesStateWaitForMapToLoad = 10,
  [pbr::OriginalName("DOTA_GAMERULES_STATE_LAST")] DotaGamerulesStateLast = 11,
}

public enum DOTA_GC_TEAM {
  [pbr::OriginalName("DOTA_GC_TEAM_GOOD_GUYS")] GoodGuys = 0,
  [pbr::OriginalName("DOTA_GC_TEAM_BAD_GUYS")] BadGuys = 1,
  [pbr::OriginalName("DOTA_GC_TEAM_BROADCASTER")] Broadcaster = 2,
  [pbr::OriginalName("DOTA_GC_TEAM_SPECTATOR")] Spectator = 3,
  [pbr::OriginalName("DOTA_GC_TEAM_PLAYER_POOL")] PlayerPool = 4,
  [pbr::OriginalName("DOTA_GC_TEAM_NOTEAM")] Noteam = 5,
}

public enum EEvent {
  [pbr::OriginalName("EVENT_ID_NONE")] EventIdNone = 0,
  [pbr::OriginalName("EVENT_ID_DIRETIDE")] EventIdDiretide = 1,
  [pbr::OriginalName("EVENT_ID_SPRING_FESTIVAL")] EventIdSpringFestival = 2,
  [pbr::OriginalName("EVENT_ID_FROSTIVUS_2013")] EventIdFrostivus2013 = 3,
  [pbr::OriginalName("EVENT_ID_COMPENDIUM_2014")] EventIdCompendium2014 = 4,
  [pbr::OriginalName("EVENT_ID_PWRD_DAC_2015")] EventIdPwrdDac2015 = 6,
  [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2015")] EventIdNewBloom2015 = 7,
  [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2015")] EventIdInternational2015 = 8,
  [pbr::OriginalName("EVENT_ID_FALL_MAJOR_2015")] EventIdFallMajor2015 = 9,
  [pbr::OriginalName("EVENT_ID_ORACLE_PA")] EventIdOraclePa = 10,
  [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2015_PREBEAST")] EventIdNewBloom2015Prebeast = 11,
  [pbr::OriginalName("EVENT_ID_FROSTIVUS")] EventIdFrostivus = 12,
  [pbr::OriginalName("EVENT_ID_WINTER_MAJOR_2016")] EventIdWinterMajor2016 = 13,
  [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2016")] EventIdInternational2016 = 14,
  [pbr::OriginalName("EVENT_ID_FALL_MAJOR_2016")] EventIdFallMajor2016 = 15,
  [pbr::OriginalName("EVENT_ID_WINTER_MAJOR_2017")] EventIdWinterMajor2017 = 16,
  [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2017")] EventIdNewBloom2017 = 17,
  [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2017")] EventIdInternational2017 = 18,
  [pbr::OriginalName("EVENT_ID_PLUS_SUBSCRIPTION")] EventIdPlusSubscription = 19,
  [pbr::OriginalName("EVENT_ID_SINGLES_DAY_2017")] EventIdSinglesDay2017 = 20,
  [pbr::OriginalName("EVENT_ID_FROSTIVUS_2017")] EventIdFrostivus2017 = 21,
  [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2018")] EventIdInternational2018 = 22,
  [pbr::OriginalName("EVENT_ID_FROSTIVUS_2018")] EventIdFrostivus2018 = 23,
  [pbr::OriginalName("EVENT_ID_NEW_BLOOM_2019")] EventIdNewBloom2019 = 24,
  [pbr::OriginalName("EVENT_ID_INTERNATIONAL_2019")] EventIdInternational2019 = 25,
  [pbr::OriginalName("EVENT_ID_COUNT")] EventIdCount = 26,
}

public enum DOTALeaverStatus_t {
  [pbr::OriginalName("DOTA_LEAVER_NONE")] DotaLeaverNone = 0,
  [pbr::OriginalName("DOTA_LEAVER_DISCONNECTED")] DotaLeaverDisconnected = 1,
  [pbr::OriginalName("DOTA_LEAVER_DISCONNECTED_TOO_LONG")] DotaLeaverDisconnectedTooLong = 2,
  [pbr::OriginalName("DOTA_LEAVER_ABANDONED")] DotaLeaverAbandoned = 3,
  [pbr::OriginalName("DOTA_LEAVER_AFK")] DotaLeaverAfk = 4,
  [pbr::OriginalName("DOTA_LEAVER_NEVER_CONNECTED")] DotaLeaverNeverConnected = 5,
  [pbr::OriginalName("DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG")] DotaLeaverNeverConnectedTooLong = 6,
  [pbr::OriginalName("DOTA_LEAVER_FAILED_TO_READY_UP")] DotaLeaverFailedToReadyUp = 7,
  [pbr::OriginalName("DOTA_LEAVER_DECLINED")] DotaLeaverDeclined = 8,
}

public enum DOTAConnectionState_t {
  [pbr::OriginalName("DOTA_CONNECTION_STATE_UNKNOWN")] DotaConnectionStateUnknown = 0,
  [pbr::OriginalName("DOTA_CONNECTION_STATE_NOT_YET_CONNECTED")] DotaConnectionStateNotYetConnected = 1,
  [pbr::OriginalName("DOTA_CONNECTION_STATE_CONNECTED")] DotaConnectionStateConnected = 2,
  [pbr::OriginalName("DOTA_CONNECTION_STATE_DISCONNECTED")] DotaConnectionStateDisconnected = 3,
  [pbr::OriginalName("DOTA_CONNECTION_STATE_ABANDONED")] DotaConnectionStateAbandoned = 4,
  [pbr::OriginalName("DOTA_CONNECTION_STATE_LOADING")] DotaConnectionStateLoading = 5,
  [pbr::OriginalName("DOTA_CONNECTION_STATE_FAILED")] DotaConnectionStateFailed = 6,
}

public enum Fantasy_Roles {
  [pbr::OriginalName("FANTASY_ROLE_UNDEFINED")] FantasyRoleUndefined = 0,
  [pbr::OriginalName("FANTASY_ROLE_CORE")] FantasyRoleCore = 1,
  [pbr::OriginalName("FANTASY_ROLE_SUPPORT")] Upport = 2,
  [pbr::OriginalName("FANTASY_ROLE_OFFLANE")] FantasyRoleOfflane = 3,
  [pbr::OriginalName("FANTASY_ROLE_MID")] FantasyRoleMid = 4,
}

public enum Fantasy_Team_Slots {
  [pbr::OriginalName("FANTASY_SLOT_NONE")] FantasySlotNone = 0,
  [pbr::OriginalName("FANTASY_SLOT_CORE")] FantasySlotCore = 1,
  [pbr::OriginalName("FANTASY_SLOT_SUPPORT")] FantasySlotSupport = 2,
  [pbr::OriginalName("FANTASY_SLOT_ANY")] FantasySlotAny = 3,
  [pbr::OriginalName("FANTASY_SLOT_BENCH")] FantasySlotBench = 4,
}

public enum Fantasy_Selection_Mode {
  [pbr::OriginalName("FANTASY_SELECTION_INVALID")] FantasySelectionInvalid = 0,
  [pbr::OriginalName("FANTASY_SELECTION_LOCKED")] FantasySelectionLocked = 1,
  [pbr::OriginalName("FANTASY_SELECTION_SHUFFLE")] FantasySelectionShuffle = 2,
  [pbr::OriginalName("FANTASY_SELECTION_FREE_PICK")] FantasySelectionFreePick = 3,
  [pbr::OriginalName("FANTASY_SELECTION_ENDED")] FantasySelectionEnded = 4,
  [pbr::OriginalName("FANTASY_SELECTION_PRE_SEASON")] FantasySelectionPreSeason = 5,
  [pbr::OriginalName("FANTASY_SELECTION_PRE_DRAFT")] FantasySelectionPreDraft = 6,
  [pbr::OriginalName("FANTASY_SELECTION_DRAFTING")] FantasySelectionDrafting = 7,
  [pbr::OriginalName("FANTASY_SELECTION_REGULAR_SEASON")] FantasySelectionRegularSeason = 8,
  [pbr::OriginalName("FANTASY_SELECTION_CARD_BASED")] FantasySelectionCardBased = 9,
}

public enum DOTAChatChannelType_t {
  [pbr::OriginalName("DOTAChannelType_Regional")] DotachannelTypeRegional = 0,
  [pbr::OriginalName("DOTAChannelType_Custom")] DotachannelTypeCustom = 1,
  [pbr::OriginalName("DOTAChannelType_Party")] DotachannelTypeParty = 2,
  [pbr::OriginalName("DOTAChannelType_Lobby")] DotachannelTypeLobby = 3,
  [pbr::OriginalName("DOTAChannelType_Team")] DotachannelTypeTeam = 4,
  [pbr::OriginalName("DOTAChannelType_Guild")] DotachannelTypeGuild = 5,
  [pbr::OriginalName("DOTAChannelType_Fantasy")] DotachannelTypeFantasy = 6,
  [pbr::OriginalName("DOTAChannelType_Whisper")] DotachannelTypeWhisper = 7,
  [pbr::OriginalName("DOTAChannelType_Console")] DotachannelTypeConsole = 8,
  [pbr::OriginalName("DOTAChannelType_Tab")] DotachannelTypeTab = 9,
  [pbr::OriginalName("DOTAChannelType_Invalid")] DotachannelTypeInvalid = 10,
  [pbr::OriginalName("DOTAChannelType_GameAll")] DotachannelTypeGameAll = 11,
  [pbr::OriginalName("DOTAChannelType_GameAllies")] DotachannelTypeGameAllies = 12,
  [pbr::OriginalName("DOTAChannelType_GameSpectator")] DotachannelTypeGameSpectator = 13,
  [pbr::OriginalName("DOTAChannelType_Cafe")] DotachannelTypeCafe = 15,
  [pbr::OriginalName("DOTAChannelType_CustomGame")] DotachannelTypeCustomGame = 16,
  [pbr::OriginalName("DOTAChannelType_Private")] DotachannelTypePrivate = 17,
  [pbr::OriginalName("DOTAChannelType_PostGame")] DotachannelTypePostGame = 18,
  [pbr::OriginalName("DOTAChannelType_BattleCup")] DotachannelTypeBattleCup = 19,
  [pbr::OriginalName("DOTAChannelType_HLTVSpectator")] DotachannelTypeHltvspectator = 20,
  [pbr::OriginalName("DOTAChannelType_GameEvents")] DotachannelTypeGameEvents = 21,
  [pbr::OriginalName("DOTAChannelType_Trivia")] DotachannelTypeTrivia = 22,
}

public enum EProfileCardSlotType {
  [pbr::OriginalName("k_EProfileCardSlotType_Empty")] KEprofileCardSlotTypeEmpty = 0,
  [pbr::OriginalName("k_EProfileCardSlotType_Stat")] KEprofileCardSlotTypeStat = 1,
  [pbr::OriginalName("k_EProfileCardSlotType_Trophy")] KEprofileCardSlotTypeTrophy = 2,
  [pbr::OriginalName("k_EProfileCardSlotType_Item")] KEprofileCardSlotTypeItem = 3,
  [pbr::OriginalName("k_EProfileCardSlotType_Hero")] KEprofileCardSlotTypeHero = 4,
  [pbr::OriginalName("k_EProfileCardSlotType_Emoticon")] KEprofileCardSlotTypeEmoticon = 5,
  [pbr::OriginalName("k_EProfileCardSlotType_Team")] KEprofileCardSlotTypeTeam = 6,
}

public enum EMatchGroupServerStatus {
  [pbr::OriginalName("k_EMatchGroupServerStatus_OK")] KEmatchGroupServerStatusOk = 0,
  [pbr::OriginalName("k_EMatchGroupServerStatus_LimitedAvailability")] KEmatchGroupServerStatusLimitedAvailability = 1,
  [pbr::OriginalName("k_EMatchGroupServerStatus_Offline")] KEmatchGroupServerStatusOffline = 2,
}

public enum DOTA_CM_PICK {
  [pbr::OriginalName("DOTA_CM_RANDOM")] DotaCmRandom = 0,
  [pbr::OriginalName("DOTA_CM_GOOD_GUYS")] DotaCmGoodGuys = 1,
  [pbr::OriginalName("DOTA_CM_BAD_GUYS")] DotaCmBadGuys = 2,
}

public enum DOTALowPriorityBanType {
  [pbr::OriginalName("DOTA_LOW_PRIORITY_BAN_ABANDON")] DotaLowPriorityBanAbandon = 0,
  [pbr::OriginalName("DOTA_LOW_PRIORITY_BAN_REPORTS")] DotaLowPriorityBanReports = 1,
  [pbr::OriginalName("DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON")] DotaLowPriorityBanSecondaryAbandon = 2,
}

public enum DOTALobbyReadyState {
  [pbr::OriginalName("DOTALobbyReadyState_UNDECLARED")] Undeclared = 0,
  [pbr::OriginalName("DOTALobbyReadyState_ACCEPTED")] Accepted = 1,
  [pbr::OriginalName("DOTALobbyReadyState_DECLINED")] Declined = 2,
}

public enum DOTAGameVersion {
  [pbr::OriginalName("GAME_VERSION_CURRENT")] GameVersionCurrent = 0,
  [pbr::OriginalName("GAME_VERSION_STABLE")] GameVersionStable = 1,
}

public enum DOTAJoinLobbyResult {
  [pbr::OriginalName("DOTA_JOIN_RESULT_SUCCESS")] DotaJoinResultSuccess = 0,
  [pbr::OriginalName("DOTA_JOIN_RESULT_ALREADY_IN_GAME")] DotaJoinResultAlreadyInGame = 1,
  [pbr::OriginalName("DOTA_JOIN_RESULT_INVALID_LOBBY")] DotaJoinResultInvalidLobby = 2,
  [pbr::OriginalName("DOTA_JOIN_RESULT_INCORRECT_PASSWORD")] DotaJoinResultIncorrectPassword = 3,
  [pbr::OriginalName("DOTA_JOIN_RESULT_ACCESS_DENIED")] DotaJoinResultAccessDenied = 4,
  [pbr::OriginalName("DOTA_JOIN_RESULT_GENERIC_ERROR")] DotaJoinResultGenericError = 5,
  [pbr::OriginalName("DOTA_JOIN_RESULT_INCORRECT_VERSION")] DotaJoinResultIncorrectVersion = 6,
  [pbr::OriginalName("DOTA_JOIN_RESULT_IN_TEAM_PARTY")] DotaJoinResultInTeamParty = 7,
  [pbr::OriginalName("DOTA_JOIN_RESULT_NO_LOBBY_FOUND")] DotaJoinResultNoLobbyFound = 8,
  [pbr::OriginalName("DOTA_JOIN_RESULT_LOBBY_FULL")] DotaJoinResultLobbyFull = 9,
  [pbr::OriginalName("DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION")] DotaJoinResultCustomGameIncorrectVersion = 10,
  [pbr::OriginalName("DOTA_JOIN_RESULT_TIMEOUT")] DotaJoinResultTimeout = 11,
  [pbr::OriginalName("DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN")] DotaJoinResultCustomGameCooldown = 12,
  [pbr::OriginalName("DOTA_JOIN_RESULT_BUSY")] DotaJoinResultBusy = 13,
}

public enum DOTASelectionPriorityRules {
  [pbr::OriginalName("k_DOTASelectionPriorityRules_Manual")] KDotaselectionPriorityRulesManual = 0,
  [pbr::OriginalName("k_DOTASelectionPriorityRules_Automatic")] KDotaselectionPriorityRulesAutomatic = 1,
}

public enum DOTASelectionPriorityChoice {
  [pbr::OriginalName("k_DOTASelectionPriorityChoice_Invalid")] KDotaselectionPriorityChoiceInvalid = 0,
  [pbr::OriginalName("k_DOTASelectionPriorityChoice_FirstPick")] KDotaselectionPriorityChoiceFirstPick = 1,
  [pbr::OriginalName("k_DOTASelectionPriorityChoice_SecondPick")] KDotaselectionPriorityChoiceSecondPick = 2,
  [pbr::OriginalName("k_DOTASelectionPriorityChoice_Radiant")] KDotaselectionPriorityChoiceRadiant = 3,
  [pbr::OriginalName("k_DOTASelectionPriorityChoice_Dire")] KDotaselectionPriorityChoiceDire = 4,
}

public enum DOTAMatchVote {
  [pbr::OriginalName("DOTAMatchVote_INVALID")] Invalid = 0,
  [pbr::OriginalName("DOTAMatchVote_POSITIVE")] Positive = 1,
  [pbr::OriginalName("DOTAMatchVote_NEGATIVE")] Negative = 2,
}

public enum DOTA_LobbyMemberXPBonus {
  [pbr::OriginalName("DOTA_LobbyMemberXPBonus_DEFAULT")] Default = 0,
  [pbr::OriginalName("DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER")] BattleBooster = 1,
  [pbr::OriginalName("DOTA_LobbyMemberXPBonus_SHARE_BONUS")] ShareBonus = 2,
  [pbr::OriginalName("DOTA_LobbyMemberXPBonus_PARTY")] Party = 3,
  [pbr::OriginalName("DOTA_LobbyMemberXPBonus_RECRUITMENT")] Recruitment = 4,
  [pbr::OriginalName("DOTA_LobbyMemberXPBonus_PCBANG")] Pcbang = 5,
}

public enum DOTALobbyVisibility {
  [pbr::OriginalName("DOTALobbyVisibility_Public")] Public = 0,
  [pbr::OriginalName("DOTALobbyVisibility_Friends")] Friends = 1,
  [pbr::OriginalName("DOTALobbyVisibility_Unlisted")] Unlisted = 2,
}

public enum EDOTAPlayerMMRType {
  [pbr::OriginalName("k_EDOTAPlayerMMRType_Invalid")] KEdotaplayerMmrtypeInvalid = 0,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_GeneralHidden")] KEdotaplayerMmrtypeGeneralHidden = 1,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_GeneralCompetitive2019")] KEdotaplayerMmrtypeGeneralCompetitive2019 = 3,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_SoloCompetitive2019")] KEdotaplayerMmrtypeSoloCompetitive2019 = 4,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_1v1Competitive_UNUSED")] KEdotaplayerMmrtype1V1CompetitiveUnused = 5,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_GeneralSeasonalRanked")] KEdotaplayerMmrtypeGeneralSeasonalRanked = 6,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_SoloSeasonalRanked")] KEdotaplayerMmrtypeSoloSeasonalRanked = 7,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_Competitive_Core")] KEdotaplayerMmrtypeCompetitiveCore = 8,
  [pbr::OriginalName("k_EDOTAPlayerMMRType_Competitive_Support")] KEdotaplayerMmrtypeCompetitiveSupport = 9,
}

public enum MatchType {
  [pbr::OriginalName("MATCH_TYPE_CASUAL")] Casual = 0,
  [pbr::OriginalName("MATCH_TYPE_COOP_BOTS")] CoopBots = 1,
  [pbr::OriginalName("MATCH_TYPE_LEGACY_TEAM_RANKED")] LegacyTeamRanked = 2,
  [pbr::OriginalName("MATCH_TYPE_LEGACY_SOLO_QUEUE")] LegacySoloQueue = 3,
  [pbr::OriginalName("MATCH_TYPE_COMPETITIVE")] Competitive = 4,
  [pbr::OriginalName("MATCH_TYPE_WEEKEND_TOURNEY")] WeekendTourney = 5,
  [pbr::OriginalName("MATCH_TYPE_CASUAL_1V1")] Casual1V1 = 6,
  [pbr::OriginalName("MATCH_TYPE_EVENT")] Event = 7,
  [pbr::OriginalName("MATCH_TYPE_SEASONAL_RANKED")] SeasonalRanked = 8,
  [pbr::OriginalName("MATCH_TYPE_LOWPRI_DEPRECATED")] LowpriDeprecated = 9,
  [pbr::OriginalName("MATCH_TYPE_STEAM_GROUP")] SteamGroup = 10,
  [pbr::OriginalName("MATCH_TYPE_MUTATION")] Mutation = 11,
  [pbr::OriginalName("MATCH_TYPE_COACHES_CHALLENGE")] CoachesChallenge = 12,
}

public enum DOTABotDifficulty {
  [pbr::OriginalName("BOT_DIFFICULTY_PASSIVE")] BotDifficultyPassive = 0,
  [pbr::OriginalName("BOT_DIFFICULTY_EASY")] BotDifficultyEasy = 1,
  [pbr::OriginalName("BOT_DIFFICULTY_MEDIUM")] BotDifficultyMedium = 2,
  [pbr::OriginalName("BOT_DIFFICULTY_HARD")] BotDifficultyHard = 3,
  [pbr::OriginalName("BOT_DIFFICULTY_UNFAIR")] BotDifficultyUnfair = 4,
  [pbr::OriginalName("BOT_DIFFICULTY_INVALID")] BotDifficultyInvalid = 5,
  [pbr::OriginalName("BOT_DIFFICULTY_EXTRA1")] BotDifficultyExtra1 = 6,
  [pbr::OriginalName("BOT_DIFFICULTY_EXTRA2")] BotDifficultyExtra2 = 7,
  [pbr::OriginalName("BOT_DIFFICULTY_EXTRA3")] BotDifficultyExtra3 = 8,
}

public enum DOTA_BOT_MODE {
  [pbr::OriginalName("DOTA_BOT_MODE_NONE")] None = 0,
  [pbr::OriginalName("DOTA_BOT_MODE_LANING")] Laning = 1,
  [pbr::OriginalName("DOTA_BOT_MODE_ATTACK")] Attack = 2,
  [pbr::OriginalName("DOTA_BOT_MODE_ROAM")] Roam = 3,
  [pbr::OriginalName("DOTA_BOT_MODE_RETREAT")] Retreat = 4,
  [pbr::OriginalName("DOTA_BOT_MODE_SECRET_SHOP")] SecretShop = 5,
  [pbr::OriginalName("DOTA_BOT_MODE_SIDE_SHOP")] SideShop = 6,
  [pbr::OriginalName("DOTA_BOT_MODE_RUNE")] Rune = 7,
  [pbr::OriginalName("DOTA_BOT_MODE_PUSH_TOWER_TOP")] PushTowerTop = 8,
  [pbr::OriginalName("DOTA_BOT_MODE_PUSH_TOWER_MID")] PushTowerMid = 9,
  [pbr::OriginalName("DOTA_BOT_MODE_PUSH_TOWER_BOT")] PushTowerBot = 10,
  [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_TOWER_TOP")] DefendTowerTop = 11,
  [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_TOWER_MID")] DefendTowerMid = 12,
  [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_TOWER_BOT")] DefendTowerBot = 13,
  [pbr::OriginalName("DOTA_BOT_MODE_ASSEMBLE")] Assemble = 14,
  [pbr::OriginalName("DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS")] AssembleWithHumans = 15,
  [pbr::OriginalName("DOTA_BOT_MODE_TEAM_ROAM")] TeamRoam = 16,
  [pbr::OriginalName("DOTA_BOT_MODE_FARM")] Farm = 17,
  [pbr::OriginalName("DOTA_BOT_MODE_DEFEND_ALLY")] DefendAlly = 18,
  [pbr::OriginalName("DOTA_BOT_MODE_EVASIVE_MANEUVERS")] EvasiveManeuvers = 19,
  [pbr::OriginalName("DOTA_BOT_MODE_ROSHAN")] Roshan = 20,
  [pbr::OriginalName("DOTA_BOT_MODE_ITEM")] Item = 21,
  [pbr::OriginalName("DOTA_BOT_MODE_WARD")] Ward = 22,
  [pbr::OriginalName("DOTA_BOT_MODE_COMPANION")] Companion = 23,
  [pbr::OriginalName("DOTA_BOT_MODE_TUTORIAL_BOSS")] TutorialBoss = 24,
  [pbr::OriginalName("DOTA_BOT_MODE_MINION")] Minion = 25,
}

public enum MatchLanguages {
  [pbr::OriginalName("MATCH_LANGUAGE_INVALID")] MatchLanguageInvalid = 0,
  [pbr::OriginalName("MATCH_LANGUAGE_ENGLISH")] MatchLanguageEnglish = 1,
  [pbr::OriginalName("MATCH_LANGUAGE_RUSSIAN")] MatchLanguageRussian = 2,
  [pbr::OriginalName("MATCH_LANGUAGE_CHINESE")] MatchLanguageChinese = 3,
  [pbr::OriginalName("MATCH_LANGUAGE_KOREAN")] MatchLanguageKorean = 4,
  [pbr::OriginalName("MATCH_LANGUAGE_SPANISH")] Panish = 5,
  [pbr::OriginalName("MATCH_LANGUAGE_PORTUGUESE")] MatchLanguagePortuguese = 6,
  [pbr::OriginalName("MATCH_LANGUAGE_ENGLISH2")] MatchLanguageEnglish2 = 7,
}

public enum ETourneyQueueDeadlineState {
  [pbr::OriginalName("k_ETourneyQueueDeadlineState_Normal")] KEtourneyQueueDeadlineStateNormal = 0,
  [pbr::OriginalName("k_ETourneyQueueDeadlineState_Missed")] KEtourneyQueueDeadlineStateMissed = 1,
  [pbr::OriginalName("k_ETourneyQueueDeadlineState_ExpiredOK")] KEtourneyQueueDeadlineStateExpiredOk = 2,
  [pbr::OriginalName("k_ETourneyQueueDeadlineState_SeekingBye")] KEtourneyQueueDeadlineStateSeekingBye = 3,
  [pbr::OriginalName("k_ETourneyQueueDeadlineState_EligibleForRefund")] KEtourneyQueueDeadlineStateEligibleForRefund = 4,
  [pbr::OriginalName("k_ETourneyQueueDeadlineState_NA")] KEtourneyQueueDeadlineStateNa = -1,
  [pbr::OriginalName("k_ETourneyQueueDeadlineState_ExpiringSoon")] KEtourneyQueueDeadlineStateExpiringSoon = 101,
}

public enum EMatchOutcome {
  [pbr::OriginalName("k_EMatchOutcome_Unknown")] KEmatchOutcomeUnknown = 0,
  [pbr::OriginalName("k_EMatchOutcome_RadVictory")] KEmatchOutcomeRadVictory = 2,
  [pbr::OriginalName("k_EMatchOutcome_DireVictory")] KEmatchOutcomeDireVictory = 3,
  [pbr::OriginalName("k_EMatchOutcome_NotScored_PoorNetworkConditions")] KEmatchOutcomeNotScoredPoorNetworkConditions = 64,
  [pbr::OriginalName("k_EMatchOutcome_NotScored_Leaver")] KEmatchOutcomeNotScoredLeaver = 65,
  [pbr::OriginalName("k_EMatchOutcome_NotScored_ServerCrash")] KEmatchOutcomeNotScoredServerCrash = 66,
  [pbr::OriginalName("k_EMatchOutcome_NotScored_NeverStarted")] KEmatchOutcomeNotScoredNeverStarted = 67,
  [pbr::OriginalName("k_EMatchOutcome_NotScored_Canceled")] KEmatchOutcomeNotScoredCanceled = 68,
}

public enum ELaneType {
  [pbr::OriginalName("LANE_TYPE_UNKNOWN")] LaneTypeUnknown = 0,
  [pbr::OriginalName("LANE_TYPE_SAFE")] LaneTypeSafe = 1,
  [pbr::OriginalName("LANE_TYPE_OFF")] LaneTypeOff = 2,
  [pbr::OriginalName("LANE_TYPE_MID")] LaneTypeMid = 3,
  [pbr::OriginalName("LANE_TYPE_JUNGLE")] LaneTypeJungle = 4,
  [pbr::OriginalName("LANE_TYPE_ROAM")] LaneTypeRoam = 5,
}

public enum EBadgeType {
  [pbr::OriginalName("k_EBadgeType_Nil")] KEbadgeTypeNil = 0,
  [pbr::OriginalName("k_EBadgeType_TI7_Midweek")] KEbadgeTypeTi7Midweek = 1,
  [pbr::OriginalName("k_EBadgeType_TI7_Finals")] KEbadgeTypeTi7Finals = 2,
  [pbr::OriginalName("k_EBadgeType_TI7_AllEvent")] KEbadgeTypeTi7AllEvent = 3,
  [pbr::OriginalName("k_EBadgeType_TI8_Midweek")] KEbadgeTypeTi8Midweek = 4,
  [pbr::OriginalName("k_EBadgeType_TI8_Finals")] KEbadgeTypeTi8Finals = 5,
  [pbr::OriginalName("k_EBadgeType_TI8_AllEvent")] KEbadgeTypeTi8AllEvent = 6,
}

public enum ELeagueStatus {
  [pbr::OriginalName("LEAGUE_STATUS_UNSET")] LeagueStatusUnset = 0,
  [pbr::OriginalName("LEAGUE_STATUS_UNSUBMITTED")] LeagueStatusUnsubmitted = 1,
  [pbr::OriginalName("LEAGUE_STATUS_SUBMITTED")] LeagueStatusSubmitted = 2,
  [pbr::OriginalName("LEAGUE_STATUS_ACCEPTED")] LeagueStatusAccepted = 3,
  [pbr::OriginalName("LEAGUE_STATUS_REJECTED")] LeagueStatusRejected = 4,
  [pbr::OriginalName("LEAGUE_STATUS_CONCLUDED")] LeagueStatusConcluded = 5,
  [pbr::OriginalName("LEAGUE_STATUS_DELETED")] LeagueStatusDeleted = 6,
}

public enum ELeagueRegion {
  [pbr::OriginalName("LEAGUE_REGION_UNSET")] LeagueRegionUnset = 0,
  [pbr::OriginalName("LEAGUE_REGION_NA")] LeagueRegionNa = 1,
  [pbr::OriginalName("LEAGUE_REGION_SA")] LeagueRegionSa = 2,
  [pbr::OriginalName("LEAGUE_REGION_EUROPE")] LeagueRegionEurope = 3,
  [pbr::OriginalName("LEAGUE_REGION_CIS")] LeagueRegionCis = 4,
  [pbr::OriginalName("LEAGUE_REGION_CHINA")] LeagueRegionChina = 5,
  [pbr::OriginalName("LEAGUE_REGION_SEA")] LeagueRegionSea = 6,
}

public enum ELeagueTier {
  [pbr::OriginalName("LEAGUE_TIER_UNSET")] LeagueTierUnset = 0,
  [pbr::OriginalName("LEAGUE_TIER_AMATEUR")] LeagueTierAmateur = 1,
  [pbr::OriginalName("LEAGUE_TIER_PROFESSIONAL")] LeagueTierProfessional = 2,
  [pbr::OriginalName("LEAGUE_TIER_MINOR")] LeagueTierMinor = 3,
  [pbr::OriginalName("LEAGUE_TIER_MAJOR")] LeagueTierMajor = 4,
  [pbr::OriginalName("LEAGUE_TIER_INTERNATIONAL")] LeagueTierInternational = 5,
}

public enum ELeagueTierCategory {
  [pbr::OriginalName("LEAGUE_TIER_CATEGORY_Nil")] LeagueTierCategoryNil = 0,
  [pbr::OriginalName("LEAGUE_TIER_CATEGORY_AMATEUR")] LeagueTierCategoryAmateur = 1,
  [pbr::OriginalName("LEAGUE_TIER_CATEGORY_PROFESSIONAL")] LeagueTierCategoryProfessional = 2,
  [pbr::OriginalName("LEAGUE_TIER_CATEGORY_DPC")] LeagueTierCategoryDpc = 3,
}

public enum ELeagueFlags {
  [pbr::OriginalName("LEAGUE_FLAGS_NONE")] LeagueFlagsNone = 0,
  [pbr::OriginalName("LEAGUE_ACCEPTED_AGREEMENT")] LeagueAcceptedAgreement = 1,
  [pbr::OriginalName("LEAGUE_PAYMENT_EMAIL_SENT")] LeaguePaymentEmailSent = 2,
  [pbr::OriginalName("LEAGUE_COMPENDIUM_ALLOWED")] LeagueCompendiumAllowed = 4,
  [pbr::OriginalName("LEAGUE_COMPENDIUM_PUBLIC")] LeagueCompendiumPublic = 8,
}

public enum ELeagueBroadcastProvider {
  [pbr::OriginalName("LEAGUE_BROADCAST_UNKNOWN")] LeagueBroadcastUnknown = 0,
  [pbr::OriginalName("LEAGUE_BROADCAST_STEAM")] LeagueBroadcastSteam = 1,
  [pbr::OriginalName("LEAGUE_BROADCAST_TWITCH")] LeagueBroadcastTwitch = 2,
  [pbr::OriginalName("LEAGUE_BROADCAST_YOUTUBE")] LeagueBroadcastYoutube = 3,
  [pbr::OriginalName("LEAGUE_BROADCAST_OTHER")] LeagueBroadcastOther = 100,
}

public enum ELeaguePhase {
  [pbr::OriginalName("LEAGUE_PHASE_UNSET")] LeaguePhaseUnset = 0,
  [pbr::OriginalName("LEAGUE_PHASE_REGIONAL_QUALIFIER")] LeaguePhaseRegionalQualifier = 1,
  [pbr::OriginalName("LEAGUE_PHASE_GROUP_STAGE")] LeaguePhaseGroupStage = 2,
  [pbr::OriginalName("LEAGUE_PHASE_MAIN_EVENT")] LeaguePhaseMainEvent = 3,
}

public enum ELeagueFantasyPhase {
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_UNSET")] LeagueFantasyPhaseUnset = 0,
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_MAIN")] LeagueFantasyPhaseMain = 1,
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_QUALIFIER_NA")] LeagueFantasyPhaseQualifierNa = 2,
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_QUALIFIER_SA")] LeagueFantasyPhaseQualifierSa = 3,
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_QUALIFIER_EUROPE")] LeagueFantasyPhaseQualifierEurope = 4,
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_QUALIFIER_CIS")] LeagueFantasyPhaseQualifierCis = 5,
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_QUALIFIER_CHINA")] LeagueFantasyPhaseQualifierChina = 6,
  [pbr::OriginalName("LEAGUE_FANTASY_PHASE_QUALIFIER_SEA")] LeagueFantasyPhaseQualifierSea = 7,
}

public enum ELeagueAuditAction {
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_INVALID")] LeagueAuditActionInvalid = 0,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_CREATE")] LeagueAuditActionLeagueCreate = 1,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_EDIT")] LeagueAuditActionLeagueEdit = 2,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_DELETE")] LeagueAuditActionLeagueDelete = 3,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD")] LeagueAuditActionLeagueAdminAdd = 4,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE")] LeagueAuditActionLeagueAdminRevoke = 5,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE")] LeagueAuditActionLeagueAdminPromote = 6,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD")] LeagueAuditActionLeagueStreamAdd = 7,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE")] LeagueAuditActionLeagueStreamRemove = 8,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED")] LeagueAuditActionLeagueImageUpdated = 9,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED")] LeagueAuditActionLeagueMessageAdded = 10,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED")] LeagueAuditActionLeagueSubmitted = 11,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL")] LeagueAuditActionLeagueSetPrizePool = 12,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM")] LeagueAuditActionLeagueAddPrizePoolItem = 13,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM")] LeagueAuditActionLeagueRemovePrizePoolItem = 14,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START")] LeagueAuditActionLeagueMatchStart = 15,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END")] LeagueAuditActionLeagueMatchEnd = 16,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM")] LeagueAuditActionLeagueAddInvitedTeam = 17,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM")] LeagueAuditActionLeagueRemoveInvitedTeam = 18,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED")] LeagueAuditActionLeagueStatusChanged = 19,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT")] LeagueAuditActionLeagueStreamEdit = 20,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE")] LeagueAuditActionNodegroupCreate = 100,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY")] LeagueAuditActionNodegroupDestroy = 101,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM")] LeagueAuditActionNodegroupAddTeam = 102,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM")] LeagueAuditActionNodegroupRemoveTeam = 103,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING")] LeagueAuditActionNodegroupSetAdvancing = 104,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT")] LeagueAuditActionNodegroupEdit = 105,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE")] LeagueAuditActionNodegroupPopulate = 106,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED")] LeagueAuditActionNodegroupCompleted = 107,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_CREATE")] LeagueAuditActionNodeCreate = 200,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_DESTROY")] LeagueAuditActionNodeDestroy = 201,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE")] LeagueAuditActionNodeAutocreate = 202,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_TEAM")] LeagueAuditActionNodeSetTeam = 203,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID")] LeagueAuditActionNodeSetSeriesId = 204,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING")] LeagueAuditActionNodeSetAdvancing = 205,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_SET_TIME")] LeagueAuditActionNodeSetTime = 206,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED")] LeagueAuditActionNodeMatchCompleted = 207,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_COMPLETED")] LeagueAuditActionNodeCompleted = 208,
  [pbr::OriginalName("LEAGUE_AUDIT_ACTION_NODE_EDIT")] LeagueAuditActionNodeEdit = 209,
}

public enum DOTA_COMBATLOG_TYPES {
  /// <summary>
  ///DOTA_COMBATLOG_INVALID = -1;
  /// </summary>
  [pbr::OriginalName("DOTA_COMBATLOG_DAMAGE")] DotaCombatlogDamage = 0,
  [pbr::OriginalName("DOTA_COMBATLOG_HEAL")] DotaCombatlogHeal = 1,
  [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_ADD")] DotaCombatlogModifierAdd = 2,
  [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_REMOVE")] DotaCombatlogModifierRemove = 3,
  [pbr::OriginalName("DOTA_COMBATLOG_DEATH")] DotaCombatlogDeath = 4,
  [pbr::OriginalName("DOTA_COMBATLOG_ABILITY")] DotaCombatlogAbility = 5,
  [pbr::OriginalName("DOTA_COMBATLOG_ITEM")] DotaCombatlogItem = 6,
  [pbr::OriginalName("DOTA_COMBATLOG_LOCATION")] DotaCombatlogLocation = 7,
  [pbr::OriginalName("DOTA_COMBATLOG_GOLD")] DotaCombatlogGold = 8,
  [pbr::OriginalName("DOTA_COMBATLOG_GAME_STATE")] DotaCombatlogGameState = 9,
  [pbr::OriginalName("DOTA_COMBATLOG_XP")] DotaCombatlogXp = 10,
  [pbr::OriginalName("DOTA_COMBATLOG_PURCHASE")] DotaCombatlogPurchase = 11,
  [pbr::OriginalName("DOTA_COMBATLOG_BUYBACK")] DotaCombatlogBuyback = 12,
  [pbr::OriginalName("DOTA_COMBATLOG_ABILITY_TRIGGER")] DotaCombatlogAbilityTrigger = 13,
  [pbr::OriginalName("DOTA_COMBATLOG_PLAYERSTATS")] DotaCombatlogPlayerstats = 14,
  [pbr::OriginalName("DOTA_COMBATLOG_MULTIKILL")] DotaCombatlogMultikill = 15,
  [pbr::OriginalName("DOTA_COMBATLOG_KILLSTREAK")] DotaCombatlogKillstreak = 16,
  [pbr::OriginalName("DOTA_COMBATLOG_TEAM_BUILDING_KILL")] DotaCombatlogTeamBuildingKill = 17,
  [pbr::OriginalName("DOTA_COMBATLOG_FIRST_BLOOD")] DotaCombatlogFirstBlood = 18,
  [pbr::OriginalName("DOTA_COMBATLOG_MODIFIER_STACK_EVENT")] DotaCombatlogModifierStackEvent = 19,
  [pbr::OriginalName("DOTA_COMBATLOG_NEUTRAL_CAMP_STACK")] DotaCombatlogNeutralCampStack = 20,
  [pbr::OriginalName("DOTA_COMBATLOG_PICKUP_RUNE")] DotaCombatlogPickupRune = 21,
  [pbr::OriginalName("DOTA_COMBATLOG_REVEALED_INVISIBLE")] DotaCombatlogRevealedInvisible = 22,
  [pbr::OriginalName("DOTA_COMBATLOG_HERO_SAVED")] DotaCombatlogHeroSaved = 23,
  [pbr::OriginalName("DOTA_COMBATLOG_MANA_RESTORED")] DotaCombatlogManaRestored = 24,
  [pbr::OriginalName("DOTA_COMBATLOG_HERO_LEVELUP")] DotaCombatlogHeroLevelup = 25,
  [pbr::OriginalName("DOTA_COMBATLOG_BOTTLE_HEAL_ALLY")] DotaCombatlogBottleHealAlly = 26,
  [pbr::OriginalName("DOTA_COMBATLOG_ENDGAME_STATS")] DotaCombatlogEndgameStats = 27,
  [pbr::OriginalName("DOTA_COMBATLOG_INTERRUPT_CHANNEL")] DotaCombatlogInterruptChannel = 28,
  [pbr::OriginalName("DOTA_COMBATLOG_ALLIED_GOLD")] DotaCombatlogAlliedGold = 29,
  [pbr::OriginalName("DOTA_COMBATLOG_AEGIS_TAKEN")] DotaCombatlogAegisTaken = 30,
  [pbr::OriginalName("DOTA_COMBATLOG_MANA_DAMAGE")] DotaCombatlogManaDamage = 31,
  [pbr::OriginalName("DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED")] DotaCombatlogPhysicalDamagePrevented = 32,
  [pbr::OriginalName("DOTA_COMBATLOG_UNIT_SUMMONED")] DotaCombatlogUnitSummoned = 33,
  [pbr::OriginalName("DOTA_COMBATLOG_ATTACK_EVADE")] DotaCombatlogAttackEvade = 34,
  [pbr::OriginalName("DOTA_COMBATLOG_TREE_CUT")] DotaCombatlogTreeCut = 35,
  [pbr::OriginalName("DOTA_COMBATLOG_SUCCESSFUL_SCAN")] DotaCombatlogSuccessfulScan = 36,
  [pbr::OriginalName("DOTA_COMBATLOG_END_KILLSTREAK")] DotaCombatlogEndKillstreak = 37,
  [pbr::OriginalName("DOTA_COMBATLOG_BLOODSTONE_CHARGE")] DotaCombatlogBloodstoneCharge = 38,
  [pbr::OriginalName("DOTA_COMBATLOG_CRITICAL_DAMAGE")] DotaCombatlogCriticalDamage = 39,
  [pbr::OriginalName("DOTA_COMBATLOG_SPELL_ABSORB")] DotaCombatlogSpellAbsorb = 40,
  [pbr::OriginalName("DOTA_COMBATLOG_UNIT_TELEPORTED")] DotaCombatlogUnitTeleported = 41,
  [pbr::OriginalName("DOTA_COMBATLOG_KILL_EATER_EVENT")] DotaCombatlogKillEaterEvent = 42,
}

public enum EDPCFavoriteType {
  [pbr::OriginalName("FAVORITE_TYPE_ALL")] FavoriteTypeAll = 0,
  [pbr::OriginalName("FAVORITE_TYPE_PLAYER")] FavoriteTypePlayer = 1,
  [pbr::OriginalName("FAVORITE_TYPE_TEAM")] FavoriteTypeTeam = 2,
  [pbr::OriginalName("FAVORITE_TYPE_LEAGUE")] FavoriteTypeLeague = 3,
}

public enum EDPCPushNotification {
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_Nil")] DpcPushNotificationNil = 0,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_MATCH_STARTING")] DpcPushNotificationMatchStarting = 1,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM")] DpcPushNotificationPlayerLeftTeam = 10,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM")] DpcPushNotificationPlayerJoinedTeam = 11,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_LEAGUE_RESULT")] DpcPushNotificationLeagueResult = 20,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE")] DpcPushNotificationPredictionMatchesAvailable = 30,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_PREDICTION_RESULT")] DpcPushNotificationPredictionResult = 31,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED")] DpcPushNotificationFantasyPlayerCleared = 40,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY")] DpcPushNotificationFantasyDailySummary = 41,
  [pbr::OriginalName("DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS")] DpcPushNotificationFantasyFinalResults = 42,
}

#endregion

#region Messages
public sealed partial class CDOTAClientHardwareSpecs : pb::IMessage<CDOTAClientHardwareSpecs> {
  private static readonly pb::MessageParser<CDOTAClientHardwareSpecs> _parser = new pb::MessageParser<CDOTAClientHardwareSpecs>(() => new CDOTAClientHardwareSpecs());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientHardwareSpecs> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaSharedEnumsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientHardwareSpecs() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientHardwareSpecs(CDOTAClientHardwareSpecs other) : this() {
    logicalProcessors_ = other.logicalProcessors_;
    cpuCyclesPerSecond_ = other.cpuCyclesPerSecond_;
    totalPhysicalMemory_ = other.totalPhysicalMemory_;
    is64BitOs_ = other.is64BitOs_;
    uploadMeasurement_ = other.uploadMeasurement_;
    preferNotHost_ = other.preferNotHost_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientHardwareSpecs Clone() {
    return new CDOTAClientHardwareSpecs(this);
  }

  /// <summary>Field number for the "logical_processors" field.</summary>
  public const int LogicalProcessorsFieldNumber = 1;
  private uint logicalProcessors_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LogicalProcessors {
    get { return logicalProcessors_; }
    set {
      logicalProcessors_ = value;
    }
  }

  /// <summary>Field number for the "cpu_cycles_per_second" field.</summary>
  public const int CpuCyclesPerSecondFieldNumber = 2;
  private ulong cpuCyclesPerSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CpuCyclesPerSecond {
    get { return cpuCyclesPerSecond_; }
    set {
      cpuCyclesPerSecond_ = value;
    }
  }

  /// <summary>Field number for the "total_physical_memory" field.</summary>
  public const int TotalPhysicalMemoryFieldNumber = 3;
  private ulong totalPhysicalMemory_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong TotalPhysicalMemory {
    get { return totalPhysicalMemory_; }
    set {
      totalPhysicalMemory_ = value;
    }
  }

  /// <summary>Field number for the "is_64_bit_os" field.</summary>
  public const int Is64BitOsFieldNumber = 4;
  private bool is64BitOs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Is64BitOs {
    get { return is64BitOs_; }
    set {
      is64BitOs_ = value;
    }
  }

  /// <summary>Field number for the "upload_measurement" field.</summary>
  public const int UploadMeasurementFieldNumber = 5;
  private ulong uploadMeasurement_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong UploadMeasurement {
    get { return uploadMeasurement_; }
    set {
      uploadMeasurement_ = value;
    }
  }

  /// <summary>Field number for the "prefer_not_host" field.</summary>
  public const int PreferNotHostFieldNumber = 6;
  private bool preferNotHost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PreferNotHost {
    get { return preferNotHost_; }
    set {
      preferNotHost_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientHardwareSpecs);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientHardwareSpecs other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LogicalProcessors != other.LogicalProcessors) return false;
    if (CpuCyclesPerSecond != other.CpuCyclesPerSecond) return false;
    if (TotalPhysicalMemory != other.TotalPhysicalMemory) return false;
    if (Is64BitOs != other.Is64BitOs) return false;
    if (UploadMeasurement != other.UploadMeasurement) return false;
    if (PreferNotHost != other.PreferNotHost) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LogicalProcessors != 0) hash ^= LogicalProcessors.GetHashCode();
    if (CpuCyclesPerSecond != 0UL) hash ^= CpuCyclesPerSecond.GetHashCode();
    if (TotalPhysicalMemory != 0UL) hash ^= TotalPhysicalMemory.GetHashCode();
    if (Is64BitOs != false) hash ^= Is64BitOs.GetHashCode();
    if (UploadMeasurement != 0UL) hash ^= UploadMeasurement.GetHashCode();
    if (PreferNotHost != false) hash ^= PreferNotHost.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LogicalProcessors != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(LogicalProcessors);
    }
    if (CpuCyclesPerSecond != 0UL) {
      output.WriteRawTag(17);
      output.WriteFixed64(CpuCyclesPerSecond);
    }
    if (TotalPhysicalMemory != 0UL) {
      output.WriteRawTag(25);
      output.WriteFixed64(TotalPhysicalMemory);
    }
    if (Is64BitOs != false) {
      output.WriteRawTag(32);
      output.WriteBool(Is64BitOs);
    }
    if (UploadMeasurement != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(UploadMeasurement);
    }
    if (PreferNotHost != false) {
      output.WriteRawTag(48);
      output.WriteBool(PreferNotHost);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LogicalProcessors != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogicalProcessors);
    }
    if (CpuCyclesPerSecond != 0UL) {
      size += 1 + 8;
    }
    if (TotalPhysicalMemory != 0UL) {
      size += 1 + 8;
    }
    if (Is64BitOs != false) {
      size += 1 + 1;
    }
    if (UploadMeasurement != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UploadMeasurement);
    }
    if (PreferNotHost != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientHardwareSpecs other) {
    if (other == null) {
      return;
    }
    if (other.LogicalProcessors != 0) {
      LogicalProcessors = other.LogicalProcessors;
    }
    if (other.CpuCyclesPerSecond != 0UL) {
      CpuCyclesPerSecond = other.CpuCyclesPerSecond;
    }
    if (other.TotalPhysicalMemory != 0UL) {
      TotalPhysicalMemory = other.TotalPhysicalMemory;
    }
    if (other.Is64BitOs != false) {
      Is64BitOs = other.Is64BitOs;
    }
    if (other.UploadMeasurement != 0UL) {
      UploadMeasurement = other.UploadMeasurement;
    }
    if (other.PreferNotHost != false) {
      PreferNotHost = other.PreferNotHost;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LogicalProcessors = input.ReadUInt32();
          break;
        }
        case 17: {
          CpuCyclesPerSecond = input.ReadFixed64();
          break;
        }
        case 25: {
          TotalPhysicalMemory = input.ReadFixed64();
          break;
        }
        case 32: {
          Is64BitOs = input.ReadBool();
          break;
        }
        case 40: {
          UploadMeasurement = input.ReadUInt64();
          break;
        }
        case 48: {
          PreferNotHost = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CMsgDOTACombatLogEntry : pb::IMessage<CMsgDOTACombatLogEntry> {
  private static readonly pb::MessageParser<CMsgDOTACombatLogEntry> _parser = new pb::MessageParser<CMsgDOTACombatLogEntry>(() => new CMsgDOTACombatLogEntry());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgDOTACombatLogEntry> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaSharedEnumsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgDOTACombatLogEntry() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgDOTACombatLogEntry(CMsgDOTACombatLogEntry other) : this() {
    type_ = other.type_;
    targetName_ = other.targetName_;
    targetSourceName_ = other.targetSourceName_;
    attackerName_ = other.attackerName_;
    damageSourceName_ = other.damageSourceName_;
    inflictorName_ = other.inflictorName_;
    isAttackerIllusion_ = other.isAttackerIllusion_;
    isAttackerHero_ = other.isAttackerHero_;
    isTargetIllusion_ = other.isTargetIllusion_;
    isTargetHero_ = other.isTargetHero_;
    isVisibleRadiant_ = other.isVisibleRadiant_;
    isVisibleDire_ = other.isVisibleDire_;
    value_ = other.value_;
    health_ = other.health_;
    timestamp_ = other.timestamp_;
    stunDuration_ = other.stunDuration_;
    slowDuration_ = other.slowDuration_;
    isAbilityToggleOn_ = other.isAbilityToggleOn_;
    isAbilityToggleOff_ = other.isAbilityToggleOff_;
    abilityLevel_ = other.abilityLevel_;
    locationX_ = other.locationX_;
    locationY_ = other.locationY_;
    goldReason_ = other.goldReason_;
    timestampRaw_ = other.timestampRaw_;
    modifierDuration_ = other.modifierDuration_;
    xpReason_ = other.xpReason_;
    lastHits_ = other.lastHits_;
    attackerTeam_ = other.attackerTeam_;
    targetTeam_ = other.targetTeam_;
    obsWardsPlaced_ = other.obsWardsPlaced_;
    assistPlayer0_ = other.assistPlayer0_;
    assistPlayer1_ = other.assistPlayer1_;
    assistPlayer2_ = other.assistPlayer2_;
    assistPlayer3_ = other.assistPlayer3_;
    stackCount_ = other.stackCount_;
    hiddenModifier_ = other.hiddenModifier_;
    isTargetBuilding_ = other.isTargetBuilding_;
    neutralCampType_ = other.neutralCampType_;
    runeType_ = other.runeType_;
    assistPlayers_ = other.assistPlayers_;
    isHealSave_ = other.isHealSave_;
    isUltimateAbility_ = other.isUltimateAbility_;
    attackerHeroLevel_ = other.attackerHeroLevel_;
    targetHeroLevel_ = other.targetHeroLevel_;
    xpm_ = other.xpm_;
    gpm_ = other.gpm_;
    eventLocation_ = other.eventLocation_;
    targetIsSelf_ = other.targetIsSelf_;
    damageType_ = other.damageType_;
    invisibilityModifier_ = other.invisibilityModifier_;
    damageCategory_ = other.damageCategory_;
    networth_ = other.networth_;
    buildingType_ = other.buildingType_;
    modifierElapsedDuration_ = other.modifierElapsedDuration_;
    silenceModifier_ = other.silenceModifier_;
    healFromLifesteal_ = other.healFromLifesteal_;
    modifierPurged_ = other.modifierPurged_;
    spellEvaded_ = other.spellEvaded_;
    motionControllerModifier_ = other.motionControllerModifier_;
    longRangeKill_ = other.longRangeKill_;
    modifierPurgeAbility_ = other.modifierPurgeAbility_;
    modifierPurgeNpc_ = other.modifierPurgeNpc_;
    rootModifier_ = other.rootModifier_;
    totalUnitDeathCount_ = other.totalUnitDeathCount_;
    auraModifier_ = other.auraModifier_;
    armorDebuffModifier_ = other.armorDebuffModifier_;
    noPhysicalDamageModifier_ = other.noPhysicalDamageModifier_;
    modifierAbility_ = other.modifierAbility_;
    modifierHidden_ = other.modifierHidden_;
    inflictorIsStolenAbility_ = other.inflictorIsStolenAbility_;
    killEaterEvent_ = other.killEaterEvent_;
    unitStatusLabel_ = other.unitStatusLabel_;
    spellGeneratedAttack_ = other.spellGeneratedAttack_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgDOTACombatLogEntry Clone() {
    return new CMsgDOTACombatLogEntry(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::DOTA_COMBATLOG_TYPES type_ = 0;
  /// <summary>
  ///[default = DOTA_COMBATLOG_INVALID];
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DOTA_COMBATLOG_TYPES Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "target_name" field.</summary>
  public const int TargetNameFieldNumber = 2;
  private uint targetName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetName {
    get { return targetName_; }
    set {
      targetName_ = value;
    }
  }

  /// <summary>Field number for the "target_source_name" field.</summary>
  public const int TargetSourceNameFieldNumber = 3;
  private uint targetSourceName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetSourceName {
    get { return targetSourceName_; }
    set {
      targetSourceName_ = value;
    }
  }

  /// <summary>Field number for the "attacker_name" field.</summary>
  public const int AttackerNameFieldNumber = 4;
  private uint attackerName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttackerName {
    get { return attackerName_; }
    set {
      attackerName_ = value;
    }
  }

  /// <summary>Field number for the "damage_source_name" field.</summary>
  public const int DamageSourceNameFieldNumber = 5;
  private uint damageSourceName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DamageSourceName {
    get { return damageSourceName_; }
    set {
      damageSourceName_ = value;
    }
  }

  /// <summary>Field number for the "inflictor_name" field.</summary>
  public const int InflictorNameFieldNumber = 6;
  private uint inflictorName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InflictorName {
    get { return inflictorName_; }
    set {
      inflictorName_ = value;
    }
  }

  /// <summary>Field number for the "is_attacker_illusion" field.</summary>
  public const int IsAttackerIllusionFieldNumber = 7;
  private bool isAttackerIllusion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAttackerIllusion {
    get { return isAttackerIllusion_; }
    set {
      isAttackerIllusion_ = value;
    }
  }

  /// <summary>Field number for the "is_attacker_hero" field.</summary>
  public const int IsAttackerHeroFieldNumber = 8;
  private bool isAttackerHero_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAttackerHero {
    get { return isAttackerHero_; }
    set {
      isAttackerHero_ = value;
    }
  }

  /// <summary>Field number for the "is_target_illusion" field.</summary>
  public const int IsTargetIllusionFieldNumber = 9;
  private bool isTargetIllusion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTargetIllusion {
    get { return isTargetIllusion_; }
    set {
      isTargetIllusion_ = value;
    }
  }

  /// <summary>Field number for the "is_target_hero" field.</summary>
  public const int IsTargetHeroFieldNumber = 10;
  private bool isTargetHero_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTargetHero {
    get { return isTargetHero_; }
    set {
      isTargetHero_ = value;
    }
  }

  /// <summary>Field number for the "is_visible_radiant" field.</summary>
  public const int IsVisibleRadiantFieldNumber = 11;
  private bool isVisibleRadiant_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsVisibleRadiant {
    get { return isVisibleRadiant_; }
    set {
      isVisibleRadiant_ = value;
    }
  }

  /// <summary>Field number for the "is_visible_dire" field.</summary>
  public const int IsVisibleDireFieldNumber = 12;
  private bool isVisibleDire_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsVisibleDire {
    get { return isVisibleDire_; }
    set {
      isVisibleDire_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 13;
  private uint value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "health" field.</summary>
  public const int HealthFieldNumber = 14;
  private int health_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Health {
    get { return health_; }
    set {
      health_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 15;
  private float timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "stun_duration" field.</summary>
  public const int StunDurationFieldNumber = 16;
  private float stunDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float StunDuration {
    get { return stunDuration_; }
    set {
      stunDuration_ = value;
    }
  }

  /// <summary>Field number for the "slow_duration" field.</summary>
  public const int SlowDurationFieldNumber = 17;
  private float slowDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SlowDuration {
    get { return slowDuration_; }
    set {
      slowDuration_ = value;
    }
  }

  /// <summary>Field number for the "is_ability_toggle_on" field.</summary>
  public const int IsAbilityToggleOnFieldNumber = 18;
  private bool isAbilityToggleOn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbilityToggleOn {
    get { return isAbilityToggleOn_; }
    set {
      isAbilityToggleOn_ = value;
    }
  }

  /// <summary>Field number for the "is_ability_toggle_off" field.</summary>
  public const int IsAbilityToggleOffFieldNumber = 19;
  private bool isAbilityToggleOff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAbilityToggleOff {
    get { return isAbilityToggleOff_; }
    set {
      isAbilityToggleOff_ = value;
    }
  }

  /// <summary>Field number for the "ability_level" field.</summary>
  public const int AbilityLevelFieldNumber = 20;
  private uint abilityLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AbilityLevel {
    get { return abilityLevel_; }
    set {
      abilityLevel_ = value;
    }
  }

  /// <summary>Field number for the "location_x" field.</summary>
  public const int LocationXFieldNumber = 21;
  private float locationX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LocationX {
    get { return locationX_; }
    set {
      locationX_ = value;
    }
  }

  /// <summary>Field number for the "location_y" field.</summary>
  public const int LocationYFieldNumber = 22;
  private float locationY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LocationY {
    get { return locationY_; }
    set {
      locationY_ = value;
    }
  }

  /// <summary>Field number for the "gold_reason" field.</summary>
  public const int GoldReasonFieldNumber = 23;
  private uint goldReason_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GoldReason {
    get { return goldReason_; }
    set {
      goldReason_ = value;
    }
  }

  /// <summary>Field number for the "timestamp_raw" field.</summary>
  public const int TimestampRawFieldNumber = 24;
  private float timestampRaw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TimestampRaw {
    get { return timestampRaw_; }
    set {
      timestampRaw_ = value;
    }
  }

  /// <summary>Field number for the "modifier_duration" field.</summary>
  public const int ModifierDurationFieldNumber = 25;
  private float modifierDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ModifierDuration {
    get { return modifierDuration_; }
    set {
      modifierDuration_ = value;
    }
  }

  /// <summary>Field number for the "xp_reason" field.</summary>
  public const int XpReasonFieldNumber = 26;
  private uint xpReason_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint XpReason {
    get { return xpReason_; }
    set {
      xpReason_ = value;
    }
  }

  /// <summary>Field number for the "last_hits" field.</summary>
  public const int LastHitsFieldNumber = 27;
  private uint lastHits_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LastHits {
    get { return lastHits_; }
    set {
      lastHits_ = value;
    }
  }

  /// <summary>Field number for the "attacker_team" field.</summary>
  public const int AttackerTeamFieldNumber = 28;
  private uint attackerTeam_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttackerTeam {
    get { return attackerTeam_; }
    set {
      attackerTeam_ = value;
    }
  }

  /// <summary>Field number for the "target_team" field.</summary>
  public const int TargetTeamFieldNumber = 29;
  private uint targetTeam_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetTeam {
    get { return targetTeam_; }
    set {
      targetTeam_ = value;
    }
  }

  /// <summary>Field number for the "obs_wards_placed" field.</summary>
  public const int ObsWardsPlacedFieldNumber = 30;
  private uint obsWardsPlaced_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ObsWardsPlaced {
    get { return obsWardsPlaced_; }
    set {
      obsWardsPlaced_ = value;
    }
  }

  /// <summary>Field number for the "assist_player0" field.</summary>
  public const int AssistPlayer0FieldNumber = 31;
  private uint assistPlayer0_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AssistPlayer0 {
    get { return assistPlayer0_; }
    set {
      assistPlayer0_ = value;
    }
  }

  /// <summary>Field number for the "assist_player1" field.</summary>
  public const int AssistPlayer1FieldNumber = 32;
  private uint assistPlayer1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AssistPlayer1 {
    get { return assistPlayer1_; }
    set {
      assistPlayer1_ = value;
    }
  }

  /// <summary>Field number for the "assist_player2" field.</summary>
  public const int AssistPlayer2FieldNumber = 33;
  private uint assistPlayer2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AssistPlayer2 {
    get { return assistPlayer2_; }
    set {
      assistPlayer2_ = value;
    }
  }

  /// <summary>Field number for the "assist_player3" field.</summary>
  public const int AssistPlayer3FieldNumber = 34;
  private uint assistPlayer3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AssistPlayer3 {
    get { return assistPlayer3_; }
    set {
      assistPlayer3_ = value;
    }
  }

  /// <summary>Field number for the "stack_count" field.</summary>
  public const int StackCountFieldNumber = 35;
  private uint stackCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StackCount {
    get { return stackCount_; }
    set {
      stackCount_ = value;
    }
  }

  /// <summary>Field number for the "hidden_modifier" field.</summary>
  public const int HiddenModifierFieldNumber = 36;
  private bool hiddenModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HiddenModifier {
    get { return hiddenModifier_; }
    set {
      hiddenModifier_ = value;
    }
  }

  /// <summary>Field number for the "is_target_building" field.</summary>
  public const int IsTargetBuildingFieldNumber = 37;
  private bool isTargetBuilding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTargetBuilding {
    get { return isTargetBuilding_; }
    set {
      isTargetBuilding_ = value;
    }
  }

  /// <summary>Field number for the "neutral_camp_type" field.</summary>
  public const int NeutralCampTypeFieldNumber = 38;
  private uint neutralCampType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NeutralCampType {
    get { return neutralCampType_; }
    set {
      neutralCampType_ = value;
    }
  }

  /// <summary>Field number for the "rune_type" field.</summary>
  public const int RuneTypeFieldNumber = 39;
  private uint runeType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RuneType {
    get { return runeType_; }
    set {
      runeType_ = value;
    }
  }

  /// <summary>Field number for the "assist_players" field.</summary>
  public const int AssistPlayersFieldNumber = 40;
  private uint assistPlayers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AssistPlayers {
    get { return assistPlayers_; }
    set {
      assistPlayers_ = value;
    }
  }

  /// <summary>Field number for the "is_heal_save" field.</summary>
  public const int IsHealSaveFieldNumber = 41;
  private bool isHealSave_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsHealSave {
    get { return isHealSave_; }
    set {
      isHealSave_ = value;
    }
  }

  /// <summary>Field number for the "is_ultimate_ability" field.</summary>
  public const int IsUltimateAbilityFieldNumber = 42;
  private bool isUltimateAbility_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsUltimateAbility {
    get { return isUltimateAbility_; }
    set {
      isUltimateAbility_ = value;
    }
  }

  /// <summary>Field number for the "attacker_hero_level" field.</summary>
  public const int AttackerHeroLevelFieldNumber = 43;
  private uint attackerHeroLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AttackerHeroLevel {
    get { return attackerHeroLevel_; }
    set {
      attackerHeroLevel_ = value;
    }
  }

  /// <summary>Field number for the "target_hero_level" field.</summary>
  public const int TargetHeroLevelFieldNumber = 44;
  private uint targetHeroLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetHeroLevel {
    get { return targetHeroLevel_; }
    set {
      targetHeroLevel_ = value;
    }
  }

  /// <summary>Field number for the "xpm" field.</summary>
  public const int XpmFieldNumber = 45;
  private uint xpm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Xpm {
    get { return xpm_; }
    set {
      xpm_ = value;
    }
  }

  /// <summary>Field number for the "gpm" field.</summary>
  public const int GpmFieldNumber = 46;
  private uint gpm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Gpm {
    get { return gpm_; }
    set {
      gpm_ = value;
    }
  }

  /// <summary>Field number for the "event_location" field.</summary>
  public const int EventLocationFieldNumber = 47;
  private uint eventLocation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventLocation {
    get { return eventLocation_; }
    set {
      eventLocation_ = value;
    }
  }

  /// <summary>Field number for the "target_is_self" field.</summary>
  public const int TargetIsSelfFieldNumber = 48;
  private bool targetIsSelf_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TargetIsSelf {
    get { return targetIsSelf_; }
    set {
      targetIsSelf_ = value;
    }
  }

  /// <summary>Field number for the "damage_type" field.</summary>
  public const int DamageTypeFieldNumber = 49;
  private uint damageType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DamageType {
    get { return damageType_; }
    set {
      damageType_ = value;
    }
  }

  /// <summary>Field number for the "invisibility_modifier" field.</summary>
  public const int InvisibilityModifierFieldNumber = 50;
  private bool invisibilityModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool InvisibilityModifier {
    get { return invisibilityModifier_; }
    set {
      invisibilityModifier_ = value;
    }
  }

  /// <summary>Field number for the "damage_category" field.</summary>
  public const int DamageCategoryFieldNumber = 51;
  private uint damageCategory_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DamageCategory {
    get { return damageCategory_; }
    set {
      damageCategory_ = value;
    }
  }

  /// <summary>Field number for the "networth" field.</summary>
  public const int NetworthFieldNumber = 52;
  private uint networth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Networth {
    get { return networth_; }
    set {
      networth_ = value;
    }
  }

  /// <summary>Field number for the "building_type" field.</summary>
  public const int BuildingTypeFieldNumber = 53;
  private uint buildingType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BuildingType {
    get { return buildingType_; }
    set {
      buildingType_ = value;
    }
  }

  /// <summary>Field number for the "modifier_elapsed_duration" field.</summary>
  public const int ModifierElapsedDurationFieldNumber = 54;
  private float modifierElapsedDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ModifierElapsedDuration {
    get { return modifierElapsedDuration_; }
    set {
      modifierElapsedDuration_ = value;
    }
  }

  /// <summary>Field number for the "silence_modifier" field.</summary>
  public const int SilenceModifierFieldNumber = 55;
  private bool silenceModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SilenceModifier {
    get { return silenceModifier_; }
    set {
      silenceModifier_ = value;
    }
  }

  /// <summary>Field number for the "heal_from_lifesteal" field.</summary>
  public const int HealFromLifestealFieldNumber = 56;
  private bool healFromLifesteal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HealFromLifesteal {
    get { return healFromLifesteal_; }
    set {
      healFromLifesteal_ = value;
    }
  }

  /// <summary>Field number for the "modifier_purged" field.</summary>
  public const int ModifierPurgedFieldNumber = 57;
  private bool modifierPurged_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ModifierPurged {
    get { return modifierPurged_; }
    set {
      modifierPurged_ = value;
    }
  }

  /// <summary>Field number for the "spell_evaded" field.</summary>
  public const int SpellEvadedFieldNumber = 58;
  private bool spellEvaded_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SpellEvaded {
    get { return spellEvaded_; }
    set {
      spellEvaded_ = value;
    }
  }

  /// <summary>Field number for the "motion_controller_modifier" field.</summary>
  public const int MotionControllerModifierFieldNumber = 59;
  private bool motionControllerModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool MotionControllerModifier {
    get { return motionControllerModifier_; }
    set {
      motionControllerModifier_ = value;
    }
  }

  /// <summary>Field number for the "long_range_kill" field.</summary>
  public const int LongRangeKillFieldNumber = 60;
  private bool longRangeKill_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LongRangeKill {
    get { return longRangeKill_; }
    set {
      longRangeKill_ = value;
    }
  }

  /// <summary>Field number for the "modifier_purge_ability" field.</summary>
  public const int ModifierPurgeAbilityFieldNumber = 61;
  private uint modifierPurgeAbility_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ModifierPurgeAbility {
    get { return modifierPurgeAbility_; }
    set {
      modifierPurgeAbility_ = value;
    }
  }

  /// <summary>Field number for the "modifier_purge_npc" field.</summary>
  public const int ModifierPurgeNpcFieldNumber = 62;
  private uint modifierPurgeNpc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ModifierPurgeNpc {
    get { return modifierPurgeNpc_; }
    set {
      modifierPurgeNpc_ = value;
    }
  }

  /// <summary>Field number for the "root_modifier" field.</summary>
  public const int RootModifierFieldNumber = 63;
  private bool rootModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool RootModifier {
    get { return rootModifier_; }
    set {
      rootModifier_ = value;
    }
  }

  /// <summary>Field number for the "total_unit_death_count" field.</summary>
  public const int TotalUnitDeathCountFieldNumber = 64;
  private uint totalUnitDeathCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalUnitDeathCount {
    get { return totalUnitDeathCount_; }
    set {
      totalUnitDeathCount_ = value;
    }
  }

  /// <summary>Field number for the "aura_modifier" field.</summary>
  public const int AuraModifierFieldNumber = 65;
  private bool auraModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AuraModifier {
    get { return auraModifier_; }
    set {
      auraModifier_ = value;
    }
  }

  /// <summary>Field number for the "armor_debuff_modifier" field.</summary>
  public const int ArmorDebuffModifierFieldNumber = 66;
  private bool armorDebuffModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ArmorDebuffModifier {
    get { return armorDebuffModifier_; }
    set {
      armorDebuffModifier_ = value;
    }
  }

  /// <summary>Field number for the "no_physical_damage_modifier" field.</summary>
  public const int NoPhysicalDamageModifierFieldNumber = 67;
  private bool noPhysicalDamageModifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool NoPhysicalDamageModifier {
    get { return noPhysicalDamageModifier_; }
    set {
      noPhysicalDamageModifier_ = value;
    }
  }

  /// <summary>Field number for the "modifier_ability" field.</summary>
  public const int ModifierAbilityFieldNumber = 68;
  private uint modifierAbility_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ModifierAbility {
    get { return modifierAbility_; }
    set {
      modifierAbility_ = value;
    }
  }

  /// <summary>Field number for the "modifier_hidden" field.</summary>
  public const int ModifierHiddenFieldNumber = 69;
  private bool modifierHidden_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ModifierHidden {
    get { return modifierHidden_; }
    set {
      modifierHidden_ = value;
    }
  }

  /// <summary>Field number for the "inflictor_is_stolen_ability" field.</summary>
  public const int InflictorIsStolenAbilityFieldNumber = 70;
  private bool inflictorIsStolenAbility_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool InflictorIsStolenAbility {
    get { return inflictorIsStolenAbility_; }
    set {
      inflictorIsStolenAbility_ = value;
    }
  }

  /// <summary>Field number for the "kill_eater_event" field.</summary>
  public const int KillEaterEventFieldNumber = 71;
  private uint killEaterEvent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KillEaterEvent {
    get { return killEaterEvent_; }
    set {
      killEaterEvent_ = value;
    }
  }

  /// <summary>Field number for the "unit_status_label" field.</summary>
  public const int UnitStatusLabelFieldNumber = 72;
  private uint unitStatusLabel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnitStatusLabel {
    get { return unitStatusLabel_; }
    set {
      unitStatusLabel_ = value;
    }
  }

  /// <summary>Field number for the "spell_generated_attack" field.</summary>
  public const int SpellGeneratedAttackFieldNumber = 73;
  private bool spellGeneratedAttack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SpellGeneratedAttack {
    get { return spellGeneratedAttack_; }
    set {
      spellGeneratedAttack_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgDOTACombatLogEntry);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgDOTACombatLogEntry other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (TargetName != other.TargetName) return false;
    if (TargetSourceName != other.TargetSourceName) return false;
    if (AttackerName != other.AttackerName) return false;
    if (DamageSourceName != other.DamageSourceName) return false;
    if (InflictorName != other.InflictorName) return false;
    if (IsAttackerIllusion != other.IsAttackerIllusion) return false;
    if (IsAttackerHero != other.IsAttackerHero) return false;
    if (IsTargetIllusion != other.IsTargetIllusion) return false;
    if (IsTargetHero != other.IsTargetHero) return false;
    if (IsVisibleRadiant != other.IsVisibleRadiant) return false;
    if (IsVisibleDire != other.IsVisibleDire) return false;
    if (Value != other.Value) return false;
    if (Health != other.Health) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StunDuration, other.StunDuration)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlowDuration, other.SlowDuration)) return false;
    if (IsAbilityToggleOn != other.IsAbilityToggleOn) return false;
    if (IsAbilityToggleOff != other.IsAbilityToggleOff) return false;
    if (AbilityLevel != other.AbilityLevel) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocationX, other.LocationX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocationY, other.LocationY)) return false;
    if (GoldReason != other.GoldReason) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimestampRaw, other.TimestampRaw)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ModifierDuration, other.ModifierDuration)) return false;
    if (XpReason != other.XpReason) return false;
    if (LastHits != other.LastHits) return false;
    if (AttackerTeam != other.AttackerTeam) return false;
    if (TargetTeam != other.TargetTeam) return false;
    if (ObsWardsPlaced != other.ObsWardsPlaced) return false;
    if (AssistPlayer0 != other.AssistPlayer0) return false;
    if (AssistPlayer1 != other.AssistPlayer1) return false;
    if (AssistPlayer2 != other.AssistPlayer2) return false;
    if (AssistPlayer3 != other.AssistPlayer3) return false;
    if (StackCount != other.StackCount) return false;
    if (HiddenModifier != other.HiddenModifier) return false;
    if (IsTargetBuilding != other.IsTargetBuilding) return false;
    if (NeutralCampType != other.NeutralCampType) return false;
    if (RuneType != other.RuneType) return false;
    if (AssistPlayers != other.AssistPlayers) return false;
    if (IsHealSave != other.IsHealSave) return false;
    if (IsUltimateAbility != other.IsUltimateAbility) return false;
    if (AttackerHeroLevel != other.AttackerHeroLevel) return false;
    if (TargetHeroLevel != other.TargetHeroLevel) return false;
    if (Xpm != other.Xpm) return false;
    if (Gpm != other.Gpm) return false;
    if (EventLocation != other.EventLocation) return false;
    if (TargetIsSelf != other.TargetIsSelf) return false;
    if (DamageType != other.DamageType) return false;
    if (InvisibilityModifier != other.InvisibilityModifier) return false;
    if (DamageCategory != other.DamageCategory) return false;
    if (Networth != other.Networth) return false;
    if (BuildingType != other.BuildingType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ModifierElapsedDuration, other.ModifierElapsedDuration)) return false;
    if (SilenceModifier != other.SilenceModifier) return false;
    if (HealFromLifesteal != other.HealFromLifesteal) return false;
    if (ModifierPurged != other.ModifierPurged) return false;
    if (SpellEvaded != other.SpellEvaded) return false;
    if (MotionControllerModifier != other.MotionControllerModifier) return false;
    if (LongRangeKill != other.LongRangeKill) return false;
    if (ModifierPurgeAbility != other.ModifierPurgeAbility) return false;
    if (ModifierPurgeNpc != other.ModifierPurgeNpc) return false;
    if (RootModifier != other.RootModifier) return false;
    if (TotalUnitDeathCount != other.TotalUnitDeathCount) return false;
    if (AuraModifier != other.AuraModifier) return false;
    if (ArmorDebuffModifier != other.ArmorDebuffModifier) return false;
    if (NoPhysicalDamageModifier != other.NoPhysicalDamageModifier) return false;
    if (ModifierAbility != other.ModifierAbility) return false;
    if (ModifierHidden != other.ModifierHidden) return false;
    if (InflictorIsStolenAbility != other.InflictorIsStolenAbility) return false;
    if (KillEaterEvent != other.KillEaterEvent) return false;
    if (UnitStatusLabel != other.UnitStatusLabel) return false;
    if (SpellGeneratedAttack != other.SpellGeneratedAttack) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (TargetName != 0) hash ^= TargetName.GetHashCode();
    if (TargetSourceName != 0) hash ^= TargetSourceName.GetHashCode();
    if (AttackerName != 0) hash ^= AttackerName.GetHashCode();
    if (DamageSourceName != 0) hash ^= DamageSourceName.GetHashCode();
    if (InflictorName != 0) hash ^= InflictorName.GetHashCode();
    if (IsAttackerIllusion != false) hash ^= IsAttackerIllusion.GetHashCode();
    if (IsAttackerHero != false) hash ^= IsAttackerHero.GetHashCode();
    if (IsTargetIllusion != false) hash ^= IsTargetIllusion.GetHashCode();
    if (IsTargetHero != false) hash ^= IsTargetHero.GetHashCode();
    if (IsVisibleRadiant != false) hash ^= IsVisibleRadiant.GetHashCode();
    if (IsVisibleDire != false) hash ^= IsVisibleDire.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    if (Health != 0) hash ^= Health.GetHashCode();
    if (Timestamp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
    if (StunDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StunDuration);
    if (SlowDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlowDuration);
    if (IsAbilityToggleOn != false) hash ^= IsAbilityToggleOn.GetHashCode();
    if (IsAbilityToggleOff != false) hash ^= IsAbilityToggleOff.GetHashCode();
    if (AbilityLevel != 0) hash ^= AbilityLevel.GetHashCode();
    if (LocationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocationX);
    if (LocationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocationY);
    if (GoldReason != 0) hash ^= GoldReason.GetHashCode();
    if (TimestampRaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimestampRaw);
    if (ModifierDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ModifierDuration);
    if (XpReason != 0) hash ^= XpReason.GetHashCode();
    if (LastHits != 0) hash ^= LastHits.GetHashCode();
    if (AttackerTeam != 0) hash ^= AttackerTeam.GetHashCode();
    if (TargetTeam != 0) hash ^= TargetTeam.GetHashCode();
    if (ObsWardsPlaced != 0) hash ^= ObsWardsPlaced.GetHashCode();
    if (AssistPlayer0 != 0) hash ^= AssistPlayer0.GetHashCode();
    if (AssistPlayer1 != 0) hash ^= AssistPlayer1.GetHashCode();
    if (AssistPlayer2 != 0) hash ^= AssistPlayer2.GetHashCode();
    if (AssistPlayer3 != 0) hash ^= AssistPlayer3.GetHashCode();
    if (StackCount != 0) hash ^= StackCount.GetHashCode();
    if (HiddenModifier != false) hash ^= HiddenModifier.GetHashCode();
    if (IsTargetBuilding != false) hash ^= IsTargetBuilding.GetHashCode();
    if (NeutralCampType != 0) hash ^= NeutralCampType.GetHashCode();
    if (RuneType != 0) hash ^= RuneType.GetHashCode();
    if (AssistPlayers != 0) hash ^= AssistPlayers.GetHashCode();
    if (IsHealSave != false) hash ^= IsHealSave.GetHashCode();
    if (IsUltimateAbility != false) hash ^= IsUltimateAbility.GetHashCode();
    if (AttackerHeroLevel != 0) hash ^= AttackerHeroLevel.GetHashCode();
    if (TargetHeroLevel != 0) hash ^= TargetHeroLevel.GetHashCode();
    if (Xpm != 0) hash ^= Xpm.GetHashCode();
    if (Gpm != 0) hash ^= Gpm.GetHashCode();
    if (EventLocation != 0) hash ^= EventLocation.GetHashCode();
    if (TargetIsSelf != false) hash ^= TargetIsSelf.GetHashCode();
    if (DamageType != 0) hash ^= DamageType.GetHashCode();
    if (InvisibilityModifier != false) hash ^= InvisibilityModifier.GetHashCode();
    if (DamageCategory != 0) hash ^= DamageCategory.GetHashCode();
    if (Networth != 0) hash ^= Networth.GetHashCode();
    if (BuildingType != 0) hash ^= BuildingType.GetHashCode();
    if (ModifierElapsedDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ModifierElapsedDuration);
    if (SilenceModifier != false) hash ^= SilenceModifier.GetHashCode();
    if (HealFromLifesteal != false) hash ^= HealFromLifesteal.GetHashCode();
    if (ModifierPurged != false) hash ^= ModifierPurged.GetHashCode();
    if (SpellEvaded != false) hash ^= SpellEvaded.GetHashCode();
    if (MotionControllerModifier != false) hash ^= MotionControllerModifier.GetHashCode();
    if (LongRangeKill != false) hash ^= LongRangeKill.GetHashCode();
    if (ModifierPurgeAbility != 0) hash ^= ModifierPurgeAbility.GetHashCode();
    if (ModifierPurgeNpc != 0) hash ^= ModifierPurgeNpc.GetHashCode();
    if (RootModifier != false) hash ^= RootModifier.GetHashCode();
    if (TotalUnitDeathCount != 0) hash ^= TotalUnitDeathCount.GetHashCode();
    if (AuraModifier != false) hash ^= AuraModifier.GetHashCode();
    if (ArmorDebuffModifier != false) hash ^= ArmorDebuffModifier.GetHashCode();
    if (NoPhysicalDamageModifier != false) hash ^= NoPhysicalDamageModifier.GetHashCode();
    if (ModifierAbility != 0) hash ^= ModifierAbility.GetHashCode();
    if (ModifierHidden != false) hash ^= ModifierHidden.GetHashCode();
    if (InflictorIsStolenAbility != false) hash ^= InflictorIsStolenAbility.GetHashCode();
    if (KillEaterEvent != 0) hash ^= KillEaterEvent.GetHashCode();
    if (UnitStatusLabel != 0) hash ^= UnitStatusLabel.GetHashCode();
    if (SpellGeneratedAttack != false) hash ^= SpellGeneratedAttack.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (TargetName != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetName);
    }
    if (TargetSourceName != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetSourceName);
    }
    if (AttackerName != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(AttackerName);
    }
    if (DamageSourceName != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(DamageSourceName);
    }
    if (InflictorName != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(InflictorName);
    }
    if (IsAttackerIllusion != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsAttackerIllusion);
    }
    if (IsAttackerHero != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsAttackerHero);
    }
    if (IsTargetIllusion != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsTargetIllusion);
    }
    if (IsTargetHero != false) {
      output.WriteRawTag(80);
      output.WriteBool(IsTargetHero);
    }
    if (IsVisibleRadiant != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsVisibleRadiant);
    }
    if (IsVisibleDire != false) {
      output.WriteRawTag(96);
      output.WriteBool(IsVisibleDire);
    }
    if (Value != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(Value);
    }
    if (Health != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(Health);
    }
    if (Timestamp != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(Timestamp);
    }
    if (StunDuration != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(StunDuration);
    }
    if (SlowDuration != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(SlowDuration);
    }
    if (IsAbilityToggleOn != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsAbilityToggleOn);
    }
    if (IsAbilityToggleOff != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(IsAbilityToggleOff);
    }
    if (AbilityLevel != 0) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(AbilityLevel);
    }
    if (LocationX != 0F) {
      output.WriteRawTag(173, 1);
      output.WriteFloat(LocationX);
    }
    if (LocationY != 0F) {
      output.WriteRawTag(181, 1);
      output.WriteFloat(LocationY);
    }
    if (GoldReason != 0) {
      output.WriteRawTag(184, 1);
      output.WriteUInt32(GoldReason);
    }
    if (TimestampRaw != 0F) {
      output.WriteRawTag(197, 1);
      output.WriteFloat(TimestampRaw);
    }
    if (ModifierDuration != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(ModifierDuration);
    }
    if (XpReason != 0) {
      output.WriteRawTag(208, 1);
      output.WriteUInt32(XpReason);
    }
    if (LastHits != 0) {
      output.WriteRawTag(216, 1);
      output.WriteUInt32(LastHits);
    }
    if (AttackerTeam != 0) {
      output.WriteRawTag(224, 1);
      output.WriteUInt32(AttackerTeam);
    }
    if (TargetTeam != 0) {
      output.WriteRawTag(232, 1);
      output.WriteUInt32(TargetTeam);
    }
    if (ObsWardsPlaced != 0) {
      output.WriteRawTag(240, 1);
      output.WriteUInt32(ObsWardsPlaced);
    }
    if (AssistPlayer0 != 0) {
      output.WriteRawTag(248, 1);
      output.WriteUInt32(AssistPlayer0);
    }
    if (AssistPlayer1 != 0) {
      output.WriteRawTag(128, 2);
      output.WriteUInt32(AssistPlayer1);
    }
    if (AssistPlayer2 != 0) {
      output.WriteRawTag(136, 2);
      output.WriteUInt32(AssistPlayer2);
    }
    if (AssistPlayer3 != 0) {
      output.WriteRawTag(144, 2);
      output.WriteUInt32(AssistPlayer3);
    }
    if (StackCount != 0) {
      output.WriteRawTag(152, 2);
      output.WriteUInt32(StackCount);
    }
    if (HiddenModifier != false) {
      output.WriteRawTag(160, 2);
      output.WriteBool(HiddenModifier);
    }
    if (IsTargetBuilding != false) {
      output.WriteRawTag(168, 2);
      output.WriteBool(IsTargetBuilding);
    }
    if (NeutralCampType != 0) {
      output.WriteRawTag(176, 2);
      output.WriteUInt32(NeutralCampType);
    }
    if (RuneType != 0) {
      output.WriteRawTag(184, 2);
      output.WriteUInt32(RuneType);
    }
    if (AssistPlayers != 0) {
      output.WriteRawTag(192, 2);
      output.WriteUInt32(AssistPlayers);
    }
    if (IsHealSave != false) {
      output.WriteRawTag(200, 2);
      output.WriteBool(IsHealSave);
    }
    if (IsUltimateAbility != false) {
      output.WriteRawTag(208, 2);
      output.WriteBool(IsUltimateAbility);
    }
    if (AttackerHeroLevel != 0) {
      output.WriteRawTag(216, 2);
      output.WriteUInt32(AttackerHeroLevel);
    }
    if (TargetHeroLevel != 0) {
      output.WriteRawTag(224, 2);
      output.WriteUInt32(TargetHeroLevel);
    }
    if (Xpm != 0) {
      output.WriteRawTag(232, 2);
      output.WriteUInt32(Xpm);
    }
    if (Gpm != 0) {
      output.WriteRawTag(240, 2);
      output.WriteUInt32(Gpm);
    }
    if (EventLocation != 0) {
      output.WriteRawTag(248, 2);
      output.WriteUInt32(EventLocation);
    }
    if (TargetIsSelf != false) {
      output.WriteRawTag(128, 3);
      output.WriteBool(TargetIsSelf);
    }
    if (DamageType != 0) {
      output.WriteRawTag(136, 3);
      output.WriteUInt32(DamageType);
    }
    if (InvisibilityModifier != false) {
      output.WriteRawTag(144, 3);
      output.WriteBool(InvisibilityModifier);
    }
    if (DamageCategory != 0) {
      output.WriteRawTag(152, 3);
      output.WriteUInt32(DamageCategory);
    }
    if (Networth != 0) {
      output.WriteRawTag(160, 3);
      output.WriteUInt32(Networth);
    }
    if (BuildingType != 0) {
      output.WriteRawTag(168, 3);
      output.WriteUInt32(BuildingType);
    }
    if (ModifierElapsedDuration != 0F) {
      output.WriteRawTag(181, 3);
      output.WriteFloat(ModifierElapsedDuration);
    }
    if (SilenceModifier != false) {
      output.WriteRawTag(184, 3);
      output.WriteBool(SilenceModifier);
    }
    if (HealFromLifesteal != false) {
      output.WriteRawTag(192, 3);
      output.WriteBool(HealFromLifesteal);
    }
    if (ModifierPurged != false) {
      output.WriteRawTag(200, 3);
      output.WriteBool(ModifierPurged);
    }
    if (SpellEvaded != false) {
      output.WriteRawTag(208, 3);
      output.WriteBool(SpellEvaded);
    }
    if (MotionControllerModifier != false) {
      output.WriteRawTag(216, 3);
      output.WriteBool(MotionControllerModifier);
    }
    if (LongRangeKill != false) {
      output.WriteRawTag(224, 3);
      output.WriteBool(LongRangeKill);
    }
    if (ModifierPurgeAbility != 0) {
      output.WriteRawTag(232, 3);
      output.WriteUInt32(ModifierPurgeAbility);
    }
    if (ModifierPurgeNpc != 0) {
      output.WriteRawTag(240, 3);
      output.WriteUInt32(ModifierPurgeNpc);
    }
    if (RootModifier != false) {
      output.WriteRawTag(248, 3);
      output.WriteBool(RootModifier);
    }
    if (TotalUnitDeathCount != 0) {
      output.WriteRawTag(128, 4);
      output.WriteUInt32(TotalUnitDeathCount);
    }
    if (AuraModifier != false) {
      output.WriteRawTag(136, 4);
      output.WriteBool(AuraModifier);
    }
    if (ArmorDebuffModifier != false) {
      output.WriteRawTag(144, 4);
      output.WriteBool(ArmorDebuffModifier);
    }
    if (NoPhysicalDamageModifier != false) {
      output.WriteRawTag(152, 4);
      output.WriteBool(NoPhysicalDamageModifier);
    }
    if (ModifierAbility != 0) {
      output.WriteRawTag(160, 4);
      output.WriteUInt32(ModifierAbility);
    }
    if (ModifierHidden != false) {
      output.WriteRawTag(168, 4);
      output.WriteBool(ModifierHidden);
    }
    if (InflictorIsStolenAbility != false) {
      output.WriteRawTag(176, 4);
      output.WriteBool(InflictorIsStolenAbility);
    }
    if (KillEaterEvent != 0) {
      output.WriteRawTag(184, 4);
      output.WriteUInt32(KillEaterEvent);
    }
    if (UnitStatusLabel != 0) {
      output.WriteRawTag(192, 4);
      output.WriteUInt32(UnitStatusLabel);
    }
    if (SpellGeneratedAttack != false) {
      output.WriteRawTag(200, 4);
      output.WriteBool(SpellGeneratedAttack);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (TargetName != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetName);
    }
    if (TargetSourceName != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetSourceName);
    }
    if (AttackerName != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackerName);
    }
    if (DamageSourceName != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageSourceName);
    }
    if (InflictorName != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InflictorName);
    }
    if (IsAttackerIllusion != false) {
      size += 1 + 1;
    }
    if (IsAttackerHero != false) {
      size += 1 + 1;
    }
    if (IsTargetIllusion != false) {
      size += 1 + 1;
    }
    if (IsTargetHero != false) {
      size += 1 + 1;
    }
    if (IsVisibleRadiant != false) {
      size += 1 + 1;
    }
    if (IsVisibleDire != false) {
      size += 1 + 1;
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
    }
    if (Health != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
    }
    if (Timestamp != 0F) {
      size += 1 + 4;
    }
    if (StunDuration != 0F) {
      size += 2 + 4;
    }
    if (SlowDuration != 0F) {
      size += 2 + 4;
    }
    if (IsAbilityToggleOn != false) {
      size += 2 + 1;
    }
    if (IsAbilityToggleOff != false) {
      size += 2 + 1;
    }
    if (AbilityLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AbilityLevel);
    }
    if (LocationX != 0F) {
      size += 2 + 4;
    }
    if (LocationY != 0F) {
      size += 2 + 4;
    }
    if (GoldReason != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GoldReason);
    }
    if (TimestampRaw != 0F) {
      size += 2 + 4;
    }
    if (ModifierDuration != 0F) {
      size += 2 + 4;
    }
    if (XpReason != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(XpReason);
    }
    if (LastHits != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastHits);
    }
    if (AttackerTeam != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackerTeam);
    }
    if (TargetTeam != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetTeam);
    }
    if (ObsWardsPlaced != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ObsWardsPlaced);
    }
    if (AssistPlayer0 != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer0);
    }
    if (AssistPlayer1 != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer1);
    }
    if (AssistPlayer2 != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer2);
    }
    if (AssistPlayer3 != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayer3);
    }
    if (StackCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StackCount);
    }
    if (HiddenModifier != false) {
      size += 2 + 1;
    }
    if (IsTargetBuilding != false) {
      size += 2 + 1;
    }
    if (NeutralCampType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeutralCampType);
    }
    if (RuneType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RuneType);
    }
    if (AssistPlayers != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AssistPlayers);
    }
    if (IsHealSave != false) {
      size += 2 + 1;
    }
    if (IsUltimateAbility != false) {
      size += 2 + 1;
    }
    if (AttackerHeroLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackerHeroLevel);
    }
    if (TargetHeroLevel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetHeroLevel);
    }
    if (Xpm != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Xpm);
    }
    if (Gpm != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Gpm);
    }
    if (EventLocation != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EventLocation);
    }
    if (TargetIsSelf != false) {
      size += 2 + 1;
    }
    if (DamageType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageType);
    }
    if (InvisibilityModifier != false) {
      size += 2 + 1;
    }
    if (DamageCategory != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageCategory);
    }
    if (Networth != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Networth);
    }
    if (BuildingType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuildingType);
    }
    if (ModifierElapsedDuration != 0F) {
      size += 2 + 4;
    }
    if (SilenceModifier != false) {
      size += 2 + 1;
    }
    if (HealFromLifesteal != false) {
      size += 2 + 1;
    }
    if (ModifierPurged != false) {
      size += 2 + 1;
    }
    if (SpellEvaded != false) {
      size += 2 + 1;
    }
    if (MotionControllerModifier != false) {
      size += 2 + 1;
    }
    if (LongRangeKill != false) {
      size += 2 + 1;
    }
    if (ModifierPurgeAbility != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierPurgeAbility);
    }
    if (ModifierPurgeNpc != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierPurgeNpc);
    }
    if (RootModifier != false) {
      size += 2 + 1;
    }
    if (TotalUnitDeathCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalUnitDeathCount);
    }
    if (AuraModifier != false) {
      size += 2 + 1;
    }
    if (ArmorDebuffModifier != false) {
      size += 2 + 1;
    }
    if (NoPhysicalDamageModifier != false) {
      size += 2 + 1;
    }
    if (ModifierAbility != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ModifierAbility);
    }
    if (ModifierHidden != false) {
      size += 2 + 1;
    }
    if (InflictorIsStolenAbility != false) {
      size += 2 + 1;
    }
    if (KillEaterEvent != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KillEaterEvent);
    }
    if (UnitStatusLabel != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnitStatusLabel);
    }
    if (SpellGeneratedAttack != false) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgDOTACombatLogEntry other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.TargetName != 0) {
      TargetName = other.TargetName;
    }
    if (other.TargetSourceName != 0) {
      TargetSourceName = other.TargetSourceName;
    }
    if (other.AttackerName != 0) {
      AttackerName = other.AttackerName;
    }
    if (other.DamageSourceName != 0) {
      DamageSourceName = other.DamageSourceName;
    }
    if (other.InflictorName != 0) {
      InflictorName = other.InflictorName;
    }
    if (other.IsAttackerIllusion != false) {
      IsAttackerIllusion = other.IsAttackerIllusion;
    }
    if (other.IsAttackerHero != false) {
      IsAttackerHero = other.IsAttackerHero;
    }
    if (other.IsTargetIllusion != false) {
      IsTargetIllusion = other.IsTargetIllusion;
    }
    if (other.IsTargetHero != false) {
      IsTargetHero = other.IsTargetHero;
    }
    if (other.IsVisibleRadiant != false) {
      IsVisibleRadiant = other.IsVisibleRadiant;
    }
    if (other.IsVisibleDire != false) {
      IsVisibleDire = other.IsVisibleDire;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
    if (other.Health != 0) {
      Health = other.Health;
    }
    if (other.Timestamp != 0F) {
      Timestamp = other.Timestamp;
    }
    if (other.StunDuration != 0F) {
      StunDuration = other.StunDuration;
    }
    if (other.SlowDuration != 0F) {
      SlowDuration = other.SlowDuration;
    }
    if (other.IsAbilityToggleOn != false) {
      IsAbilityToggleOn = other.IsAbilityToggleOn;
    }
    if (other.IsAbilityToggleOff != false) {
      IsAbilityToggleOff = other.IsAbilityToggleOff;
    }
    if (other.AbilityLevel != 0) {
      AbilityLevel = other.AbilityLevel;
    }
    if (other.LocationX != 0F) {
      LocationX = other.LocationX;
    }
    if (other.LocationY != 0F) {
      LocationY = other.LocationY;
    }
    if (other.GoldReason != 0) {
      GoldReason = other.GoldReason;
    }
    if (other.TimestampRaw != 0F) {
      TimestampRaw = other.TimestampRaw;
    }
    if (other.ModifierDuration != 0F) {
      ModifierDuration = other.ModifierDuration;
    }
    if (other.XpReason != 0) {
      XpReason = other.XpReason;
    }
    if (other.LastHits != 0) {
      LastHits = other.LastHits;
    }
    if (other.AttackerTeam != 0) {
      AttackerTeam = other.AttackerTeam;
    }
    if (other.TargetTeam != 0) {
      TargetTeam = other.TargetTeam;
    }
    if (other.ObsWardsPlaced != 0) {
      ObsWardsPlaced = other.ObsWardsPlaced;
    }
    if (other.AssistPlayer0 != 0) {
      AssistPlayer0 = other.AssistPlayer0;
    }
    if (other.AssistPlayer1 != 0) {
      AssistPlayer1 = other.AssistPlayer1;
    }
    if (other.AssistPlayer2 != 0) {
      AssistPlayer2 = other.AssistPlayer2;
    }
    if (other.AssistPlayer3 != 0) {
      AssistPlayer3 = other.AssistPlayer3;
    }
    if (other.StackCount != 0) {
      StackCount = other.StackCount;
    }
    if (other.HiddenModifier != false) {
      HiddenModifier = other.HiddenModifier;
    }
    if (other.IsTargetBuilding != false) {
      IsTargetBuilding = other.IsTargetBuilding;
    }
    if (other.NeutralCampType != 0) {
      NeutralCampType = other.NeutralCampType;
    }
    if (other.RuneType != 0) {
      RuneType = other.RuneType;
    }
    if (other.AssistPlayers != 0) {
      AssistPlayers = other.AssistPlayers;
    }
    if (other.IsHealSave != false) {
      IsHealSave = other.IsHealSave;
    }
    if (other.IsUltimateAbility != false) {
      IsUltimateAbility = other.IsUltimateAbility;
    }
    if (other.AttackerHeroLevel != 0) {
      AttackerHeroLevel = other.AttackerHeroLevel;
    }
    if (other.TargetHeroLevel != 0) {
      TargetHeroLevel = other.TargetHeroLevel;
    }
    if (other.Xpm != 0) {
      Xpm = other.Xpm;
    }
    if (other.Gpm != 0) {
      Gpm = other.Gpm;
    }
    if (other.EventLocation != 0) {
      EventLocation = other.EventLocation;
    }
    if (other.TargetIsSelf != false) {
      TargetIsSelf = other.TargetIsSelf;
    }
    if (other.DamageType != 0) {
      DamageType = other.DamageType;
    }
    if (other.InvisibilityModifier != false) {
      InvisibilityModifier = other.InvisibilityModifier;
    }
    if (other.DamageCategory != 0) {
      DamageCategory = other.DamageCategory;
    }
    if (other.Networth != 0) {
      Networth = other.Networth;
    }
    if (other.BuildingType != 0) {
      BuildingType = other.BuildingType;
    }
    if (other.ModifierElapsedDuration != 0F) {
      ModifierElapsedDuration = other.ModifierElapsedDuration;
    }
    if (other.SilenceModifier != false) {
      SilenceModifier = other.SilenceModifier;
    }
    if (other.HealFromLifesteal != false) {
      HealFromLifesteal = other.HealFromLifesteal;
    }
    if (other.ModifierPurged != false) {
      ModifierPurged = other.ModifierPurged;
    }
    if (other.SpellEvaded != false) {
      SpellEvaded = other.SpellEvaded;
    }
    if (other.MotionControllerModifier != false) {
      MotionControllerModifier = other.MotionControllerModifier;
    }
    if (other.LongRangeKill != false) {
      LongRangeKill = other.LongRangeKill;
    }
    if (other.ModifierPurgeAbility != 0) {
      ModifierPurgeAbility = other.ModifierPurgeAbility;
    }
    if (other.ModifierPurgeNpc != 0) {
      ModifierPurgeNpc = other.ModifierPurgeNpc;
    }
    if (other.RootModifier != false) {
      RootModifier = other.RootModifier;
    }
    if (other.TotalUnitDeathCount != 0) {
      TotalUnitDeathCount = other.TotalUnitDeathCount;
    }
    if (other.AuraModifier != false) {
      AuraModifier = other.AuraModifier;
    }
    if (other.ArmorDebuffModifier != false) {
      ArmorDebuffModifier = other.ArmorDebuffModifier;
    }
    if (other.NoPhysicalDamageModifier != false) {
      NoPhysicalDamageModifier = other.NoPhysicalDamageModifier;
    }
    if (other.ModifierAbility != 0) {
      ModifierAbility = other.ModifierAbility;
    }
    if (other.ModifierHidden != false) {
      ModifierHidden = other.ModifierHidden;
    }
    if (other.InflictorIsStolenAbility != false) {
      InflictorIsStolenAbility = other.InflictorIsStolenAbility;
    }
    if (other.KillEaterEvent != 0) {
      KillEaterEvent = other.KillEaterEvent;
    }
    if (other.UnitStatusLabel != 0) {
      UnitStatusLabel = other.UnitStatusLabel;
    }
    if (other.SpellGeneratedAttack != false) {
      SpellGeneratedAttack = other.SpellGeneratedAttack;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::DOTA_COMBATLOG_TYPES) input.ReadEnum();
          break;
        }
        case 16: {
          TargetName = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetSourceName = input.ReadUInt32();
          break;
        }
        case 32: {
          AttackerName = input.ReadUInt32();
          break;
        }
        case 40: {
          DamageSourceName = input.ReadUInt32();
          break;
        }
        case 48: {
          InflictorName = input.ReadUInt32();
          break;
        }
        case 56: {
          IsAttackerIllusion = input.ReadBool();
          break;
        }
        case 64: {
          IsAttackerHero = input.ReadBool();
          break;
        }
        case 72: {
          IsTargetIllusion = input.ReadBool();
          break;
        }
        case 80: {
          IsTargetHero = input.ReadBool();
          break;
        }
        case 88: {
          IsVisibleRadiant = input.ReadBool();
          break;
        }
        case 96: {
          IsVisibleDire = input.ReadBool();
          break;
        }
        case 104: {
          Value = input.ReadUInt32();
          break;
        }
        case 112: {
          Health = input.ReadInt32();
          break;
        }
        case 125: {
          Timestamp = input.ReadFloat();
          break;
        }
        case 133: {
          StunDuration = input.ReadFloat();
          break;
        }
        case 141: {
          SlowDuration = input.ReadFloat();
          break;
        }
        case 144: {
          IsAbilityToggleOn = input.ReadBool();
          break;
        }
        case 152: {
          IsAbilityToggleOff = input.ReadBool();
          break;
        }
        case 160: {
          AbilityLevel = input.ReadUInt32();
          break;
        }
        case 173: {
          LocationX = input.ReadFloat();
          break;
        }
        case 181: {
          LocationY = input.ReadFloat();
          break;
        }
        case 184: {
          GoldReason = input.ReadUInt32();
          break;
        }
        case 197: {
          TimestampRaw = input.ReadFloat();
          break;
        }
        case 205: {
          ModifierDuration = input.ReadFloat();
          break;
        }
        case 208: {
          XpReason = input.ReadUInt32();
          break;
        }
        case 216: {
          LastHits = input.ReadUInt32();
          break;
        }
        case 224: {
          AttackerTeam = input.ReadUInt32();
          break;
        }
        case 232: {
          TargetTeam = input.ReadUInt32();
          break;
        }
        case 240: {
          ObsWardsPlaced = input.ReadUInt32();
          break;
        }
        case 248: {
          AssistPlayer0 = input.ReadUInt32();
          break;
        }
        case 256: {
          AssistPlayer1 = input.ReadUInt32();
          break;
        }
        case 264: {
          AssistPlayer2 = input.ReadUInt32();
          break;
        }
        case 272: {
          AssistPlayer3 = input.ReadUInt32();
          break;
        }
        case 280: {
          StackCount = input.ReadUInt32();
          break;
        }
        case 288: {
          HiddenModifier = input.ReadBool();
          break;
        }
        case 296: {
          IsTargetBuilding = input.ReadBool();
          break;
        }
        case 304: {
          NeutralCampType = input.ReadUInt32();
          break;
        }
        case 312: {
          RuneType = input.ReadUInt32();
          break;
        }
        case 320: {
          AssistPlayers = input.ReadUInt32();
          break;
        }
        case 328: {
          IsHealSave = input.ReadBool();
          break;
        }
        case 336: {
          IsUltimateAbility = input.ReadBool();
          break;
        }
        case 344: {
          AttackerHeroLevel = input.ReadUInt32();
          break;
        }
        case 352: {
          TargetHeroLevel = input.ReadUInt32();
          break;
        }
        case 360: {
          Xpm = input.ReadUInt32();
          break;
        }
        case 368: {
          Gpm = input.ReadUInt32();
          break;
        }
        case 376: {
          EventLocation = input.ReadUInt32();
          break;
        }
        case 384: {
          TargetIsSelf = input.ReadBool();
          break;
        }
        case 392: {
          DamageType = input.ReadUInt32();
          break;
        }
        case 400: {
          InvisibilityModifier = input.ReadBool();
          break;
        }
        case 408: {
          DamageCategory = input.ReadUInt32();
          break;
        }
        case 416: {
          Networth = input.ReadUInt32();
          break;
        }
        case 424: {
          BuildingType = input.ReadUInt32();
          break;
        }
        case 437: {
          ModifierElapsedDuration = input.ReadFloat();
          break;
        }
        case 440: {
          SilenceModifier = input.ReadBool();
          break;
        }
        case 448: {
          HealFromLifesteal = input.ReadBool();
          break;
        }
        case 456: {
          ModifierPurged = input.ReadBool();
          break;
        }
        case 464: {
          SpellEvaded = input.ReadBool();
          break;
        }
        case 472: {
          MotionControllerModifier = input.ReadBool();
          break;
        }
        case 480: {
          LongRangeKill = input.ReadBool();
          break;
        }
        case 488: {
          ModifierPurgeAbility = input.ReadUInt32();
          break;
        }
        case 496: {
          ModifierPurgeNpc = input.ReadUInt32();
          break;
        }
        case 504: {
          RootModifier = input.ReadBool();
          break;
        }
        case 512: {
          TotalUnitDeathCount = input.ReadUInt32();
          break;
        }
        case 520: {
          AuraModifier = input.ReadBool();
          break;
        }
        case 528: {
          ArmorDebuffModifier = input.ReadBool();
          break;
        }
        case 536: {
          NoPhysicalDamageModifier = input.ReadBool();
          break;
        }
        case 544: {
          ModifierAbility = input.ReadUInt32();
          break;
        }
        case 552: {
          ModifierHidden = input.ReadBool();
          break;
        }
        case 560: {
          InflictorIsStolenAbility = input.ReadBool();
          break;
        }
        case 568: {
          KillEaterEvent = input.ReadUInt32();
          break;
        }
        case 576: {
          UnitStatusLabel = input.ReadUInt32();
          break;
        }
        case 584: {
          SpellGeneratedAttack = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
