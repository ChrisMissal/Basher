// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: networkbasetypes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from networkbasetypes.proto</summary>
public static partial class NetworkbasetypesReflection {

  #region Descriptor
  /// <summary>File descriptor for networkbasetypes.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static NetworkbasetypesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChZuZXR3b3JrYmFzZXR5cGVzLnByb3RvIi0KCkNNc2dWZWN0b3ISCQoBeBgB",
          "IAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiJAoMQ01zZ1ZlY3RvcjJEEgkK",
          "AXgYASABKAISCQoBeRgCIAEoAiItCgpDTXNnUUFuZ2xlEgkKAXgYASABKAIS",
          "CQoBeRgCIAEoAhIJCgF6GAMgASgCIjYKCENNc2dSR0JBEgkKAXIYASABKAUS",
          "CQoBZxgCIAEoBRIJCgFiGAMgASgFEgkKAWEYBCABKAUicQoOQ01zZ1BsYXll",
          "ckluZm8SDAoEbmFtZRgBIAEoCRIMCgR4dWlkGAIgASgGEg4KBnVzZXJpZBgD",
          "IAEoBRIPCgdzdGVhbWlkGAQgASgGEhIKCmZha2VwbGF5ZXIYBSABKAgSDgoG",
          "aXNobHR2GAYgASgIIiMKCkNFbnRpdHlNc2cSFQoNdGFyZ2V0X2VudGl0eRgB",
          "IAEoDSJSCgpDTXNnX0NWYXJzEh8KBWN2YXJzGAEgAygLMhAuQ01zZ19DVmFy",
          "cy5DVmFyGiMKBENWYXISDAoEbmFtZRgBIAEoCRINCgV2YWx1ZRgCIAEoCSIN",
          "CgtDTkVUTXNnX05PUCInChdDTkVUTXNnX1NwbGl0U2NyZWVuVXNlchIMCgRz",
          "bG90GAEgASgFIuIBCgxDTkVUTXNnX1RpY2sSDAoEdGljaxgBIAEoDRIWCg5o",
          "b3N0X2ZyYW1ldGltZRgCIAEoDRIkChxob3N0X2ZyYW1ldGltZV9zdGRfZGV2",
          "aWF0aW9uGAMgASgNEhwKFGhvc3RfY29tcHV0YXRpb250aW1lGAQgASgNEioK",
          "Imhvc3RfY29tcHV0YXRpb250aW1lX3N0ZF9kZXZpYXRpb24YBSABKA0SKQoh",
          "aG9zdF9mcmFtZXN0YXJ0dGltZV9zdGRfZGV2aWF0aW9uGAYgASgNEhEKCWhv",
          "c3RfbG9zcxgHIAEoDSIkChFDTkVUTXNnX1N0cmluZ0NtZBIPCgdjb21tYW5k",
          "GAEgASgJIjEKEUNORVRNc2dfU2V0Q29uVmFyEhwKB2NvbnZhcnMYASABKAsy",
          "Cy5DTXNnX0NWYXJzIpoBChNDTkVUTXNnX1NpZ25vblN0YXRlEhQKDHNpZ25v",
          "bl9zdGF0ZRgBIAEoDRITCgtzcGF3bl9jb3VudBgCIAEoDRIaChJudW1fc2Vy",
          "dmVyX3BsYXllcnMYAyABKA0SGgoScGxheWVyc19uZXR3b3JraWRzGAQgAygJ",
          "EhAKCG1hcF9uYW1lGAUgASgJEg4KBmFkZG9ucxgGIAEoCSL8AQoRQ1NWQ01z",
          "Z19HYW1lRXZlbnQSEgoKZXZlbnRfbmFtZRgBIAEoCRIPCgdldmVudGlkGAIg",
          "ASgFEiYKBGtleXMYAyADKAsyGC5DU1ZDTXNnX0dhbWVFdmVudC5rZXlfdBqZ",
          "AQoFa2V5X3QSDAoEdHlwZRgBIAEoBRISCgp2YWxfc3RyaW5nGAIgASgJEhEK",
          "CXZhbF9mbG9hdBgDIAEoAhIQCgh2YWxfbG9uZxgEIAEoBRIRCgl2YWxfc2hv",
          "cnQYBSABKAUSEAoIdmFsX2J5dGUYBiABKAUSEAoIdmFsX2Jvb2wYByABKAgS",
          "EgoKdmFsX3VpbnQ2NBgIIAEoBCKFAQoWQ1NWQ01zZ0xpc3RfR2FtZUV2ZW50",
          "cxIvCgZldmVudHMYASADKAsyHy5DU1ZDTXNnTGlzdF9HYW1lRXZlbnRzLmV2",
          "ZW50X3QaOgoHZXZlbnRfdBIMCgR0aWNrGAEgASgFEiEKBWV2ZW50GAIgASgL",
          "MhIuQ1NWQ01zZ19HYW1lRXZlbnQiOQoTQ1NWQ01zZ19Vc2VyTWVzc2FnZRIQ",
          "Cghtc2dfdHlwZRgBIAEoBRIQCghtc2dfZGF0YRgCIAEoDCKPAQoYQ1NWQ01z",
          "Z0xpc3RfVXNlck1lc3NhZ2VzEjUKCHVzZXJtc2dzGAEgAygLMiMuQ1NWQ01z",
          "Z0xpc3RfVXNlck1lc3NhZ2VzLnVzZXJtc2dfdBo8Cgl1c2VybXNnX3QSDAoE",
          "dGljaxgBIAEoBRIhCgNtc2cYAiABKAsyFC5DU1ZDTXNnX1VzZXJNZXNzYWdl",
          "IvoDChdDTkVUTXNnX1NwYXduR3JvdXBfTG9hZBIRCgl3b3JsZG5hbWUYASAB",
          "KAkSFgoOZW50aXR5bHVtcG5hbWUYAiABKAkSGAoQZW50aXR5ZmlsdGVybmFt",
          "ZRgDIAEoCRIYChBzcGF3bmdyb3VwaGFuZGxlGAQgASgNEh0KFXNwYXduZ3Jv",
          "dXBvd25lcmhhbmRsZRgFIAEoDRIlChB3b3JsZF9vZmZzZXRfcG9zGAYgASgL",
          "MgsuQ01zZ1ZlY3RvchInChJ3b3JsZF9vZmZzZXRfYW5nbGUYByABKAsyCy5D",
          "TXNnUUFuZ2xlEhoKEnNwYXduZ3JvdXBtYW5pZmVzdBgIIAEoDBINCgVmbGFn",
          "cxgJIAEoDRIRCgl0aWNrY291bnQYCiABKAUSGgoSbWFuaWZlc3RpbmNvbXBs",
          "ZXRlGAsgASgIEhYKDmxvY2FsbmFtZWZpeHVwGAwgASgJEhcKD3BhcmVudG5h",
          "bWVmaXh1cBgNIAEoCRIcChRtYW5pZmVzdGxvYWRwcmlvcml0eRgOIAEoBRIU",
          "Cgx3b3JsZGdyb3VwaWQYDyABKA0SGAoQY3JlYXRpb25zZXF1ZW5jZRgQIAEo",
          "DRIYChBzYXZlZ2FtZWZpbGVuYW1lGBEgASgJEh4KFnNwYXduZ3JvdXBwYXJl",
          "bnRoYW5kbGUYEiABKA0idQohQ05FVE1zZ19TcGF3bkdyb3VwX01hbmlmZXN0",
          "VXBkYXRlEhgKEHNwYXduZ3JvdXBoYW5kbGUYASABKA0SGgoSc3Bhd25ncm91",
          "cG1hbmlmZXN0GAIgASgMEhoKEm1hbmlmZXN0aW5jb21wbGV0ZRgDIAEoCCJr",
          "CiJDTkVUTXNnX1NwYXduR3JvdXBfU2V0Q3JlYXRpb25UaWNrEhgKEHNwYXdu",
          "Z3JvdXBoYW5kbGUYASABKA0SEQoJdGlja2NvdW50GAIgASgFEhgKEGNyZWF0",
          "aW9uc2VxdWVuY2UYAyABKA0iVwoZQ05FVE1zZ19TcGF3bkdyb3VwX1VubG9h",
          "ZBIYChBzcGF3bmdyb3VwaGFuZGxlGAEgASgNEg0KBWZsYWdzGAIgASgNEhEK",
          "CXRpY2tjb3VudBgDIAEoBSI8CiBDTkVUTXNnX1NwYXduR3JvdXBfTG9hZENv",
          "bXBsZXRlZBIYChBzcGF3bmdyb3VwaGFuZGxlGAEgASgNIs0DCiBDU1ZDTXNn",
          "X0dhbWVTZXNzaW9uQ29uZmlndXJhdGlvbhIWCg5pc19tdWx0aXBsYXllchgB",
          "IAEoCBIXCg9pc19sb2Fkc2F2ZWdhbWUYAiABKAgSGQoRaXNfYmFja2dyb3Vu",
          "ZF9tYXAYAyABKAgSEwoLaXNfaGVhZGxlc3MYBCABKAgSGAoQbWluX2NsaWVu",
          "dF9saW1pdBgFIAEoDRIYChBtYXhfY2xpZW50X2xpbWl0GAYgASgNEhMKC21h",
          "eF9jbGllbnRzGAcgASgNEhUKDXRpY2tfaW50ZXJ2YWwYCCABKAcSEAoIaG9z",
          "dG5hbWUYCSABKAkSFAoMc2F2ZWdhbWVuYW1lGAogASgJEhIKCnMxX21hcG5h",
          "bWUYCyABKAkSEAoIZ2FtZW1vZGUYDCABKAkSGQoRc2VydmVyX2lwX2FkZHJl",
          "c3MYDSABKAkSDAoEZGF0YRgOIAEoDBIUCgxpc19sb2NhbG9ubHkYDyABKAgS",
          "FwoPbm9fc3RlYW1fc2VydmVyGBMgASgIEhUKDWlzX3RyYW5zaXRpb24YECAB",
          "KAgSFQoNcHJldmlvdXNsZXZlbBgRIAEoCRIUCgxsYW5kbWFya25hbWUYEiAB",
          "KAkqrgIKDE5FVF9NZXNzYWdlcxILCgduZXRfTk9QEAASEgoObmV0X0Rpc2Nv",
          "bm5lY3QQARIXChNuZXRfU3BsaXRTY3JlZW5Vc2VyEAMSDAoIbmV0X1RpY2sQ",
          "BBIRCg1uZXRfU3RyaW5nQ21kEAUSEQoNbmV0X1NldENvblZhchAGEhMKD25l",
          "dF9TaWdub25TdGF0ZRAHEhcKE25ldF9TcGF3bkdyb3VwX0xvYWQQCBIhCh1u",
          "ZXRfU3Bhd25Hcm91cF9NYW5pZmVzdFVwZGF0ZRAJEiIKHm5ldF9TcGF3bkdy",
          "b3VwX1NldENyZWF0aW9uVGljaxALEhkKFW5ldF9TcGF3bkdyb3VwX1VubG9h",
          "ZBAMEiAKHG5ldF9TcGF3bkdyb3VwX0xvYWRDb21wbGV0ZWQQDSrhAgoRU3Bh",
          "d25Hcm91cEZsYWdzX3QSEwoPU1BBV05fR1JPVVBfTmlsEAASJwojU1BBV05f",
          "R1JPVVBfTE9BRF9FTlRJVElFU19GUk9NX1NBVkUQARIjCh9TUEFXTl9HUk9V",
          "UF9ET05UX1NQQVdOX0VOVElUSUVTEAISIQodU1BBV05fR1JPVVBfU1lOQ0hS",
          "T05PVVNfU1BBV04QBBImCiJTUEFXTl9HUk9VUF9JU19JTklUSUFMX1NQQVdO",
          "X0dST1VQEAgSKwonU1BBV05fR1JPVVBfQ1JFQVRFX0NMSUVOVF9PTkxZX0VO",
          "VElUSUVTEBASIgoeU1BBV05fR1JPVVBfQkxPQ0tfVU5USUxfTE9BREVEEEAS",
          "JAofU1BBV05fR1JPVVBfTE9BRF9TVFJFQU1JTkdfREFUQRCAARInCiJTUEFX",
          "Tl9HUk9VUF9DUkVBVEVfTkVXX1NDRU5FX1dPUkxEEIACQgOAAQBiBnByb3Rv",
          "Mw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NET_Messages), typeof(global::SpawnGroupFlags_t), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgVector), global::CMsgVector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgVector2D), global::CMsgVector2D.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgQAngle), global::CMsgQAngle.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgRGBA), global::CMsgRGBA.Parser, new[]{ "R", "G", "B", "A" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgPlayerInfo), global::CMsgPlayerInfo.Parser, new[]{ "Name", "Xuid", "Userid", "Steamid", "Fakeplayer", "Ishltv" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CEntityMsg), global::CEntityMsg.Parser, new[]{ "TargetEntity" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsg_CVars), global::CMsg_CVars.Parser, new[]{ "Cvars" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsg_CVars.Types.CVar), global::CMsg_CVars.Types.CVar.Parser, new[]{ "Name", "Value" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_NOP), global::CNETMsg_NOP.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SplitScreenUser), global::CNETMsg_SplitScreenUser.Parser, new[]{ "Slot" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_Tick), global::CNETMsg_Tick.Parser, new[]{ "Tick", "HostFrametime", "HostFrametimeStdDeviation", "HostComputationtime", "HostComputationtimeStdDeviation", "HostFramestarttimeStdDeviation", "HostLoss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_StringCmd), global::CNETMsg_StringCmd.Parser, new[]{ "Command" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SetConVar), global::CNETMsg_SetConVar.Parser, new[]{ "Convars" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SignonState), global::CNETMsg_SignonState.Parser, new[]{ "SignonState", "SpawnCount", "NumServerPlayers", "PlayersNetworkids", "MapName", "Addons" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_GameEvent), global::CSVCMsg_GameEvent.Parser, new[]{ "EventName", "Eventid", "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_GameEvent.Types.key_t), global::CSVCMsg_GameEvent.Types.key_t.Parser, new[]{ "Type", "ValString", "ValFloat", "ValLong", "ValShort", "ValByte", "ValBool", "ValUint64" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsgList_GameEvents), global::CSVCMsgList_GameEvents.Parser, new[]{ "Events" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsgList_GameEvents.Types.event_t), global::CSVCMsgList_GameEvents.Types.event_t.Parser, new[]{ "Tick", "Event" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_UserMessage), global::CSVCMsg_UserMessage.Parser, new[]{ "MsgType", "MsgData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsgList_UserMessages), global::CSVCMsgList_UserMessages.Parser, new[]{ "Usermsgs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsgList_UserMessages.Types.usermsg_t), global::CSVCMsgList_UserMessages.Types.usermsg_t.Parser, new[]{ "Tick", "Msg" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SpawnGroup_Load), global::CNETMsg_SpawnGroup_Load.Parser, new[]{ "Worldname", "Entitylumpname", "Entityfiltername", "Spawngrouphandle", "Spawngroupownerhandle", "WorldOffsetPos", "WorldOffsetAngle", "Spawngroupmanifest", "Flags", "Tickcount", "Manifestincomplete", "Localnamefixup", "Parentnamefixup", "Manifestloadpriority", "Worldgroupid", "Creationsequence", "Savegamefilename", "Spawngroupparenthandle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SpawnGroup_ManifestUpdate), global::CNETMsg_SpawnGroup_ManifestUpdate.Parser, new[]{ "Spawngrouphandle", "Spawngroupmanifest", "Manifestincomplete" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SpawnGroup_SetCreationTick), global::CNETMsg_SpawnGroup_SetCreationTick.Parser, new[]{ "Spawngrouphandle", "Tickcount", "Creationsequence" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SpawnGroup_Unload), global::CNETMsg_SpawnGroup_Unload.Parser, new[]{ "Spawngrouphandle", "Flags", "Tickcount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CNETMsg_SpawnGroup_LoadCompleted), global::CNETMsg_SpawnGroup_LoadCompleted.Parser, new[]{ "Spawngrouphandle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_GameSessionConfiguration), global::CSVCMsg_GameSessionConfiguration.Parser, new[]{ "IsMultiplayer", "IsLoadsavegame", "IsBackgroundMap", "IsHeadless", "MinClientLimit", "MaxClientLimit", "MaxClients", "TickInterval", "Hostname", "Savegamename", "S1Mapname", "Gamemode", "ServerIpAddress", "Data", "IsLocalonly", "NoSteamServer", "IsTransition", "Previouslevel", "Landmarkname" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum NET_Messages {
  [pbr::OriginalName("net_NOP")] NetNop = 0,
  [pbr::OriginalName("net_Disconnect")] NetDisconnect = 1,
  [pbr::OriginalName("net_SplitScreenUser")] NetSplitScreenUser = 3,
  [pbr::OriginalName("net_Tick")] NetTick = 4,
  [pbr::OriginalName("net_StringCmd")] NetStringCmd = 5,
  [pbr::OriginalName("net_SetConVar")] NetSetConVar = 6,
  [pbr::OriginalName("net_SignonState")] NetSignonState = 7,
  [pbr::OriginalName("net_SpawnGroup_Load")] NetSpawnGroupLoad = 8,
  [pbr::OriginalName("net_SpawnGroup_ManifestUpdate")] NetSpawnGroupManifestUpdate = 9,
  [pbr::OriginalName("net_SpawnGroup_SetCreationTick")] NetSpawnGroupSetCreationTick = 11,
  [pbr::OriginalName("net_SpawnGroup_Unload")] NetSpawnGroupUnload = 12,
  [pbr::OriginalName("net_SpawnGroup_LoadCompleted")] NetSpawnGroupLoadCompleted = 13,
}

public enum SpawnGroupFlags_t {
  [pbr::OriginalName("SPAWN_GROUP_Nil")] SpawnGroupNil = 0,
  [pbr::OriginalName("SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE")] SpawnGroupLoadEntitiesFromSave = 1,
  [pbr::OriginalName("SPAWN_GROUP_DONT_SPAWN_ENTITIES")] SpawnGroupDontSpawnEntities = 2,
  [pbr::OriginalName("SPAWN_GROUP_SYNCHRONOUS_SPAWN")] SpawnGroupSynchronousSpawn = 4,
  [pbr::OriginalName("SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP")] SpawnGroupIsInitialSpawnGroup = 8,
  [pbr::OriginalName("SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES")] SpawnGroupCreateClientOnlyEntities = 16,
  [pbr::OriginalName("SPAWN_GROUP_BLOCK_UNTIL_LOADED")] SpawnGroupBlockUntilLoaded = 64,
  [pbr::OriginalName("SPAWN_GROUP_LOAD_STREAMING_DATA")] SpawnGroupLoadStreamingData = 128,
  [pbr::OriginalName("SPAWN_GROUP_CREATE_NEW_SCENE_WORLD")] SpawnGroupCreateNewSceneWorld = 256,
}

#endregion

#region Messages
public sealed partial class CMsgVector : pb::IMessage<CMsgVector> {
  private static readonly pb::MessageParser<CMsgVector> _parser = new pb::MessageParser<CMsgVector>(() => new CMsgVector());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgVector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgVector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgVector(CMsgVector other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgVector Clone() {
    return new CMsgVector(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgVector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgVector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgVector other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class CMsgVector2D : pb::IMessage<CMsgVector2D> {
  private static readonly pb::MessageParser<CMsgVector2D> _parser = new pb::MessageParser<CMsgVector2D>(() => new CMsgVector2D());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgVector2D> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgVector2D() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgVector2D(CMsgVector2D other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgVector2D Clone() {
    return new CMsgVector2D(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgVector2D);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgVector2D other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgVector2D other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class CMsgQAngle : pb::IMessage<CMsgQAngle> {
  private static readonly pb::MessageParser<CMsgQAngle> _parser = new pb::MessageParser<CMsgQAngle>(() => new CMsgQAngle());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgQAngle> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgQAngle() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgQAngle(CMsgQAngle other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgQAngle Clone() {
    return new CMsgQAngle(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgQAngle);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgQAngle other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgQAngle other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class CMsgRGBA : pb::IMessage<CMsgRGBA> {
  private static readonly pb::MessageParser<CMsgRGBA> _parser = new pb::MessageParser<CMsgRGBA>(() => new CMsgRGBA());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgRGBA> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRGBA() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRGBA(CMsgRGBA other) : this() {
    r_ = other.r_;
    g_ = other.g_;
    b_ = other.b_;
    a_ = other.a_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgRGBA Clone() {
    return new CMsgRGBA(this);
  }

  /// <summary>Field number for the "r" field.</summary>
  public const int RFieldNumber = 1;
  private int r_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int R {
    get { return r_; }
    set {
      r_ = value;
    }
  }

  /// <summary>Field number for the "g" field.</summary>
  public const int GFieldNumber = 2;
  private int g_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int G {
    get { return g_; }
    set {
      g_ = value;
    }
  }

  /// <summary>Field number for the "b" field.</summary>
  public const int BFieldNumber = 3;
  private int b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int B {
    get { return b_; }
    set {
      b_ = value;
    }
  }

  /// <summary>Field number for the "a" field.</summary>
  public const int AFieldNumber = 4;
  private int a_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int A {
    get { return a_; }
    set {
      a_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgRGBA);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgRGBA other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (R != other.R) return false;
    if (G != other.G) return false;
    if (B != other.B) return false;
    if (A != other.A) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (R != 0) hash ^= R.GetHashCode();
    if (G != 0) hash ^= G.GetHashCode();
    if (B != 0) hash ^= B.GetHashCode();
    if (A != 0) hash ^= A.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (R != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(R);
    }
    if (G != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(G);
    }
    if (B != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(B);
    }
    if (A != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(A);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (R != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
    }
    if (G != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
    }
    if (B != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
    }
    if (A != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgRGBA other) {
    if (other == null) {
      return;
    }
    if (other.R != 0) {
      R = other.R;
    }
    if (other.G != 0) {
      G = other.G;
    }
    if (other.B != 0) {
      B = other.B;
    }
    if (other.A != 0) {
      A = other.A;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          R = input.ReadInt32();
          break;
        }
        case 16: {
          G = input.ReadInt32();
          break;
        }
        case 24: {
          B = input.ReadInt32();
          break;
        }
        case 32: {
          A = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CMsgPlayerInfo : pb::IMessage<CMsgPlayerInfo> {
  private static readonly pb::MessageParser<CMsgPlayerInfo> _parser = new pb::MessageParser<CMsgPlayerInfo>(() => new CMsgPlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsgPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgPlayerInfo(CMsgPlayerInfo other) : this() {
    name_ = other.name_;
    xuid_ = other.xuid_;
    userid_ = other.userid_;
    steamid_ = other.steamid_;
    fakeplayer_ = other.fakeplayer_;
    ishltv_ = other.ishltv_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsgPlayerInfo Clone() {
    return new CMsgPlayerInfo(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "xuid" field.</summary>
  public const int XuidFieldNumber = 2;
  private ulong xuid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Xuid {
    get { return xuid_; }
    set {
      xuid_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 3;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "steamid" field.</summary>
  public const int SteamidFieldNumber = 4;
  private ulong steamid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Steamid {
    get { return steamid_; }
    set {
      steamid_ = value;
    }
  }

  /// <summary>Field number for the "fakeplayer" field.</summary>
  public const int FakeplayerFieldNumber = 5;
  private bool fakeplayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Fakeplayer {
    get { return fakeplayer_; }
    set {
      fakeplayer_ = value;
    }
  }

  /// <summary>Field number for the "ishltv" field.</summary>
  public const int IshltvFieldNumber = 6;
  private bool ishltv_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Ishltv {
    get { return ishltv_; }
    set {
      ishltv_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsgPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsgPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Xuid != other.Xuid) return false;
    if (Userid != other.Userid) return false;
    if (Steamid != other.Steamid) return false;
    if (Fakeplayer != other.Fakeplayer) return false;
    if (Ishltv != other.Ishltv) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Xuid != 0UL) hash ^= Xuid.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Steamid != 0UL) hash ^= Steamid.GetHashCode();
    if (Fakeplayer != false) hash ^= Fakeplayer.GetHashCode();
    if (Ishltv != false) hash ^= Ishltv.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Xuid != 0UL) {
      output.WriteRawTag(17);
      output.WriteFixed64(Xuid);
    }
    if (Userid != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Userid);
    }
    if (Steamid != 0UL) {
      output.WriteRawTag(33);
      output.WriteFixed64(Steamid);
    }
    if (Fakeplayer != false) {
      output.WriteRawTag(40);
      output.WriteBool(Fakeplayer);
    }
    if (Ishltv != false) {
      output.WriteRawTag(48);
      output.WriteBool(Ishltv);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Xuid != 0UL) {
      size += 1 + 8;
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Steamid != 0UL) {
      size += 1 + 8;
    }
    if (Fakeplayer != false) {
      size += 1 + 1;
    }
    if (Ishltv != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsgPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Xuid != 0UL) {
      Xuid = other.Xuid;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Steamid != 0UL) {
      Steamid = other.Steamid;
    }
    if (other.Fakeplayer != false) {
      Fakeplayer = other.Fakeplayer;
    }
    if (other.Ishltv != false) {
      Ishltv = other.Ishltv;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 17: {
          Xuid = input.ReadFixed64();
          break;
        }
        case 24: {
          Userid = input.ReadInt32();
          break;
        }
        case 33: {
          Steamid = input.ReadFixed64();
          break;
        }
        case 40: {
          Fakeplayer = input.ReadBool();
          break;
        }
        case 48: {
          Ishltv = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CEntityMsg : pb::IMessage<CEntityMsg> {
  private static readonly pb::MessageParser<CEntityMsg> _parser = new pb::MessageParser<CEntityMsg>(() => new CEntityMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CEntityMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CEntityMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CEntityMsg(CEntityMsg other) : this() {
    targetEntity_ = other.targetEntity_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CEntityMsg Clone() {
    return new CEntityMsg(this);
  }

  /// <summary>Field number for the "target_entity" field.</summary>
  public const int TargetEntityFieldNumber = 1;
  private uint targetEntity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntity {
    get { return targetEntity_; }
    set {
      targetEntity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CEntityMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CEntityMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetEntity != other.TargetEntity) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetEntity != 0) hash ^= TargetEntity.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetEntity != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetEntity);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetEntity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntity);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CEntityMsg other) {
    if (other == null) {
      return;
    }
    if (other.TargetEntity != 0) {
      TargetEntity = other.TargetEntity;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetEntity = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CMsg_CVars : pb::IMessage<CMsg_CVars> {
  private static readonly pb::MessageParser<CMsg_CVars> _parser = new pb::MessageParser<CMsg_CVars>(() => new CMsg_CVars());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CMsg_CVars> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsg_CVars() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsg_CVars(CMsg_CVars other) : this() {
    cvars_ = other.cvars_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CMsg_CVars Clone() {
    return new CMsg_CVars(this);
  }

  /// <summary>Field number for the "cvars" field.</summary>
  public const int CvarsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsg_CVars.Types.CVar> _repeated_cvars_codec
      = pb::FieldCodec.ForMessage(10, global::CMsg_CVars.Types.CVar.Parser);
  private readonly pbc::RepeatedField<global::CMsg_CVars.Types.CVar> cvars_ = new pbc::RepeatedField<global::CMsg_CVars.Types.CVar>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CMsg_CVars.Types.CVar> Cvars {
    get { return cvars_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CMsg_CVars);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CMsg_CVars other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cvars_.Equals(other.cvars_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cvars_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cvars_.WriteTo(output, _repeated_cvars_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cvars_.CalculateSize(_repeated_cvars_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CMsg_CVars other) {
    if (other == null) {
      return;
    }
    cvars_.Add(other.cvars_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          cvars_.AddEntriesFrom(input, _repeated_cvars_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CMsg_CVars message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class CVar : pb::IMessage<CVar> {
      private static readonly pb::MessageParser<CVar> _parser = new pb::MessageParser<CVar>(() => new CVar());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<CVar> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsg_CVars.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CVar() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CVar(CVar other) : this() {
        name_ = other.name_;
        value_ = other.value_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CVar Clone() {
        return new CVar(this);
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 1;
      private string name_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Name {
        get { return name_; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 2;
      private string value_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Value {
        get { return value_; }
        set {
          value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as CVar);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(CVar other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Name != other.Name) return false;
        if (Value != other.Value) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (Value.Length != 0) hash ^= Value.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Name.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Name);
        }
        if (Value.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Value);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Name.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (Value.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(CVar other) {
        if (other == null) {
          return;
        }
        if (other.Name.Length != 0) {
          Name = other.Name;
        }
        if (other.Value.Length != 0) {
          Value = other.Value;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 18: {
              Value = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class CNETMsg_NOP : pb::IMessage<CNETMsg_NOP> {
  private static readonly pb::MessageParser<CNETMsg_NOP> _parser = new pb::MessageParser<CNETMsg_NOP>(() => new CNETMsg_NOP());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_NOP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_NOP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_NOP(CNETMsg_NOP other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_NOP Clone() {
    return new CNETMsg_NOP(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_NOP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_NOP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_NOP other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CNETMsg_SplitScreenUser : pb::IMessage<CNETMsg_SplitScreenUser> {
  private static readonly pb::MessageParser<CNETMsg_SplitScreenUser> _parser = new pb::MessageParser<CNETMsg_SplitScreenUser>(() => new CNETMsg_SplitScreenUser());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SplitScreenUser> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SplitScreenUser() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SplitScreenUser(CNETMsg_SplitScreenUser other) : this() {
    slot_ = other.slot_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SplitScreenUser Clone() {
    return new CNETMsg_SplitScreenUser(this);
  }

  /// <summary>Field number for the "slot" field.</summary>
  public const int SlotFieldNumber = 1;
  private int slot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Slot {
    get { return slot_; }
    set {
      slot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SplitScreenUser);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SplitScreenUser other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Slot != other.Slot) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Slot != 0) hash ^= Slot.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Slot != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Slot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Slot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SplitScreenUser other) {
    if (other == null) {
      return;
    }
    if (other.Slot != 0) {
      Slot = other.Slot;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Slot = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_Tick : pb::IMessage<CNETMsg_Tick> {
  private static readonly pb::MessageParser<CNETMsg_Tick> _parser = new pb::MessageParser<CNETMsg_Tick>(() => new CNETMsg_Tick());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_Tick> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_Tick() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_Tick(CNETMsg_Tick other) : this() {
    tick_ = other.tick_;
    hostFrametime_ = other.hostFrametime_;
    hostFrametimeStdDeviation_ = other.hostFrametimeStdDeviation_;
    hostComputationtime_ = other.hostComputationtime_;
    hostComputationtimeStdDeviation_ = other.hostComputationtimeStdDeviation_;
    hostFramestarttimeStdDeviation_ = other.hostFramestarttimeStdDeviation_;
    hostLoss_ = other.hostLoss_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_Tick Clone() {
    return new CNETMsg_Tick(this);
  }

  /// <summary>Field number for the "tick" field.</summary>
  public const int TickFieldNumber = 1;
  private uint tick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Tick {
    get { return tick_; }
    set {
      tick_ = value;
    }
  }

  /// <summary>Field number for the "host_frametime" field.</summary>
  public const int HostFrametimeFieldNumber = 2;
  private uint hostFrametime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint HostFrametime {
    get { return hostFrametime_; }
    set {
      hostFrametime_ = value;
    }
  }

  /// <summary>Field number for the "host_frametime_std_deviation" field.</summary>
  public const int HostFrametimeStdDeviationFieldNumber = 3;
  private uint hostFrametimeStdDeviation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint HostFrametimeStdDeviation {
    get { return hostFrametimeStdDeviation_; }
    set {
      hostFrametimeStdDeviation_ = value;
    }
  }

  /// <summary>Field number for the "host_computationtime" field.</summary>
  public const int HostComputationtimeFieldNumber = 4;
  private uint hostComputationtime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint HostComputationtime {
    get { return hostComputationtime_; }
    set {
      hostComputationtime_ = value;
    }
  }

  /// <summary>Field number for the "host_computationtime_std_deviation" field.</summary>
  public const int HostComputationtimeStdDeviationFieldNumber = 5;
  private uint hostComputationtimeStdDeviation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint HostComputationtimeStdDeviation {
    get { return hostComputationtimeStdDeviation_; }
    set {
      hostComputationtimeStdDeviation_ = value;
    }
  }

  /// <summary>Field number for the "host_framestarttime_std_deviation" field.</summary>
  public const int HostFramestarttimeStdDeviationFieldNumber = 6;
  private uint hostFramestarttimeStdDeviation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint HostFramestarttimeStdDeviation {
    get { return hostFramestarttimeStdDeviation_; }
    set {
      hostFramestarttimeStdDeviation_ = value;
    }
  }

  /// <summary>Field number for the "host_loss" field.</summary>
  public const int HostLossFieldNumber = 7;
  private uint hostLoss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint HostLoss {
    get { return hostLoss_; }
    set {
      hostLoss_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_Tick);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_Tick other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Tick != other.Tick) return false;
    if (HostFrametime != other.HostFrametime) return false;
    if (HostFrametimeStdDeviation != other.HostFrametimeStdDeviation) return false;
    if (HostComputationtime != other.HostComputationtime) return false;
    if (HostComputationtimeStdDeviation != other.HostComputationtimeStdDeviation) return false;
    if (HostFramestarttimeStdDeviation != other.HostFramestarttimeStdDeviation) return false;
    if (HostLoss != other.HostLoss) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Tick != 0) hash ^= Tick.GetHashCode();
    if (HostFrametime != 0) hash ^= HostFrametime.GetHashCode();
    if (HostFrametimeStdDeviation != 0) hash ^= HostFrametimeStdDeviation.GetHashCode();
    if (HostComputationtime != 0) hash ^= HostComputationtime.GetHashCode();
    if (HostComputationtimeStdDeviation != 0) hash ^= HostComputationtimeStdDeviation.GetHashCode();
    if (HostFramestarttimeStdDeviation != 0) hash ^= HostFramestarttimeStdDeviation.GetHashCode();
    if (HostLoss != 0) hash ^= HostLoss.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Tick != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Tick);
    }
    if (HostFrametime != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(HostFrametime);
    }
    if (HostFrametimeStdDeviation != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(HostFrametimeStdDeviation);
    }
    if (HostComputationtime != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(HostComputationtime);
    }
    if (HostComputationtimeStdDeviation != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(HostComputationtimeStdDeviation);
    }
    if (HostFramestarttimeStdDeviation != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(HostFramestarttimeStdDeviation);
    }
    if (HostLoss != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(HostLoss);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Tick != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tick);
    }
    if (HostFrametime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostFrametime);
    }
    if (HostFrametimeStdDeviation != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostFrametimeStdDeviation);
    }
    if (HostComputationtime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostComputationtime);
    }
    if (HostComputationtimeStdDeviation != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostComputationtimeStdDeviation);
    }
    if (HostFramestarttimeStdDeviation != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostFramestarttimeStdDeviation);
    }
    if (HostLoss != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HostLoss);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_Tick other) {
    if (other == null) {
      return;
    }
    if (other.Tick != 0) {
      Tick = other.Tick;
    }
    if (other.HostFrametime != 0) {
      HostFrametime = other.HostFrametime;
    }
    if (other.HostFrametimeStdDeviation != 0) {
      HostFrametimeStdDeviation = other.HostFrametimeStdDeviation;
    }
    if (other.HostComputationtime != 0) {
      HostComputationtime = other.HostComputationtime;
    }
    if (other.HostComputationtimeStdDeviation != 0) {
      HostComputationtimeStdDeviation = other.HostComputationtimeStdDeviation;
    }
    if (other.HostFramestarttimeStdDeviation != 0) {
      HostFramestarttimeStdDeviation = other.HostFramestarttimeStdDeviation;
    }
    if (other.HostLoss != 0) {
      HostLoss = other.HostLoss;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Tick = input.ReadUInt32();
          break;
        }
        case 16: {
          HostFrametime = input.ReadUInt32();
          break;
        }
        case 24: {
          HostFrametimeStdDeviation = input.ReadUInt32();
          break;
        }
        case 32: {
          HostComputationtime = input.ReadUInt32();
          break;
        }
        case 40: {
          HostComputationtimeStdDeviation = input.ReadUInt32();
          break;
        }
        case 48: {
          HostFramestarttimeStdDeviation = input.ReadUInt32();
          break;
        }
        case 56: {
          HostLoss = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_StringCmd : pb::IMessage<CNETMsg_StringCmd> {
  private static readonly pb::MessageParser<CNETMsg_StringCmd> _parser = new pb::MessageParser<CNETMsg_StringCmd>(() => new CNETMsg_StringCmd());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_StringCmd> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_StringCmd() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_StringCmd(CNETMsg_StringCmd other) : this() {
    command_ = other.command_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_StringCmd Clone() {
    return new CNETMsg_StringCmd(this);
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 1;
  private string command_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Command {
    get { return command_; }
    set {
      command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_StringCmd);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_StringCmd other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Command.Length != 0) hash ^= Command.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Command.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Command);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Command.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_StringCmd other) {
    if (other == null) {
      return;
    }
    if (other.Command.Length != 0) {
      Command = other.Command;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Command = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_SetConVar : pb::IMessage<CNETMsg_SetConVar> {
  private static readonly pb::MessageParser<CNETMsg_SetConVar> _parser = new pb::MessageParser<CNETMsg_SetConVar>(() => new CNETMsg_SetConVar());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SetConVar> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SetConVar() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SetConVar(CNETMsg_SetConVar other) : this() {
    convars_ = other.convars_ != null ? other.convars_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SetConVar Clone() {
    return new CNETMsg_SetConVar(this);
  }

  /// <summary>Field number for the "convars" field.</summary>
  public const int ConvarsFieldNumber = 1;
  private global::CMsg_CVars convars_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CMsg_CVars Convars {
    get { return convars_; }
    set {
      convars_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SetConVar);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SetConVar other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Convars, other.Convars)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (convars_ != null) hash ^= Convars.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (convars_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Convars);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (convars_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Convars);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SetConVar other) {
    if (other == null) {
      return;
    }
    if (other.convars_ != null) {
      if (convars_ == null) {
        convars_ = new global::CMsg_CVars();
      }
      Convars.MergeFrom(other.Convars);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (convars_ == null) {
            convars_ = new global::CMsg_CVars();
          }
          input.ReadMessage(convars_);
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_SignonState : pb::IMessage<CNETMsg_SignonState> {
  private static readonly pb::MessageParser<CNETMsg_SignonState> _parser = new pb::MessageParser<CNETMsg_SignonState>(() => new CNETMsg_SignonState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SignonState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SignonState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SignonState(CNETMsg_SignonState other) : this() {
    signonState_ = other.signonState_;
    spawnCount_ = other.spawnCount_;
    numServerPlayers_ = other.numServerPlayers_;
    playersNetworkids_ = other.playersNetworkids_.Clone();
    mapName_ = other.mapName_;
    addons_ = other.addons_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SignonState Clone() {
    return new CNETMsg_SignonState(this);
  }

  /// <summary>Field number for the "signon_state" field.</summary>
  public const int SignonStateFieldNumber = 1;
  private uint signonState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SignonState {
    get { return signonState_; }
    set {
      signonState_ = value;
    }
  }

  /// <summary>Field number for the "spawn_count" field.</summary>
  public const int SpawnCountFieldNumber = 2;
  private uint spawnCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpawnCount {
    get { return spawnCount_; }
    set {
      spawnCount_ = value;
    }
  }

  /// <summary>Field number for the "num_server_players" field.</summary>
  public const int NumServerPlayersFieldNumber = 3;
  private uint numServerPlayers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NumServerPlayers {
    get { return numServerPlayers_; }
    set {
      numServerPlayers_ = value;
    }
  }

  /// <summary>Field number for the "players_networkids" field.</summary>
  public const int PlayersNetworkidsFieldNumber = 4;
  private static readonly pb::FieldCodec<string> _repeated_playersNetworkids_codec
      = pb::FieldCodec.ForString(34);
  private readonly pbc::RepeatedField<string> playersNetworkids_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> PlayersNetworkids {
    get { return playersNetworkids_; }
  }

  /// <summary>Field number for the "map_name" field.</summary>
  public const int MapNameFieldNumber = 5;
  private string mapName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapName {
    get { return mapName_; }
    set {
      mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "addons" field.</summary>
  public const int AddonsFieldNumber = 6;
  private string addons_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Addons {
    get { return addons_; }
    set {
      addons_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SignonState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SignonState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SignonState != other.SignonState) return false;
    if (SpawnCount != other.SpawnCount) return false;
    if (NumServerPlayers != other.NumServerPlayers) return false;
    if(!playersNetworkids_.Equals(other.playersNetworkids_)) return false;
    if (MapName != other.MapName) return false;
    if (Addons != other.Addons) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SignonState != 0) hash ^= SignonState.GetHashCode();
    if (SpawnCount != 0) hash ^= SpawnCount.GetHashCode();
    if (NumServerPlayers != 0) hash ^= NumServerPlayers.GetHashCode();
    hash ^= playersNetworkids_.GetHashCode();
    if (MapName.Length != 0) hash ^= MapName.GetHashCode();
    if (Addons.Length != 0) hash ^= Addons.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SignonState != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(SignonState);
    }
    if (SpawnCount != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(SpawnCount);
    }
    if (NumServerPlayers != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(NumServerPlayers);
    }
    playersNetworkids_.WriteTo(output, _repeated_playersNetworkids_codec);
    if (MapName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(MapName);
    }
    if (Addons.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Addons);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SignonState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignonState);
    }
    if (SpawnCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnCount);
    }
    if (NumServerPlayers != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumServerPlayers);
    }
    size += playersNetworkids_.CalculateSize(_repeated_playersNetworkids_codec);
    if (MapName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
    }
    if (Addons.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Addons);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SignonState other) {
    if (other == null) {
      return;
    }
    if (other.SignonState != 0) {
      SignonState = other.SignonState;
    }
    if (other.SpawnCount != 0) {
      SpawnCount = other.SpawnCount;
    }
    if (other.NumServerPlayers != 0) {
      NumServerPlayers = other.NumServerPlayers;
    }
    playersNetworkids_.Add(other.playersNetworkids_);
    if (other.MapName.Length != 0) {
      MapName = other.MapName;
    }
    if (other.Addons.Length != 0) {
      Addons = other.Addons;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SignonState = input.ReadUInt32();
          break;
        }
        case 16: {
          SpawnCount = input.ReadUInt32();
          break;
        }
        case 24: {
          NumServerPlayers = input.ReadUInt32();
          break;
        }
        case 34: {
          playersNetworkids_.AddEntriesFrom(input, _repeated_playersNetworkids_codec);
          break;
        }
        case 42: {
          MapName = input.ReadString();
          break;
        }
        case 50: {
          Addons = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSVCMsg_GameEvent : pb::IMessage<CSVCMsg_GameEvent> {
  private static readonly pb::MessageParser<CSVCMsg_GameEvent> _parser = new pb::MessageParser<CSVCMsg_GameEvent>(() => new CSVCMsg_GameEvent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsg_GameEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_GameEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_GameEvent(CSVCMsg_GameEvent other) : this() {
    eventName_ = other.eventName_;
    eventid_ = other.eventid_;
    keys_ = other.keys_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_GameEvent Clone() {
    return new CSVCMsg_GameEvent(this);
  }

  /// <summary>Field number for the "event_name" field.</summary>
  public const int EventNameFieldNumber = 1;
  private string eventName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EventName {
    get { return eventName_; }
    set {
      eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "eventid" field.</summary>
  public const int EventidFieldNumber = 2;
  private int eventid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Eventid {
    get { return eventid_; }
    set {
      eventid_ = value;
    }
  }

  /// <summary>Field number for the "keys" field.</summary>
  public const int KeysFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CSVCMsg_GameEvent.Types.key_t> _repeated_keys_codec
      = pb::FieldCodec.ForMessage(26, global::CSVCMsg_GameEvent.Types.key_t.Parser);
  private readonly pbc::RepeatedField<global::CSVCMsg_GameEvent.Types.key_t> keys_ = new pbc::RepeatedField<global::CSVCMsg_GameEvent.Types.key_t>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CSVCMsg_GameEvent.Types.key_t> Keys {
    get { return keys_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsg_GameEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsg_GameEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventName != other.EventName) return false;
    if (Eventid != other.Eventid) return false;
    if(!keys_.Equals(other.keys_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventName.Length != 0) hash ^= EventName.GetHashCode();
    if (Eventid != 0) hash ^= Eventid.GetHashCode();
    hash ^= keys_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(EventName);
    }
    if (Eventid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Eventid);
    }
    keys_.WriteTo(output, _repeated_keys_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EventName);
    }
    if (Eventid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eventid);
    }
    size += keys_.CalculateSize(_repeated_keys_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsg_GameEvent other) {
    if (other == null) {
      return;
    }
    if (other.EventName.Length != 0) {
      EventName = other.EventName;
    }
    if (other.Eventid != 0) {
      Eventid = other.Eventid;
    }
    keys_.Add(other.keys_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EventName = input.ReadString();
          break;
        }
        case 16: {
          Eventid = input.ReadInt32();
          break;
        }
        case 26: {
          keys_.AddEntriesFrom(input, _repeated_keys_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CSVCMsg_GameEvent message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class key_t : pb::IMessage<key_t> {
      private static readonly pb::MessageParser<key_t> _parser = new pb::MessageParser<key_t>(() => new key_t());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<key_t> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CSVCMsg_GameEvent.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public key_t() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public key_t(key_t other) : this() {
        type_ = other.type_;
        valString_ = other.valString_;
        valFloat_ = other.valFloat_;
        valLong_ = other.valLong_;
        valShort_ = other.valShort_;
        valByte_ = other.valByte_;
        valBool_ = other.valBool_;
        valUint64_ = other.valUint64_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public key_t Clone() {
        return new key_t(this);
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 1;
      private int type_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Type {
        get { return type_; }
        set {
          type_ = value;
        }
      }

      /// <summary>Field number for the "val_string" field.</summary>
      public const int ValStringFieldNumber = 2;
      private string valString_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string ValString {
        get { return valString_; }
        set {
          valString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "val_float" field.</summary>
      public const int ValFloatFieldNumber = 3;
      private float valFloat_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float ValFloat {
        get { return valFloat_; }
        set {
          valFloat_ = value;
        }
      }

      /// <summary>Field number for the "val_long" field.</summary>
      public const int ValLongFieldNumber = 4;
      private int valLong_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ValLong {
        get { return valLong_; }
        set {
          valLong_ = value;
        }
      }

      /// <summary>Field number for the "val_short" field.</summary>
      public const int ValShortFieldNumber = 5;
      private int valShort_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ValShort {
        get { return valShort_; }
        set {
          valShort_ = value;
        }
      }

      /// <summary>Field number for the "val_byte" field.</summary>
      public const int ValByteFieldNumber = 6;
      private int valByte_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ValByte {
        get { return valByte_; }
        set {
          valByte_ = value;
        }
      }

      /// <summary>Field number for the "val_bool" field.</summary>
      public const int ValBoolFieldNumber = 7;
      private bool valBool_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool ValBool {
        get { return valBool_; }
        set {
          valBool_ = value;
        }
      }

      /// <summary>Field number for the "val_uint64" field.</summary>
      public const int ValUint64FieldNumber = 8;
      private ulong valUint64_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong ValUint64 {
        get { return valUint64_; }
        set {
          valUint64_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as key_t);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(key_t other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Type != other.Type) return false;
        if (ValString != other.ValString) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ValFloat, other.ValFloat)) return false;
        if (ValLong != other.ValLong) return false;
        if (ValShort != other.ValShort) return false;
        if (ValByte != other.ValByte) return false;
        if (ValBool != other.ValBool) return false;
        if (ValUint64 != other.ValUint64) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Type != 0) hash ^= Type.GetHashCode();
        if (ValString.Length != 0) hash ^= ValString.GetHashCode();
        if (ValFloat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ValFloat);
        if (ValLong != 0) hash ^= ValLong.GetHashCode();
        if (ValShort != 0) hash ^= ValShort.GetHashCode();
        if (ValByte != 0) hash ^= ValByte.GetHashCode();
        if (ValBool != false) hash ^= ValBool.GetHashCode();
        if (ValUint64 != 0UL) hash ^= ValUint64.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Type != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Type);
        }
        if (ValString.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(ValString);
        }
        if (ValFloat != 0F) {
          output.WriteRawTag(29);
          output.WriteFloat(ValFloat);
        }
        if (ValLong != 0) {
          output.WriteRawTag(32);
          output.WriteInt32(ValLong);
        }
        if (ValShort != 0) {
          output.WriteRawTag(40);
          output.WriteInt32(ValShort);
        }
        if (ValByte != 0) {
          output.WriteRawTag(48);
          output.WriteInt32(ValByte);
        }
        if (ValBool != false) {
          output.WriteRawTag(56);
          output.WriteBool(ValBool);
        }
        if (ValUint64 != 0UL) {
          output.WriteRawTag(64);
          output.WriteUInt64(ValUint64);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Type != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
        }
        if (ValString.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(ValString);
        }
        if (ValFloat != 0F) {
          size += 1 + 4;
        }
        if (ValLong != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValLong);
        }
        if (ValShort != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValShort);
        }
        if (ValByte != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValByte);
        }
        if (ValBool != false) {
          size += 1 + 1;
        }
        if (ValUint64 != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ValUint64);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(key_t other) {
        if (other == null) {
          return;
        }
        if (other.Type != 0) {
          Type = other.Type;
        }
        if (other.ValString.Length != 0) {
          ValString = other.ValString;
        }
        if (other.ValFloat != 0F) {
          ValFloat = other.ValFloat;
        }
        if (other.ValLong != 0) {
          ValLong = other.ValLong;
        }
        if (other.ValShort != 0) {
          ValShort = other.ValShort;
        }
        if (other.ValByte != 0) {
          ValByte = other.ValByte;
        }
        if (other.ValBool != false) {
          ValBool = other.ValBool;
        }
        if (other.ValUint64 != 0UL) {
          ValUint64 = other.ValUint64;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Type = input.ReadInt32();
              break;
            }
            case 18: {
              ValString = input.ReadString();
              break;
            }
            case 29: {
              ValFloat = input.ReadFloat();
              break;
            }
            case 32: {
              ValLong = input.ReadInt32();
              break;
            }
            case 40: {
              ValShort = input.ReadInt32();
              break;
            }
            case 48: {
              ValByte = input.ReadInt32();
              break;
            }
            case 56: {
              ValBool = input.ReadBool();
              break;
            }
            case 64: {
              ValUint64 = input.ReadUInt64();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class CSVCMsgList_GameEvents : pb::IMessage<CSVCMsgList_GameEvents> {
  private static readonly pb::MessageParser<CSVCMsgList_GameEvents> _parser = new pb::MessageParser<CSVCMsgList_GameEvents>(() => new CSVCMsgList_GameEvents());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsgList_GameEvents> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsgList_GameEvents() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsgList_GameEvents(CSVCMsgList_GameEvents other) : this() {
    events_ = other.events_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsgList_GameEvents Clone() {
    return new CSVCMsgList_GameEvents(this);
  }

  /// <summary>Field number for the "events" field.</summary>
  public const int EventsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CSVCMsgList_GameEvents.Types.event_t> _repeated_events_codec
      = pb::FieldCodec.ForMessage(10, global::CSVCMsgList_GameEvents.Types.event_t.Parser);
  private readonly pbc::RepeatedField<global::CSVCMsgList_GameEvents.Types.event_t> events_ = new pbc::RepeatedField<global::CSVCMsgList_GameEvents.Types.event_t>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CSVCMsgList_GameEvents.Types.event_t> Events {
    get { return events_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsgList_GameEvents);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsgList_GameEvents other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!events_.Equals(other.events_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= events_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    events_.WriteTo(output, _repeated_events_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += events_.CalculateSize(_repeated_events_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsgList_GameEvents other) {
    if (other == null) {
      return;
    }
    events_.Add(other.events_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          events_.AddEntriesFrom(input, _repeated_events_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CSVCMsgList_GameEvents message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class event_t : pb::IMessage<event_t> {
      private static readonly pb::MessageParser<event_t> _parser = new pb::MessageParser<event_t>(() => new event_t());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<event_t> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CSVCMsgList_GameEvents.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public event_t() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public event_t(event_t other) : this() {
        tick_ = other.tick_;
        event_ = other.event_ != null ? other.event_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public event_t Clone() {
        return new event_t(this);
      }

      /// <summary>Field number for the "tick" field.</summary>
      public const int TickFieldNumber = 1;
      private int tick_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Tick {
        get { return tick_; }
        set {
          tick_ = value;
        }
      }

      /// <summary>Field number for the "event" field.</summary>
      public const int EventFieldNumber = 2;
      private global::CSVCMsg_GameEvent event_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::CSVCMsg_GameEvent Event {
        get { return event_; }
        set {
          event_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as event_t);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(event_t other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Tick != other.Tick) return false;
        if (!object.Equals(Event, other.Event)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Tick != 0) hash ^= Tick.GetHashCode();
        if (event_ != null) hash ^= Event.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Tick != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Tick);
        }
        if (event_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Event);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Tick != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
        }
        if (event_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(event_t other) {
        if (other == null) {
          return;
        }
        if (other.Tick != 0) {
          Tick = other.Tick;
        }
        if (other.event_ != null) {
          if (event_ == null) {
            event_ = new global::CSVCMsg_GameEvent();
          }
          Event.MergeFrom(other.Event);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Tick = input.ReadInt32();
              break;
            }
            case 18: {
              if (event_ == null) {
                event_ = new global::CSVCMsg_GameEvent();
              }
              input.ReadMessage(event_);
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class CSVCMsg_UserMessage : pb::IMessage<CSVCMsg_UserMessage> {
  private static readonly pb::MessageParser<CSVCMsg_UserMessage> _parser = new pb::MessageParser<CSVCMsg_UserMessage>(() => new CSVCMsg_UserMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsg_UserMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_UserMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_UserMessage(CSVCMsg_UserMessage other) : this() {
    msgType_ = other.msgType_;
    msgData_ = other.msgData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_UserMessage Clone() {
    return new CSVCMsg_UserMessage(this);
  }

  /// <summary>Field number for the "msg_type" field.</summary>
  public const int MsgTypeFieldNumber = 1;
  private int msgType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MsgType {
    get { return msgType_; }
    set {
      msgType_ = value;
    }
  }

  /// <summary>Field number for the "msg_data" field.</summary>
  public const int MsgDataFieldNumber = 2;
  private pb::ByteString msgData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString MsgData {
    get { return msgData_; }
    set {
      msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsg_UserMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsg_UserMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MsgType != other.MsgType) return false;
    if (MsgData != other.MsgData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MsgType != 0) hash ^= MsgType.GetHashCode();
    if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MsgType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MsgType);
    }
    if (MsgData.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(MsgData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MsgType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
    }
    if (MsgData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsg_UserMessage other) {
    if (other == null) {
      return;
    }
    if (other.MsgType != 0) {
      MsgType = other.MsgType;
    }
    if (other.MsgData.Length != 0) {
      MsgData = other.MsgData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MsgType = input.ReadInt32();
          break;
        }
        case 18: {
          MsgData = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CSVCMsgList_UserMessages : pb::IMessage<CSVCMsgList_UserMessages> {
  private static readonly pb::MessageParser<CSVCMsgList_UserMessages> _parser = new pb::MessageParser<CSVCMsgList_UserMessages>(() => new CSVCMsgList_UserMessages());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsgList_UserMessages> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsgList_UserMessages() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsgList_UserMessages(CSVCMsgList_UserMessages other) : this() {
    usermsgs_ = other.usermsgs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsgList_UserMessages Clone() {
    return new CSVCMsgList_UserMessages(this);
  }

  /// <summary>Field number for the "usermsgs" field.</summary>
  public const int UsermsgsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CSVCMsgList_UserMessages.Types.usermsg_t> _repeated_usermsgs_codec
      = pb::FieldCodec.ForMessage(10, global::CSVCMsgList_UserMessages.Types.usermsg_t.Parser);
  private readonly pbc::RepeatedField<global::CSVCMsgList_UserMessages.Types.usermsg_t> usermsgs_ = new pbc::RepeatedField<global::CSVCMsgList_UserMessages.Types.usermsg_t>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CSVCMsgList_UserMessages.Types.usermsg_t> Usermsgs {
    get { return usermsgs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsgList_UserMessages);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsgList_UserMessages other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!usermsgs_.Equals(other.usermsgs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= usermsgs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    usermsgs_.WriteTo(output, _repeated_usermsgs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += usermsgs_.CalculateSize(_repeated_usermsgs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsgList_UserMessages other) {
    if (other == null) {
      return;
    }
    usermsgs_.Add(other.usermsgs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          usermsgs_.AddEntriesFrom(input, _repeated_usermsgs_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CSVCMsgList_UserMessages message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class usermsg_t : pb::IMessage<usermsg_t> {
      private static readonly pb::MessageParser<usermsg_t> _parser = new pb::MessageParser<usermsg_t>(() => new usermsg_t());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<usermsg_t> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CSVCMsgList_UserMessages.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public usermsg_t() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public usermsg_t(usermsg_t other) : this() {
        tick_ = other.tick_;
        msg_ = other.msg_ != null ? other.msg_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public usermsg_t Clone() {
        return new usermsg_t(this);
      }

      /// <summary>Field number for the "tick" field.</summary>
      public const int TickFieldNumber = 1;
      private int tick_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Tick {
        get { return tick_; }
        set {
          tick_ = value;
        }
      }

      /// <summary>Field number for the "msg" field.</summary>
      public const int MsgFieldNumber = 2;
      private global::CSVCMsg_UserMessage msg_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::CSVCMsg_UserMessage Msg {
        get { return msg_; }
        set {
          msg_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as usermsg_t);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(usermsg_t other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Tick != other.Tick) return false;
        if (!object.Equals(Msg, other.Msg)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Tick != 0) hash ^= Tick.GetHashCode();
        if (msg_ != null) hash ^= Msg.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Tick != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Tick);
        }
        if (msg_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Msg);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Tick != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
        }
        if (msg_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(usermsg_t other) {
        if (other == null) {
          return;
        }
        if (other.Tick != 0) {
          Tick = other.Tick;
        }
        if (other.msg_ != null) {
          if (msg_ == null) {
            msg_ = new global::CSVCMsg_UserMessage();
          }
          Msg.MergeFrom(other.Msg);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Tick = input.ReadInt32();
              break;
            }
            case 18: {
              if (msg_ == null) {
                msg_ = new global::CSVCMsg_UserMessage();
              }
              input.ReadMessage(msg_);
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class CNETMsg_SpawnGroup_Load : pb::IMessage<CNETMsg_SpawnGroup_Load> {
  private static readonly pb::MessageParser<CNETMsg_SpawnGroup_Load> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_Load>(() => new CNETMsg_SpawnGroup_Load());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SpawnGroup_Load> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_Load() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_Load(CNETMsg_SpawnGroup_Load other) : this() {
    worldname_ = other.worldname_;
    entitylumpname_ = other.entitylumpname_;
    entityfiltername_ = other.entityfiltername_;
    spawngrouphandle_ = other.spawngrouphandle_;
    spawngroupownerhandle_ = other.spawngroupownerhandle_;
    worldOffsetPos_ = other.worldOffsetPos_ != null ? other.worldOffsetPos_.Clone() : null;
    worldOffsetAngle_ = other.worldOffsetAngle_ != null ? other.worldOffsetAngle_.Clone() : null;
    spawngroupmanifest_ = other.spawngroupmanifest_;
    flags_ = other.flags_;
    tickcount_ = other.tickcount_;
    manifestincomplete_ = other.manifestincomplete_;
    localnamefixup_ = other.localnamefixup_;
    parentnamefixup_ = other.parentnamefixup_;
    manifestloadpriority_ = other.manifestloadpriority_;
    worldgroupid_ = other.worldgroupid_;
    creationsequence_ = other.creationsequence_;
    savegamefilename_ = other.savegamefilename_;
    spawngroupparenthandle_ = other.spawngroupparenthandle_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_Load Clone() {
    return new CNETMsg_SpawnGroup_Load(this);
  }

  /// <summary>Field number for the "worldname" field.</summary>
  public const int WorldnameFieldNumber = 1;
  private string worldname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Worldname {
    get { return worldname_; }
    set {
      worldname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "entitylumpname" field.</summary>
  public const int EntitylumpnameFieldNumber = 2;
  private string entitylumpname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Entitylumpname {
    get { return entitylumpname_; }
    set {
      entitylumpname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "entityfiltername" field.</summary>
  public const int EntityfilternameFieldNumber = 3;
  private string entityfiltername_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Entityfiltername {
    get { return entityfiltername_; }
    set {
      entityfiltername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "spawngrouphandle" field.</summary>
  public const int SpawngrouphandleFieldNumber = 4;
  private uint spawngrouphandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Spawngrouphandle {
    get { return spawngrouphandle_; }
    set {
      spawngrouphandle_ = value;
    }
  }

  /// <summary>Field number for the "spawngroupownerhandle" field.</summary>
  public const int SpawngroupownerhandleFieldNumber = 5;
  private uint spawngroupownerhandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Spawngroupownerhandle {
    get { return spawngroupownerhandle_; }
    set {
      spawngroupownerhandle_ = value;
    }
  }

  /// <summary>Field number for the "world_offset_pos" field.</summary>
  public const int WorldOffsetPosFieldNumber = 6;
  private global::CMsgVector worldOffsetPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CMsgVector WorldOffsetPos {
    get { return worldOffsetPos_; }
    set {
      worldOffsetPos_ = value;
    }
  }

  /// <summary>Field number for the "world_offset_angle" field.</summary>
  public const int WorldOffsetAngleFieldNumber = 7;
  private global::CMsgQAngle worldOffsetAngle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CMsgQAngle WorldOffsetAngle {
    get { return worldOffsetAngle_; }
    set {
      worldOffsetAngle_ = value;
    }
  }

  /// <summary>Field number for the "spawngroupmanifest" field.</summary>
  public const int SpawngroupmanifestFieldNumber = 8;
  private pb::ByteString spawngroupmanifest_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Spawngroupmanifest {
    get { return spawngroupmanifest_; }
    set {
      spawngroupmanifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 9;
  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Flags {
    get { return flags_; }
    set {
      flags_ = value;
    }
  }

  /// <summary>Field number for the "tickcount" field.</summary>
  public const int TickcountFieldNumber = 10;
  private int tickcount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tickcount {
    get { return tickcount_; }
    set {
      tickcount_ = value;
    }
  }

  /// <summary>Field number for the "manifestincomplete" field.</summary>
  public const int ManifestincompleteFieldNumber = 11;
  private bool manifestincomplete_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Manifestincomplete {
    get { return manifestincomplete_; }
    set {
      manifestincomplete_ = value;
    }
  }

  /// <summary>Field number for the "localnamefixup" field.</summary>
  public const int LocalnamefixupFieldNumber = 12;
  private string localnamefixup_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Localnamefixup {
    get { return localnamefixup_; }
    set {
      localnamefixup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "parentnamefixup" field.</summary>
  public const int ParentnamefixupFieldNumber = 13;
  private string parentnamefixup_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Parentnamefixup {
    get { return parentnamefixup_; }
    set {
      parentnamefixup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "manifestloadpriority" field.</summary>
  public const int ManifestloadpriorityFieldNumber = 14;
  private int manifestloadpriority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Manifestloadpriority {
    get { return manifestloadpriority_; }
    set {
      manifestloadpriority_ = value;
    }
  }

  /// <summary>Field number for the "worldgroupid" field.</summary>
  public const int WorldgroupidFieldNumber = 15;
  private uint worldgroupid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Worldgroupid {
    get { return worldgroupid_; }
    set {
      worldgroupid_ = value;
    }
  }

  /// <summary>Field number for the "creationsequence" field.</summary>
  public const int CreationsequenceFieldNumber = 16;
  private uint creationsequence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Creationsequence {
    get { return creationsequence_; }
    set {
      creationsequence_ = value;
    }
  }

  /// <summary>Field number for the "savegamefilename" field.</summary>
  public const int SavegamefilenameFieldNumber = 17;
  private string savegamefilename_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Savegamefilename {
    get { return savegamefilename_; }
    set {
      savegamefilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "spawngroupparenthandle" field.</summary>
  public const int SpawngroupparenthandleFieldNumber = 18;
  private uint spawngroupparenthandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Spawngroupparenthandle {
    get { return spawngroupparenthandle_; }
    set {
      spawngroupparenthandle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SpawnGroup_Load);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SpawnGroup_Load other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Worldname != other.Worldname) return false;
    if (Entitylumpname != other.Entitylumpname) return false;
    if (Entityfiltername != other.Entityfiltername) return false;
    if (Spawngrouphandle != other.Spawngrouphandle) return false;
    if (Spawngroupownerhandle != other.Spawngroupownerhandle) return false;
    if (!object.Equals(WorldOffsetPos, other.WorldOffsetPos)) return false;
    if (!object.Equals(WorldOffsetAngle, other.WorldOffsetAngle)) return false;
    if (Spawngroupmanifest != other.Spawngroupmanifest) return false;
    if (Flags != other.Flags) return false;
    if (Tickcount != other.Tickcount) return false;
    if (Manifestincomplete != other.Manifestincomplete) return false;
    if (Localnamefixup != other.Localnamefixup) return false;
    if (Parentnamefixup != other.Parentnamefixup) return false;
    if (Manifestloadpriority != other.Manifestloadpriority) return false;
    if (Worldgroupid != other.Worldgroupid) return false;
    if (Creationsequence != other.Creationsequence) return false;
    if (Savegamefilename != other.Savegamefilename) return false;
    if (Spawngroupparenthandle != other.Spawngroupparenthandle) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Worldname.Length != 0) hash ^= Worldname.GetHashCode();
    if (Entitylumpname.Length != 0) hash ^= Entitylumpname.GetHashCode();
    if (Entityfiltername.Length != 0) hash ^= Entityfiltername.GetHashCode();
    if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
    if (Spawngroupownerhandle != 0) hash ^= Spawngroupownerhandle.GetHashCode();
    if (worldOffsetPos_ != null) hash ^= WorldOffsetPos.GetHashCode();
    if (worldOffsetAngle_ != null) hash ^= WorldOffsetAngle.GetHashCode();
    if (Spawngroupmanifest.Length != 0) hash ^= Spawngroupmanifest.GetHashCode();
    if (Flags != 0) hash ^= Flags.GetHashCode();
    if (Tickcount != 0) hash ^= Tickcount.GetHashCode();
    if (Manifestincomplete != false) hash ^= Manifestincomplete.GetHashCode();
    if (Localnamefixup.Length != 0) hash ^= Localnamefixup.GetHashCode();
    if (Parentnamefixup.Length != 0) hash ^= Parentnamefixup.GetHashCode();
    if (Manifestloadpriority != 0) hash ^= Manifestloadpriority.GetHashCode();
    if (Worldgroupid != 0) hash ^= Worldgroupid.GetHashCode();
    if (Creationsequence != 0) hash ^= Creationsequence.GetHashCode();
    if (Savegamefilename.Length != 0) hash ^= Savegamefilename.GetHashCode();
    if (Spawngroupparenthandle != 0) hash ^= Spawngroupparenthandle.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Worldname.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Worldname);
    }
    if (Entitylumpname.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Entitylumpname);
    }
    if (Entityfiltername.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Entityfiltername);
    }
    if (Spawngrouphandle != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Spawngrouphandle);
    }
    if (Spawngroupownerhandle != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Spawngroupownerhandle);
    }
    if (worldOffsetPos_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(WorldOffsetPos);
    }
    if (worldOffsetAngle_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(WorldOffsetAngle);
    }
    if (Spawngroupmanifest.Length != 0) {
      output.WriteRawTag(66);
      output.WriteBytes(Spawngroupmanifest);
    }
    if (Flags != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(Flags);
    }
    if (Tickcount != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Tickcount);
    }
    if (Manifestincomplete != false) {
      output.WriteRawTag(88);
      output.WriteBool(Manifestincomplete);
    }
    if (Localnamefixup.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Localnamefixup);
    }
    if (Parentnamefixup.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(Parentnamefixup);
    }
    if (Manifestloadpriority != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(Manifestloadpriority);
    }
    if (Worldgroupid != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(Worldgroupid);
    }
    if (Creationsequence != 0) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(Creationsequence);
    }
    if (Savegamefilename.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(Savegamefilename);
    }
    if (Spawngroupparenthandle != 0) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(Spawngroupparenthandle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Worldname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Worldname);
    }
    if (Entitylumpname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Entitylumpname);
    }
    if (Entityfiltername.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Entityfiltername);
    }
    if (Spawngrouphandle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
    }
    if (Spawngroupownerhandle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngroupownerhandle);
    }
    if (worldOffsetPos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldOffsetPos);
    }
    if (worldOffsetAngle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldOffsetAngle);
    }
    if (Spawngroupmanifest.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Spawngroupmanifest);
    }
    if (Flags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (Tickcount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tickcount);
    }
    if (Manifestincomplete != false) {
      size += 1 + 1;
    }
    if (Localnamefixup.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Localnamefixup);
    }
    if (Parentnamefixup.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Parentnamefixup);
    }
    if (Manifestloadpriority != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Manifestloadpriority);
    }
    if (Worldgroupid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Worldgroupid);
    }
    if (Creationsequence != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Creationsequence);
    }
    if (Savegamefilename.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Savegamefilename);
    }
    if (Spawngroupparenthandle != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Spawngroupparenthandle);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SpawnGroup_Load other) {
    if (other == null) {
      return;
    }
    if (other.Worldname.Length != 0) {
      Worldname = other.Worldname;
    }
    if (other.Entitylumpname.Length != 0) {
      Entitylumpname = other.Entitylumpname;
    }
    if (other.Entityfiltername.Length != 0) {
      Entityfiltername = other.Entityfiltername;
    }
    if (other.Spawngrouphandle != 0) {
      Spawngrouphandle = other.Spawngrouphandle;
    }
    if (other.Spawngroupownerhandle != 0) {
      Spawngroupownerhandle = other.Spawngroupownerhandle;
    }
    if (other.worldOffsetPos_ != null) {
      if (worldOffsetPos_ == null) {
        worldOffsetPos_ = new global::CMsgVector();
      }
      WorldOffsetPos.MergeFrom(other.WorldOffsetPos);
    }
    if (other.worldOffsetAngle_ != null) {
      if (worldOffsetAngle_ == null) {
        worldOffsetAngle_ = new global::CMsgQAngle();
      }
      WorldOffsetAngle.MergeFrom(other.WorldOffsetAngle);
    }
    if (other.Spawngroupmanifest.Length != 0) {
      Spawngroupmanifest = other.Spawngroupmanifest;
    }
    if (other.Flags != 0) {
      Flags = other.Flags;
    }
    if (other.Tickcount != 0) {
      Tickcount = other.Tickcount;
    }
    if (other.Manifestincomplete != false) {
      Manifestincomplete = other.Manifestincomplete;
    }
    if (other.Localnamefixup.Length != 0) {
      Localnamefixup = other.Localnamefixup;
    }
    if (other.Parentnamefixup.Length != 0) {
      Parentnamefixup = other.Parentnamefixup;
    }
    if (other.Manifestloadpriority != 0) {
      Manifestloadpriority = other.Manifestloadpriority;
    }
    if (other.Worldgroupid != 0) {
      Worldgroupid = other.Worldgroupid;
    }
    if (other.Creationsequence != 0) {
      Creationsequence = other.Creationsequence;
    }
    if (other.Savegamefilename.Length != 0) {
      Savegamefilename = other.Savegamefilename;
    }
    if (other.Spawngroupparenthandle != 0) {
      Spawngroupparenthandle = other.Spawngroupparenthandle;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Worldname = input.ReadString();
          break;
        }
        case 18: {
          Entitylumpname = input.ReadString();
          break;
        }
        case 26: {
          Entityfiltername = input.ReadString();
          break;
        }
        case 32: {
          Spawngrouphandle = input.ReadUInt32();
          break;
        }
        case 40: {
          Spawngroupownerhandle = input.ReadUInt32();
          break;
        }
        case 50: {
          if (worldOffsetPos_ == null) {
            worldOffsetPos_ = new global::CMsgVector();
          }
          input.ReadMessage(worldOffsetPos_);
          break;
        }
        case 58: {
          if (worldOffsetAngle_ == null) {
            worldOffsetAngle_ = new global::CMsgQAngle();
          }
          input.ReadMessage(worldOffsetAngle_);
          break;
        }
        case 66: {
          Spawngroupmanifest = input.ReadBytes();
          break;
        }
        case 72: {
          Flags = input.ReadUInt32();
          break;
        }
        case 80: {
          Tickcount = input.ReadInt32();
          break;
        }
        case 88: {
          Manifestincomplete = input.ReadBool();
          break;
        }
        case 98: {
          Localnamefixup = input.ReadString();
          break;
        }
        case 106: {
          Parentnamefixup = input.ReadString();
          break;
        }
        case 112: {
          Manifestloadpriority = input.ReadInt32();
          break;
        }
        case 120: {
          Worldgroupid = input.ReadUInt32();
          break;
        }
        case 128: {
          Creationsequence = input.ReadUInt32();
          break;
        }
        case 138: {
          Savegamefilename = input.ReadString();
          break;
        }
        case 144: {
          Spawngroupparenthandle = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_SpawnGroup_ManifestUpdate : pb::IMessage<CNETMsg_SpawnGroup_ManifestUpdate> {
  private static readonly pb::MessageParser<CNETMsg_SpawnGroup_ManifestUpdate> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_ManifestUpdate>(() => new CNETMsg_SpawnGroup_ManifestUpdate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SpawnGroup_ManifestUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_ManifestUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_ManifestUpdate(CNETMsg_SpawnGroup_ManifestUpdate other) : this() {
    spawngrouphandle_ = other.spawngrouphandle_;
    spawngroupmanifest_ = other.spawngroupmanifest_;
    manifestincomplete_ = other.manifestincomplete_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_ManifestUpdate Clone() {
    return new CNETMsg_SpawnGroup_ManifestUpdate(this);
  }

  /// <summary>Field number for the "spawngrouphandle" field.</summary>
  public const int SpawngrouphandleFieldNumber = 1;
  private uint spawngrouphandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Spawngrouphandle {
    get { return spawngrouphandle_; }
    set {
      spawngrouphandle_ = value;
    }
  }

  /// <summary>Field number for the "spawngroupmanifest" field.</summary>
  public const int SpawngroupmanifestFieldNumber = 2;
  private pb::ByteString spawngroupmanifest_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Spawngroupmanifest {
    get { return spawngroupmanifest_; }
    set {
      spawngroupmanifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "manifestincomplete" field.</summary>
  public const int ManifestincompleteFieldNumber = 3;
  private bool manifestincomplete_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Manifestincomplete {
    get { return manifestincomplete_; }
    set {
      manifestincomplete_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SpawnGroup_ManifestUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SpawnGroup_ManifestUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Spawngrouphandle != other.Spawngrouphandle) return false;
    if (Spawngroupmanifest != other.Spawngroupmanifest) return false;
    if (Manifestincomplete != other.Manifestincomplete) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
    if (Spawngroupmanifest.Length != 0) hash ^= Spawngroupmanifest.GetHashCode();
    if (Manifestincomplete != false) hash ^= Manifestincomplete.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Spawngrouphandle != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Spawngrouphandle);
    }
    if (Spawngroupmanifest.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Spawngroupmanifest);
    }
    if (Manifestincomplete != false) {
      output.WriteRawTag(24);
      output.WriteBool(Manifestincomplete);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Spawngrouphandle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
    }
    if (Spawngroupmanifest.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Spawngroupmanifest);
    }
    if (Manifestincomplete != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SpawnGroup_ManifestUpdate other) {
    if (other == null) {
      return;
    }
    if (other.Spawngrouphandle != 0) {
      Spawngrouphandle = other.Spawngrouphandle;
    }
    if (other.Spawngroupmanifest.Length != 0) {
      Spawngroupmanifest = other.Spawngroupmanifest;
    }
    if (other.Manifestincomplete != false) {
      Manifestincomplete = other.Manifestincomplete;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Spawngrouphandle = input.ReadUInt32();
          break;
        }
        case 18: {
          Spawngroupmanifest = input.ReadBytes();
          break;
        }
        case 24: {
          Manifestincomplete = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_SpawnGroup_SetCreationTick : pb::IMessage<CNETMsg_SpawnGroup_SetCreationTick> {
  private static readonly pb::MessageParser<CNETMsg_SpawnGroup_SetCreationTick> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_SetCreationTick>(() => new CNETMsg_SpawnGroup_SetCreationTick());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SpawnGroup_SetCreationTick> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_SetCreationTick() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_SetCreationTick(CNETMsg_SpawnGroup_SetCreationTick other) : this() {
    spawngrouphandle_ = other.spawngrouphandle_;
    tickcount_ = other.tickcount_;
    creationsequence_ = other.creationsequence_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_SetCreationTick Clone() {
    return new CNETMsg_SpawnGroup_SetCreationTick(this);
  }

  /// <summary>Field number for the "spawngrouphandle" field.</summary>
  public const int SpawngrouphandleFieldNumber = 1;
  private uint spawngrouphandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Spawngrouphandle {
    get { return spawngrouphandle_; }
    set {
      spawngrouphandle_ = value;
    }
  }

  /// <summary>Field number for the "tickcount" field.</summary>
  public const int TickcountFieldNumber = 2;
  private int tickcount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tickcount {
    get { return tickcount_; }
    set {
      tickcount_ = value;
    }
  }

  /// <summary>Field number for the "creationsequence" field.</summary>
  public const int CreationsequenceFieldNumber = 3;
  private uint creationsequence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Creationsequence {
    get { return creationsequence_; }
    set {
      creationsequence_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SpawnGroup_SetCreationTick);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SpawnGroup_SetCreationTick other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Spawngrouphandle != other.Spawngrouphandle) return false;
    if (Tickcount != other.Tickcount) return false;
    if (Creationsequence != other.Creationsequence) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
    if (Tickcount != 0) hash ^= Tickcount.GetHashCode();
    if (Creationsequence != 0) hash ^= Creationsequence.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Spawngrouphandle != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Spawngrouphandle);
    }
    if (Tickcount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Tickcount);
    }
    if (Creationsequence != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Creationsequence);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Spawngrouphandle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
    }
    if (Tickcount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tickcount);
    }
    if (Creationsequence != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Creationsequence);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SpawnGroup_SetCreationTick other) {
    if (other == null) {
      return;
    }
    if (other.Spawngrouphandle != 0) {
      Spawngrouphandle = other.Spawngrouphandle;
    }
    if (other.Tickcount != 0) {
      Tickcount = other.Tickcount;
    }
    if (other.Creationsequence != 0) {
      Creationsequence = other.Creationsequence;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Spawngrouphandle = input.ReadUInt32();
          break;
        }
        case 16: {
          Tickcount = input.ReadInt32();
          break;
        }
        case 24: {
          Creationsequence = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_SpawnGroup_Unload : pb::IMessage<CNETMsg_SpawnGroup_Unload> {
  private static readonly pb::MessageParser<CNETMsg_SpawnGroup_Unload> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_Unload>(() => new CNETMsg_SpawnGroup_Unload());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SpawnGroup_Unload> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_Unload() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_Unload(CNETMsg_SpawnGroup_Unload other) : this() {
    spawngrouphandle_ = other.spawngrouphandle_;
    flags_ = other.flags_;
    tickcount_ = other.tickcount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_Unload Clone() {
    return new CNETMsg_SpawnGroup_Unload(this);
  }

  /// <summary>Field number for the "spawngrouphandle" field.</summary>
  public const int SpawngrouphandleFieldNumber = 1;
  private uint spawngrouphandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Spawngrouphandle {
    get { return spawngrouphandle_; }
    set {
      spawngrouphandle_ = value;
    }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 2;
  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Flags {
    get { return flags_; }
    set {
      flags_ = value;
    }
  }

  /// <summary>Field number for the "tickcount" field.</summary>
  public const int TickcountFieldNumber = 3;
  private int tickcount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tickcount {
    get { return tickcount_; }
    set {
      tickcount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SpawnGroup_Unload);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SpawnGroup_Unload other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Spawngrouphandle != other.Spawngrouphandle) return false;
    if (Flags != other.Flags) return false;
    if (Tickcount != other.Tickcount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
    if (Flags != 0) hash ^= Flags.GetHashCode();
    if (Tickcount != 0) hash ^= Tickcount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Spawngrouphandle != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Spawngrouphandle);
    }
    if (Flags != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Flags);
    }
    if (Tickcount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Tickcount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Spawngrouphandle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
    }
    if (Flags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (Tickcount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tickcount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SpawnGroup_Unload other) {
    if (other == null) {
      return;
    }
    if (other.Spawngrouphandle != 0) {
      Spawngrouphandle = other.Spawngrouphandle;
    }
    if (other.Flags != 0) {
      Flags = other.Flags;
    }
    if (other.Tickcount != 0) {
      Tickcount = other.Tickcount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Spawngrouphandle = input.ReadUInt32();
          break;
        }
        case 16: {
          Flags = input.ReadUInt32();
          break;
        }
        case 24: {
          Tickcount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CNETMsg_SpawnGroup_LoadCompleted : pb::IMessage<CNETMsg_SpawnGroup_LoadCompleted> {
  private static readonly pb::MessageParser<CNETMsg_SpawnGroup_LoadCompleted> _parser = new pb::MessageParser<CNETMsg_SpawnGroup_LoadCompleted>(() => new CNETMsg_SpawnGroup_LoadCompleted());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CNETMsg_SpawnGroup_LoadCompleted> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_LoadCompleted() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_LoadCompleted(CNETMsg_SpawnGroup_LoadCompleted other) : this() {
    spawngrouphandle_ = other.spawngrouphandle_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CNETMsg_SpawnGroup_LoadCompleted Clone() {
    return new CNETMsg_SpawnGroup_LoadCompleted(this);
  }

  /// <summary>Field number for the "spawngrouphandle" field.</summary>
  public const int SpawngrouphandleFieldNumber = 1;
  private uint spawngrouphandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Spawngrouphandle {
    get { return spawngrouphandle_; }
    set {
      spawngrouphandle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CNETMsg_SpawnGroup_LoadCompleted);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CNETMsg_SpawnGroup_LoadCompleted other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Spawngrouphandle != other.Spawngrouphandle) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Spawngrouphandle != 0) hash ^= Spawngrouphandle.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Spawngrouphandle != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Spawngrouphandle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Spawngrouphandle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Spawngrouphandle);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CNETMsg_SpawnGroup_LoadCompleted other) {
    if (other == null) {
      return;
    }
    if (other.Spawngrouphandle != 0) {
      Spawngrouphandle = other.Spawngrouphandle;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Spawngrouphandle = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSVCMsg_GameSessionConfiguration : pb::IMessage<CSVCMsg_GameSessionConfiguration> {
  private static readonly pb::MessageParser<CSVCMsg_GameSessionConfiguration> _parser = new pb::MessageParser<CSVCMsg_GameSessionConfiguration>(() => new CSVCMsg_GameSessionConfiguration());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsg_GameSessionConfiguration> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkbasetypesReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_GameSessionConfiguration() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_GameSessionConfiguration(CSVCMsg_GameSessionConfiguration other) : this() {
    isMultiplayer_ = other.isMultiplayer_;
    isLoadsavegame_ = other.isLoadsavegame_;
    isBackgroundMap_ = other.isBackgroundMap_;
    isHeadless_ = other.isHeadless_;
    minClientLimit_ = other.minClientLimit_;
    maxClientLimit_ = other.maxClientLimit_;
    maxClients_ = other.maxClients_;
    tickInterval_ = other.tickInterval_;
    hostname_ = other.hostname_;
    savegamename_ = other.savegamename_;
    s1Mapname_ = other.s1Mapname_;
    gamemode_ = other.gamemode_;
    serverIpAddress_ = other.serverIpAddress_;
    data_ = other.data_;
    isLocalonly_ = other.isLocalonly_;
    noSteamServer_ = other.noSteamServer_;
    isTransition_ = other.isTransition_;
    previouslevel_ = other.previouslevel_;
    landmarkname_ = other.landmarkname_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_GameSessionConfiguration Clone() {
    return new CSVCMsg_GameSessionConfiguration(this);
  }

  /// <summary>Field number for the "is_multiplayer" field.</summary>
  public const int IsMultiplayerFieldNumber = 1;
  private bool isMultiplayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMultiplayer {
    get { return isMultiplayer_; }
    set {
      isMultiplayer_ = value;
    }
  }

  /// <summary>Field number for the "is_loadsavegame" field.</summary>
  public const int IsLoadsavegameFieldNumber = 2;
  private bool isLoadsavegame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsLoadsavegame {
    get { return isLoadsavegame_; }
    set {
      isLoadsavegame_ = value;
    }
  }

  /// <summary>Field number for the "is_background_map" field.</summary>
  public const int IsBackgroundMapFieldNumber = 3;
  private bool isBackgroundMap_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsBackgroundMap {
    get { return isBackgroundMap_; }
    set {
      isBackgroundMap_ = value;
    }
  }

  /// <summary>Field number for the "is_headless" field.</summary>
  public const int IsHeadlessFieldNumber = 4;
  private bool isHeadless_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsHeadless {
    get { return isHeadless_; }
    set {
      isHeadless_ = value;
    }
  }

  /// <summary>Field number for the "min_client_limit" field.</summary>
  public const int MinClientLimitFieldNumber = 5;
  private uint minClientLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MinClientLimit {
    get { return minClientLimit_; }
    set {
      minClientLimit_ = value;
    }
  }

  /// <summary>Field number for the "max_client_limit" field.</summary>
  public const int MaxClientLimitFieldNumber = 6;
  private uint maxClientLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxClientLimit {
    get { return maxClientLimit_; }
    set {
      maxClientLimit_ = value;
    }
  }

  /// <summary>Field number for the "max_clients" field.</summary>
  public const int MaxClientsFieldNumber = 7;
  private uint maxClients_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxClients {
    get { return maxClients_; }
    set {
      maxClients_ = value;
    }
  }

  /// <summary>Field number for the "tick_interval" field.</summary>
  public const int TickIntervalFieldNumber = 8;
  private uint tickInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TickInterval {
    get { return tickInterval_; }
    set {
      tickInterval_ = value;
    }
  }

  /// <summary>Field number for the "hostname" field.</summary>
  public const int HostnameFieldNumber = 9;
  private string hostname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hostname {
    get { return hostname_; }
    set {
      hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "savegamename" field.</summary>
  public const int SavegamenameFieldNumber = 10;
  private string savegamename_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Savegamename {
    get { return savegamename_; }
    set {
      savegamename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "s1_mapname" field.</summary>
  public const int S1MapnameFieldNumber = 11;
  private string s1Mapname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string S1Mapname {
    get { return s1Mapname_; }
    set {
      s1Mapname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gamemode" field.</summary>
  public const int GamemodeFieldNumber = 12;
  private string gamemode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Gamemode {
    get { return gamemode_; }
    set {
      gamemode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "server_ip_address" field.</summary>
  public const int ServerIpAddressFieldNumber = 13;
  private string serverIpAddress_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerIpAddress {
    get { return serverIpAddress_; }
    set {
      serverIpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 14;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_localonly" field.</summary>
  public const int IsLocalonlyFieldNumber = 15;
  private bool isLocalonly_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsLocalonly {
    get { return isLocalonly_; }
    set {
      isLocalonly_ = value;
    }
  }

  /// <summary>Field number for the "no_steam_server" field.</summary>
  public const int NoSteamServerFieldNumber = 19;
  private bool noSteamServer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool NoSteamServer {
    get { return noSteamServer_; }
    set {
      noSteamServer_ = value;
    }
  }

  /// <summary>Field number for the "is_transition" field.</summary>
  public const int IsTransitionFieldNumber = 16;
  private bool isTransition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTransition {
    get { return isTransition_; }
    set {
      isTransition_ = value;
    }
  }

  /// <summary>Field number for the "previouslevel" field.</summary>
  public const int PreviouslevelFieldNumber = 17;
  private string previouslevel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Previouslevel {
    get { return previouslevel_; }
    set {
      previouslevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "landmarkname" field.</summary>
  public const int LandmarknameFieldNumber = 18;
  private string landmarkname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Landmarkname {
    get { return landmarkname_; }
    set {
      landmarkname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsg_GameSessionConfiguration);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsg_GameSessionConfiguration other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsMultiplayer != other.IsMultiplayer) return false;
    if (IsLoadsavegame != other.IsLoadsavegame) return false;
    if (IsBackgroundMap != other.IsBackgroundMap) return false;
    if (IsHeadless != other.IsHeadless) return false;
    if (MinClientLimit != other.MinClientLimit) return false;
    if (MaxClientLimit != other.MaxClientLimit) return false;
    if (MaxClients != other.MaxClients) return false;
    if (TickInterval != other.TickInterval) return false;
    if (Hostname != other.Hostname) return false;
    if (Savegamename != other.Savegamename) return false;
    if (S1Mapname != other.S1Mapname) return false;
    if (Gamemode != other.Gamemode) return false;
    if (ServerIpAddress != other.ServerIpAddress) return false;
    if (Data != other.Data) return false;
    if (IsLocalonly != other.IsLocalonly) return false;
    if (NoSteamServer != other.NoSteamServer) return false;
    if (IsTransition != other.IsTransition) return false;
    if (Previouslevel != other.Previouslevel) return false;
    if (Landmarkname != other.Landmarkname) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsMultiplayer != false) hash ^= IsMultiplayer.GetHashCode();
    if (IsLoadsavegame != false) hash ^= IsLoadsavegame.GetHashCode();
    if (IsBackgroundMap != false) hash ^= IsBackgroundMap.GetHashCode();
    if (IsHeadless != false) hash ^= IsHeadless.GetHashCode();
    if (MinClientLimit != 0) hash ^= MinClientLimit.GetHashCode();
    if (MaxClientLimit != 0) hash ^= MaxClientLimit.GetHashCode();
    if (MaxClients != 0) hash ^= MaxClients.GetHashCode();
    if (TickInterval != 0) hash ^= TickInterval.GetHashCode();
    if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
    if (Savegamename.Length != 0) hash ^= Savegamename.GetHashCode();
    if (S1Mapname.Length != 0) hash ^= S1Mapname.GetHashCode();
    if (Gamemode.Length != 0) hash ^= Gamemode.GetHashCode();
    if (ServerIpAddress.Length != 0) hash ^= ServerIpAddress.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (IsLocalonly != false) hash ^= IsLocalonly.GetHashCode();
    if (NoSteamServer != false) hash ^= NoSteamServer.GetHashCode();
    if (IsTransition != false) hash ^= IsTransition.GetHashCode();
    if (Previouslevel.Length != 0) hash ^= Previouslevel.GetHashCode();
    if (Landmarkname.Length != 0) hash ^= Landmarkname.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsMultiplayer != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsMultiplayer);
    }
    if (IsLoadsavegame != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsLoadsavegame);
    }
    if (IsBackgroundMap != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsBackgroundMap);
    }
    if (IsHeadless != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsHeadless);
    }
    if (MinClientLimit != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(MinClientLimit);
    }
    if (MaxClientLimit != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(MaxClientLimit);
    }
    if (MaxClients != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(MaxClients);
    }
    if (TickInterval != 0) {
      output.WriteRawTag(69);
      output.WriteFixed32(TickInterval);
    }
    if (Hostname.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Hostname);
    }
    if (Savegamename.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Savegamename);
    }
    if (S1Mapname.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(S1Mapname);
    }
    if (Gamemode.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Gamemode);
    }
    if (ServerIpAddress.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(ServerIpAddress);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(114);
      output.WriteBytes(Data);
    }
    if (IsLocalonly != false) {
      output.WriteRawTag(120);
      output.WriteBool(IsLocalonly);
    }
    if (IsTransition != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(IsTransition);
    }
    if (Previouslevel.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(Previouslevel);
    }
    if (Landmarkname.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(Landmarkname);
    }
    if (NoSteamServer != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(NoSteamServer);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsMultiplayer != false) {
      size += 1 + 1;
    }
    if (IsLoadsavegame != false) {
      size += 1 + 1;
    }
    if (IsBackgroundMap != false) {
      size += 1 + 1;
    }
    if (IsHeadless != false) {
      size += 1 + 1;
    }
    if (MinClientLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinClientLimit);
    }
    if (MaxClientLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxClientLimit);
    }
    if (MaxClients != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxClients);
    }
    if (TickInterval != 0) {
      size += 1 + 4;
    }
    if (Hostname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
    }
    if (Savegamename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Savegamename);
    }
    if (S1Mapname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(S1Mapname);
    }
    if (Gamemode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Gamemode);
    }
    if (ServerIpAddress.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIpAddress);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (IsLocalonly != false) {
      size += 1 + 1;
    }
    if (NoSteamServer != false) {
      size += 2 + 1;
    }
    if (IsTransition != false) {
      size += 2 + 1;
    }
    if (Previouslevel.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Previouslevel);
    }
    if (Landmarkname.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Landmarkname);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsg_GameSessionConfiguration other) {
    if (other == null) {
      return;
    }
    if (other.IsMultiplayer != false) {
      IsMultiplayer = other.IsMultiplayer;
    }
    if (other.IsLoadsavegame != false) {
      IsLoadsavegame = other.IsLoadsavegame;
    }
    if (other.IsBackgroundMap != false) {
      IsBackgroundMap = other.IsBackgroundMap;
    }
    if (other.IsHeadless != false) {
      IsHeadless = other.IsHeadless;
    }
    if (other.MinClientLimit != 0) {
      MinClientLimit = other.MinClientLimit;
    }
    if (other.MaxClientLimit != 0) {
      MaxClientLimit = other.MaxClientLimit;
    }
    if (other.MaxClients != 0) {
      MaxClients = other.MaxClients;
    }
    if (other.TickInterval != 0) {
      TickInterval = other.TickInterval;
    }
    if (other.Hostname.Length != 0) {
      Hostname = other.Hostname;
    }
    if (other.Savegamename.Length != 0) {
      Savegamename = other.Savegamename;
    }
    if (other.S1Mapname.Length != 0) {
      S1Mapname = other.S1Mapname;
    }
    if (other.Gamemode.Length != 0) {
      Gamemode = other.Gamemode;
    }
    if (other.ServerIpAddress.Length != 0) {
      ServerIpAddress = other.ServerIpAddress;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    if (other.IsLocalonly != false) {
      IsLocalonly = other.IsLocalonly;
    }
    if (other.NoSteamServer != false) {
      NoSteamServer = other.NoSteamServer;
    }
    if (other.IsTransition != false) {
      IsTransition = other.IsTransition;
    }
    if (other.Previouslevel.Length != 0) {
      Previouslevel = other.Previouslevel;
    }
    if (other.Landmarkname.Length != 0) {
      Landmarkname = other.Landmarkname;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsMultiplayer = input.ReadBool();
          break;
        }
        case 16: {
          IsLoadsavegame = input.ReadBool();
          break;
        }
        case 24: {
          IsBackgroundMap = input.ReadBool();
          break;
        }
        case 32: {
          IsHeadless = input.ReadBool();
          break;
        }
        case 40: {
          MinClientLimit = input.ReadUInt32();
          break;
        }
        case 48: {
          MaxClientLimit = input.ReadUInt32();
          break;
        }
        case 56: {
          MaxClients = input.ReadUInt32();
          break;
        }
        case 69: {
          TickInterval = input.ReadFixed32();
          break;
        }
        case 74: {
          Hostname = input.ReadString();
          break;
        }
        case 82: {
          Savegamename = input.ReadString();
          break;
        }
        case 90: {
          S1Mapname = input.ReadString();
          break;
        }
        case 98: {
          Gamemode = input.ReadString();
          break;
        }
        case 106: {
          ServerIpAddress = input.ReadString();
          break;
        }
        case 114: {
          Data = input.ReadBytes();
          break;
        }
        case 120: {
          IsLocalonly = input.ReadBool();
          break;
        }
        case 128: {
          IsTransition = input.ReadBool();
          break;
        }
        case 138: {
          Previouslevel = input.ReadString();
          break;
        }
        case 146: {
          Landmarkname = input.ReadString();
          break;
        }
        case 152: {
          NoSteamServer = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
