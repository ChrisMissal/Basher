// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dota_clientmessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from dota_clientmessages.proto</summary>
public static partial class DotaClientmessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for dota_clientmessages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DotaClientmessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Chlkb3RhX2NsaWVudG1lc3NhZ2VzLnByb3RvGhlkb3RhX2NvbW1vbm1lc3Nh",
          "Z2VzLnByb3RvGhdkb3RhX3NoYXJlZF9lbnVtcy5wcm90byJHChZDRE9UQUNs",
          "aWVudE1zZ19NYXBQaW5nEi0KDWxvY2F0aW9uX3BpbmcYASABKAsyFi5DRE9U",
          "QU1zZ19Mb2NhdGlvblBpbmciQwoYQ0RPVEFDbGllbnRNc2dfSXRlbUFsZXJ0",
          "EicKCml0ZW1fYWxlcnQYASABKAsyEy5DRE9UQU1zZ19JdGVtQWxlcnQiVAoc",
          "Q0RPVEFDbGllbnRNc2dfTW9kaWZpZXJBbGVydBIbChNidWZmX2ludGVybmFs",
          "X2luZGV4GAEgASgFEhcKD3RhcmdldF9lbnRpbmRleBgCIAEoDSJSChpDRE9U",
          "QUNsaWVudE1zZ19DbGlja2VkQnVmZhIbChNidWZmX2ludGVybmFsX2luZGV4",
          "GAEgASgFEhcKD3RhcmdldF9lbnRpbmRleBgCIAEoDSJOChpDRE9UQUNsaWVu",
          "dE1zZ19IUE1hbmFBbGVydBIXCg90YXJnZXRfZW50aW5kZXgYASABKA0SFwoP",
          "c2hvd19yYXdfdmFsdWVzGAIgASgIIi0KGUNET1RBQ2xpZW50TXNnX0dseXBo",
          "QWxlcnQSEAoIbmVnYXRpdmUYASABKAgiLQoZQ0RPVEFDbGllbnRNc2dfUmFk",
          "YXJBbGVydBIQCghuZWdhdGl2ZRgBIAEoCCI8ChZDRE9UQUNsaWVudE1zZ19N",
          "YXBMaW5lEiIKB21hcGxpbmUYASABKAsyES5DRE9UQU1zZ19NYXBMaW5lIisK",
          "GkNET1RBQ2xpZW50TXNnX0FzcGVjdFJhdGlvEg0KBXJhdGlvGAEgASgCIjsK",
          "KENET1RBQ2xpZW50TXNnX1VuaXRzQXV0b0F0dGFja0FmdGVyU3BlbGwSDwoH",
          "ZW5hYmxlZBgBIAEoCCI2CiNDRE9UQUNsaWVudE1zZ19UZWxlcG9ydFJlcXVp",
          "cmVzSGFsdBIPCgdlbmFibGVkGAEgASgIIjUKIkNET1RBQ2xpZW50TXNnX0No",
          "YW5uZWxSZXF1aXJlc0hhbHQSDwoHZW5hYmxlZBgBIAEoCCItChtDRE9UQUNs",
          "aWVudE1zZ19TZWFyY2hTdHJpbmcSDgoGc2VhcmNoGAEgASgJIhYKFENET1RB",
          "Q2xpZW50TXNnX1BhdXNlIisKG0NET1RBQ2xpZW50TXNnX1Nob3BWaWV3TW9k",
          "ZRIMCgRtb2RlGAEgASgNIlAKH0NET1RBQ2xpZW50TXNnX1NldFVuaXRTaGFy",
          "ZUZsYWcSEAoIcGxheWVySUQYASABKA0SDAoEZmxhZxgCIAEoDRINCgVzdGF0",
          "ZRgDIAEoCCIvChpDRE9UQUNsaWVudE1zZ19Td2FwUmVxdWVzdBIRCglwbGF5",
          "ZXJfaWQYASABKA0iLgoZQ0RPVEFDbGllbnRNc2dfU3dhcEFjY2VwdBIRCglw",
          "bGF5ZXJfaWQYASABKA0iQgoYQ0RPVEFDbGllbnRNc2dfV29ybGRMaW5lEiYK",
          "CXdvcmxkbGluZRgBIAEoCzITLkNET1RBTXNnX1dvcmxkTGluZSIjCiFDRE9U",
          "QUNsaWVudE1zZ19SZXF1ZXN0R3JhcGhVcGRhdGUiXwoYQ0RPVEFDbGllbnRN",
          "c2dfQ2hhdFdoZWVsEhcKD2NoYXRfbWVzc2FnZV9pZBgBIAEoDRIVCg1wYXJh",
          "bV9oZXJvX2lkGAIgASgNEhMKC2Vtb3RpY29uX2lkGAMgASgNIlwKI0NET1RB",
          "Q2xpZW50TXNnX0Rpc21pc3NBbGxTdGF0UG9wdXBzEjUKDWRpc21pc3NhbGxt",
          "c2cYASABKAsyHi5DRE9UQU1zZ19EaXNtaXNzQWxsU3RhdFBvcHVwcyJTCiRD",
          "RE9UQUNsaWVudE1zZ19CZWdpbkxhc3RIaXRDaGFsbGVuZ2USEwoLY2hvc2Vu",
          "X2xhbmUYASABKA0SFgoOaGVscGVyX2VuYWJsZWQYAiABKAgiUQohQ0RPVEFD",
          "bGllbnRNc2dfVXBkYXRlUXVpY2tCdXlJdGVtEhcKD2l0ZW1fYWJpbGl0eV9p",
          "ZBgBIAEoBRITCgtwdXJjaGFzYWJsZRgCIAEoCCJSCh1DRE9UQUNsaWVudE1z",
          "Z19VcGRhdGVRdWlja0J1eRIxCgVpdGVtcxgBIAMoCzIiLkNET1RBQ2xpZW50",
          "TXNnX1VwZGF0ZVF1aWNrQnV5SXRlbSIxChlDRE9UQUNsaWVudE1zZ19SZWNv",
          "cmRWb3RlEhQKDGNob2ljZV9pbmRleBgBIAEoBSJxCiBDRE9UQUNsaWVudE1z",
          "Z19XaWxsUHVyY2hhc2VBbGVydBIXCg9pdGVtX2FiaWxpdHlfaWQYASABKAUS",
          "FgoOZ29sZF9yZW1haW5pbmcYAiABKA0SHAoUc3VnZ2VzdGlvbl9wbGF5ZXJf",
          "aWQYAyABKAUiIgogQ0RPVEFDbGllbnRNc2dfQnV5QmFja1N0YXRlQWxlcnQi",
          "fwocQ0RPVEFDbGllbnRNc2dfUXVpY2tCdXlBbGVydBIXCg9pdGVtX2FiaWxp",
          "dHlfaWQYASABKAUSEQoJZ29sZF9jb3N0GAIgASgFEh0KFWl0ZW1fY29vbGRv",
          "d25fc2Vjb25kcxgDIAEoBRIUCgxzaG93X2J1eWJhY2sYBCABKAgiMQodQ0RP",
          "VEFDbGllbnRNc2dfUGxheWVyU2hvd0Nhc2USEAoIc2hvd2Nhc2UYASABKAgi",
          "NgofQ0RPVEFDbGllbnRNc2dfQ2FtZXJhWm9vbUFtb3VudBITCgt6b29tX2Ft",
          "b3VudBgBIAEoAiI9CihDRE9UQUNsaWVudE1zZ19Ccm9hZGNhc3RlclVzaW5n",
          "Q2FtZXJhbWFuEhEKCWNhbWVyYW1hbhgBIAEoCCJICjVDRE9UQUNsaWVudE1z",
          "Z19Ccm9hZGNhc3RlclVzaW5nQXNzaXN0ZWRDYW1lcmFPcGVyYXRvchIPCgdl",
          "bmFibGVkGAEgASgIIlUKHUNBZGRpdGlvbmFsRXF1aXBTbG90Q2xpZW50TXNn",
          "EhAKCGNsYXNzX2lkGAEgASgNEg8KB3Nsb3RfaWQYAiABKA0SEQoJZGVmX2lu",
          "ZGV4GAMgASgNIk4KHENET1RBQ2xpZW50TXNnX0ZyZWVJbnZlbnRvcnkSLgoG",
          "ZXF1aXBzGAEgAygLMh4uQ0FkZGl0aW9uYWxFcXVpcFNsb3RDbGllbnRNc2ci",
          "PQolQ0RPVEFDbGllbnRNc2dfRmlsbEVtcHR5U2xvdHNXaXRoQm90cxIUCgxm",
          "aWxsd2l0aGJvdHMYASABKAgiOAodQ0RPVEFDbGllbnRNc2dfSGVyb1N0YXR1",
          "ZUxpa2USFwoPb3duZXJfcGxheWVyX2lkGAEgASgNIi4KHkNET1RBQ2xpZW50",
          "TXNnX0V2ZW50Q05ZMjAxNUNtZBIMCgRkYXRhGAEgASgMIp4BChdDRE9UQUNs",
          "aWVudE1zZ19EZW1vSGVybxIPCgdoZXJvX2lkGAEgASgFEhgKEGhlcm9faWRf",
          "dG9fc3Bhd24YAiABKAUSEQoJaXRlbV9kZWZzGAMgAygNEhAKCGl0ZW1faWRz",
          "GAQgAygEEhMKC3N0eWxlX2luZGV4GAUgASgNEh4KFmtlZXBfZXhpc3Rpbmdf",
          "ZGVtb2hlcm8YBiABKAgiWAoeQ0RPVEFDbGllbnRNc2dfQ2hhbGxlbmdlU2Vs",
          "ZWN0EhAKCGV2ZW50X2lkGAEgASgNEg8KB3Nsb3RfaWQYAiABKA0SEwoLc2Vx",
          "dWVuY2VfaWQYAyABKA0iMAoYQ0RPVEFDbGllbnRNc2dfQ29pbldhZ2VyEhQK",
          "DHdhZ2VyX2Ftb3VudBgBIAEoDSI8Ch1DRE9UQUNsaWVudE1zZ19Db2luV2Fn",
          "ZXJUb2tlbhIbChN3YWdlcl90b2tlbl9pdGVtX2lkGAEgASgEIjIKGENET1RB",
          "Q2xpZW50TXNnX1JhbmtXYWdlchIWCg5hbm5vdW5jZV93YWdlchgBIAEoCCI8",
          "Ch1DRE9UQUNsaWVudE1zZ19FdmVudFBvaW50c1RpcBIbChNyZWNpcGllbnRf",
          "cGxheWVyX2lkGAEgASgNIkcKFkNET1RBQ2xpZW50TXNnX1hQQWxlcnQSFwoP",
          "dGFyZ2V0X2VudGluZGV4GAEgASgNEhQKDGRhbWFnZV90YWtlbhgCIAEoDSJs",
          "Ch5DRE9UQUNsaWVudE1zZ19UYWxlbnRUcmVlQWxlcnQSFwoPdGFyZ2V0X2Vu",
          "dGluZGV4GAEgASgNEhIKCmFiaWxpdHlfaWQYAiABKAUSDAoEc2xvdBgDIAEo",
          "BRIPCgdsZWFybmVkGAQgASgIIqcBCiFDRE9UQUNsaWVudE1zZ19LaWxsY2Ft",
          "RGFtYWdlVGFrZW4SFwoPdGFyZ2V0X2VudGluZGV4GAEgASgNEhQKDGRhbWFn",
          "ZV90YWtlbhgCIAEoDRIRCglpdGVtX3R5cGUYAyABKA0SFwoPaXRlbV9hYmls",
          "aXR5X2lkGAQgASgNEhEKCWhlcm9fbmFtZRgFIAEoCRIUCgxkYW1hZ2VfY29s",
          "b3IYBiABKAkiQgocQ0RPVEFDbGllbnRNc2dfTWF0Y2hNZXRhZGF0YRIQCght",
          "YXRjaF9pZBgBIAEoBBIQCghtZXRhZGF0YRgCIAEoDCIbChlDRE9UQUNsaWVu",
          "dE1zZ19LaWxsTXlIZXJvIqMBChpDRE9UQUNsaWVudE1zZ19RdWVzdFN0YXR1",
          "cxIQCghxdWVzdF9pZBgBIAEoDRIUCgxjaGFsbGVuZ2VfaWQYAiABKA0SEAoI",
          "cHJvZ3Jlc3MYAyABKA0SDAoEZ29hbBgEIAEoDRINCgVxdWVyeRgFIAEoDRIV",
          "Cg1mYWlsX2dhbWV0aW1lGAYgASgCEhcKD2l0ZW1fYWJpbGl0eV9pZBgHIAEo",
          "DSJFCh9DRE9UQUNsaWVudE1zZ19Ub2dnbGVBdXRvYXR0YWNrEgwKBG1vZGUY",
          "ASABKAUSFAoMc2hvd19tZXNzYWdlGAIgASgIIk8KHUNET1RBQ2xpZW50TXNn",
          "X1NwZWNpYWxBYmlsaXR5EhUKDWFiaWxpdHlfaW5kZXgYASABKA0SFwoPdGFy",
          "Z2V0X2VudGluZGV4GAIgASgNImMKJ0NET1RBQ2xpZW50TXNnX1NldEVuZW15",
          "U3RhcnRpbmdQb3NpdGlvbhIXCg9lbmVteV9wbGF5ZXJfaWQYASABKA0SHwoX",
          "ZW5lbXlfc3RhcnRpbmdfcG9zaXRpb24YAiABKA0iXAomQ0RPVEFDbGllbnRN",
          "c2dfU2V0RGVzaXJlZFdhcmRQbGFjZW1lbnQSEgoKd2FyZF9pbmRleBgBIAEo",
          "DRIOCgZ3YXJkX3gYAiABKAISDgoGd2FyZF95GAMgASgCIlMKF0NET1RBQ2xp",
          "ZW50TXNnX1JvbGxEaWNlEhQKDGNoYW5uZWxfdHlwZRgBIAEoDRIQCghyb2xs",
          "X21pbhgCIAEoDRIQCghyb2xsX21heBgDIAEoDSIvChdDRE9UQUNsaWVudE1z",
          "Z19GbGlwQ29pbhIUCgxjaGFubmVsX3R5cGUYASABKA0iJwolQ0RPVEFDbGll",
          "bnRNc2dfUmVxdWVzdEl0ZW1TdWdnZXN0aW9ucyIzCh5DRE9UQUNsaWVudE1z",
          "Z19NYWtlVGVhbUNhcHRhaW4SEQoJcGxheWVyX2lkGAEgASgNIkEKKENET1RB",
          "Q2xpZW50TXNnX0hlbHBUaXBTeXN0ZW1TdGF0ZUNoYW5nZWQSFQoNdGlwX2Rp",
          "c3BsYXllZBgBIAEoCCJ6CiNDRE9UQUNsaWVudE1zZ19SZXF1ZXN0QnVsa0Nv",
          "bWJhdExvZxIRCglnYW1lX3RpbWUYASABKAISEAoIZHVyYXRpb24YAiABKAIS",
          "GwoTcmVjZW50X3BsYXllcl9kZWF0aBgDIAEoCBIRCglwbGF5ZXJfaWQYBCAB",
          "KAUiSQopQ0RPVEFDbGllbnRNc2dfQWJpbGl0eURyYWZ0UmVxdWVzdEFiaWxp",
          "dHkSHAoUcmVxdWVzdGVkX2FiaWxpdHlfaWQYASABKA0iTQogQ0RPVEFDbGll",
          "bnRNc2dfR3VpZGVTZWxlY3RPcHRpb24SDgoGb3B0aW9uGAEgASgNEhkKEWZv",
          "cmNlX3JlY2FsY3VsYXRlGAIgASgIIlAKHENET1RBQ2xpZW50TXNnX0d1aWRl",
          "U2VsZWN0ZWQSGQoRZ3VpZGVfd29ya3Nob3BfaWQYASABKAQSFQoNaXNfcGx1",
          "c19ndWlkZRgCIAEoCCJ3ChtDRE9UQUNsaWVudE1zZ19EYW1hZ2VSZXBvcnQS",
          "FgoOdGFyZ2V0X2hlcm9faWQYASABKA0SFgoOc291cmNlX2hlcm9faWQYAiAB",
          "KA0SFQoNZGFtYWdlX2Ftb3VudBgDIAEoBRIRCglicm9hZGNhc3QYBCABKAgi",
          "SQobQ0RPVEFDbGllbnRNc2dfU2FsdXRlUGxheWVyEhgKEHRhcmdldF9wbGF5",
          "ZXJfaWQYASABKAUSEAoIZXZlbnRfaWQYAiABKAUiKwoXQ0RPVEFDbGllbnRN",
          "c2dfVGlwQWxlcnQSEAoIdGlwX3RleHQYASABKAkiPAohQ0RPVEFDbGllbnRN",
          "c2dfRW1wdHlUZWxlcG9ydEFsZXJ0EhcKD3RhcmdldF9lbnRpbmRleBgBIAEo",
          "BSq2EgoTRURvdGFDbGllbnRNZXNzYWdlcxIPCgtET1RBX0NNX05pbBAAEhQK",
          "D0RPVEFfQ01fTWFwTGluZRCtAhIYChNET1RBX0NNX0FzcGVjdFJhdGlvEK4C",
          "EhQKD0RPVEFfQ01fTWFwUGluZxCvAhIcChdET1RBX0NNX1VuaXRzQXV0b0F0",
          "dGFjaxCwAhIZChRET1RBX0NNX1NlYXJjaFN0cmluZxCzAhISCg1ET1RBX0NN",
          "X1BhdXNlELQCEhkKFERPVEFfQ01fU2hvcFZpZXdNb2RlELUCEh0KGERPVEFf",
          "Q01fU2V0VW5pdFNoYXJlRmxhZxC2AhIYChNET1RBX0NNX1N3YXBSZXF1ZXN0",
          "ELcCEhcKEkRPVEFfQ01fU3dhcEFjY2VwdBC4AhIWChFET1RBX0NNX1dvcmxk",
          "TGluZRC5AhIfChpET1RBX0NNX1JlcXVlc3RHcmFwaFVwZGF0ZRC6AhIWChFE",
          "T1RBX0NNX0l0ZW1BbGVydBC7AhIWChFET1RBX0NNX0NoYXRXaGVlbBC8AhIa",
          "ChVET1RBX0NNX1NlbmRTdGF0UG9wdXAQvQISIgodRE9UQV9DTV9CZWdpbkxh",
          "c3RIaXRDaGFsbGVuZ2UQvgISGwoWRE9UQV9DTV9VcGRhdGVRdWlja0J1eRC/",
          "AhIeChlET1RBX0NNX1VwZGF0ZUNvYWNoTGlzdGVuEMACEhkKFERPVEFfQ01f",
          "Q29hY2hIVURQaW5nEMECEhcKEkRPVEFfQ01fUmVjb3JkVm90ZRDCAhImCiFE",
          "T1RBX0NNX1VuaXRzQXV0b0F0dGFja0FmdGVyU3BlbGwQwwISHgoZRE9UQV9D",
          "TV9XaWxsUHVyY2hhc2VBbGVydBDEAhIbChZET1RBX0NNX1BsYXllclNob3dD",
          "YXNlEMUCEiEKHERPVEFfQ01fVGVsZXBvcnRSZXF1aXJlc0hhbHQQxgISHQoY",
          "RE9UQV9DTV9DYW1lcmFab29tQW1vdW50EMcCEiUKIERPVEFfQ01fQnJvYWRj",
          "YXN0ZXJVc2luZ0NhbWVybWFuEMgCEjMKLkRPVEFfQ01fQnJvYWRjYXN0ZXJV",
          "c2luZ0Fzc2lzdGVkQ2FtZXJhT3BlcmF0b3IQyQISGwoWRE9UQV9DTV9FbmVt",
          "eUl0ZW1BbGVydBDKAhIaChVET1RBX0NNX0ZyZWVJbnZlbnRvcnkQywISHgoZ",
          "RE9UQV9DTV9CdXlCYWNrU3RhdGVBbGVydBDMAhIaChVET1RBX0NNX1F1aWNr",
          "QnV5QWxlcnQQzQISGwoWRE9UQV9DTV9IZXJvU3RhdHVlTGlrZRDOAhIaChVE",
          "T1RBX0NNX01vZGlmaWVyQWxlcnQQzwISHwoaRE9UQV9DTV9UZWFtU2hvd2Nh",
          "c2VFZGl0b3IQ0AISGAoTRE9UQV9DTV9IUE1hbmFBbGVydBDRAhIXChJET1RB",
          "X0NNX0dseXBoQWxlcnQQ0gISIwoeRE9UQV9DTV9UZWFtU2hvd2Nhc2VDbGll",
          "bnREYXRhENMCEh0KGERPVEFfQ01fUGxheVRlYW1TaG93Y2FzZRDUAhIcChdE",
          "T1RBX0NNX0V2ZW50Q05ZMjAxNUNtZBDVAhIjCh5ET1RBX0NNX0ZpbGxFbXB0",
          "eVNsb3RzV2l0aEJvdHMQ1gISFQoQRE9UQV9DTV9EZW1vSGVybxDXAhIkCh9E",
          "T1RBX0NNX0FiaWxpdHlMZWFybk1vZGVUb2dnbGVkENgCEhwKF0RPVEFfQ01f",
          "QWJpbGl0eVN0YXJ0VXNlENkCEhwKF0RPVEFfQ01fQ2hhbGxlbmdlU2VsZWN0",
          "ENoCEhwKF0RPVEFfQ01fQ2hhbGxlbmdlUmVyb2xsENsCEhgKE0RPVEFfQ01f",
          "Q2xpY2tlZEJ1ZmYQ3AISFgoRRE9UQV9DTV9Db2luV2FnZXIQ3QISGgoVRE9U",
          "QV9DTV9FeGVjdXRlT3JkZXJzEN4CEhQKD0RPVEFfQ01fWFBBbGVydBDfAhIb",
          "ChZET1RBX0NNX0V2ZW50UG9pbnRzVGlwEOECEhoKFURPVEFfQ01fTWF0Y2hN",
          "ZXRhZGF0YRDiAhIXChJET1RBX0NNX0tpbGxNeUhlcm8Q4wISGAoTRE9UQV9D",
          "TV9RdWVzdFN0YXR1cxDkAhIdChhET1RBX0NNX1RvZ2dsZUF1dG9hdHRhY2sQ",
          "5QISGwoWRE9UQV9DTV9TcGVjaWFsQWJpbGl0eRDmAhIfChpET1RBX0NNX0tp",
          "bGxjYW1EYW1hZ2VUYWtlbhDnAhIlCiBET1RBX0NNX1NldEVuZW15U3RhcnRp",
          "bmdQb3NpdGlvbhDoAhIkCh9ET1RBX0NNX1NldERlc2lyZWRXYXJkUGxhY2Vt",
          "ZW50EOkCEhUKEERPVEFfQ01fUm9sbERpY2UQ6gISFQoQRE9UQV9DTV9GbGlw",
          "Q29pbhDrAhIjCh5ET1RBX0NNX1JlcXVlc3RJdGVtU3VnZ2VzdGlvbnMQ7AIS",
          "HAoXRE9UQV9DTV9NYWtlVGVhbUNhcHRhaW4Q7QISGwoWRE9UQV9DTV9Db2lu",
          "V2FnZXJUb2tlbhDuAhIWChFET1RBX0NNX1JhbmtXYWdlchDvAhIhChxET1RB",
          "X0NNX0Rpc21pc3NBbGxTdGF0UG9wdXBzEPACEiYKIURPVEFfQ01fSGVscFRp",
          "cFN5c3RlbVN0YXRlQ2hhbmdlZBDxAhIgChtET1RBX0NNX0NoYW5uZWxSZXF1",
          "aXJlc0hhbHQQ8gISIQocRE9UQV9DTV9SZXF1ZXN0QnVsa0NvbWJhdExvZxDz",
          "AhInCiJET1RBX0NNX0FiaWxpdHlEcmFmdFJlcXVlc3RBYmlsaXR5EPQCEh4K",
          "GURPVEFfQ01fR3VpZGVTZWxlY3RPcHRpb24Q9QISGgoVRE9UQV9DTV9HdWlk",
          "ZVNlbGVjdGVkEPYCEhkKFERPVEFfQ01fRGFtYWdlUmVwb3J0EPcCEhkKFERP",
          "VEFfQ01fU2FsdXRlUGxheWVyEPgCEhcKEkRPVEFfQ01fU3ByYXlXaGVlbBD5",
          "AhIVChBET1RBX0NNX1RpcEFsZXJ0EPoCEh8KGkRPVEFfQ01fRW1wdHlUZWxl",
          "cG9ydEFsZXJ0EPsCEhcKEkRPVEFfQ01fUmFkYXJBbGVydBD8AhIcChdET1RB",
          "X0NNX1RhbGVudFRyZWVBbGVydBD9AkIFSAGAAQBiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::DotaCommonmessagesReflection.Descriptor, global::DotaSharedEnumsReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::EDotaClientMessages), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_MapPing), global::CDOTAClientMsg_MapPing.Parser, new[]{ "LocationPing" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ItemAlert), global::CDOTAClientMsg_ItemAlert.Parser, new[]{ "ItemAlert" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ModifierAlert), global::CDOTAClientMsg_ModifierAlert.Parser, new[]{ "BuffInternalIndex", "TargetEntindex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ClickedBuff), global::CDOTAClientMsg_ClickedBuff.Parser, new[]{ "BuffInternalIndex", "TargetEntindex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_HPManaAlert), global::CDOTAClientMsg_HPManaAlert.Parser, new[]{ "TargetEntindex", "ShowRawValues" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_GlyphAlert), global::CDOTAClientMsg_GlyphAlert.Parser, new[]{ "Negative" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_RadarAlert), global::CDOTAClientMsg_RadarAlert.Parser, new[]{ "Negative" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_MapLine), global::CDOTAClientMsg_MapLine.Parser, new[]{ "Mapline" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_AspectRatio), global::CDOTAClientMsg_AspectRatio.Parser, new[]{ "Ratio" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_UnitsAutoAttackAfterSpell), global::CDOTAClientMsg_UnitsAutoAttackAfterSpell.Parser, new[]{ "Enabled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_TeleportRequiresHalt), global::CDOTAClientMsg_TeleportRequiresHalt.Parser, new[]{ "Enabled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ChannelRequiresHalt), global::CDOTAClientMsg_ChannelRequiresHalt.Parser, new[]{ "Enabled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SearchString), global::CDOTAClientMsg_SearchString.Parser, new[]{ "Search" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_Pause), global::CDOTAClientMsg_Pause.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ShopViewMode), global::CDOTAClientMsg_ShopViewMode.Parser, new[]{ "Mode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SetUnitShareFlag), global::CDOTAClientMsg_SetUnitShareFlag.Parser, new[]{ "PlayerID", "Flag", "State" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SwapRequest), global::CDOTAClientMsg_SwapRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SwapAccept), global::CDOTAClientMsg_SwapAccept.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_WorldLine), global::CDOTAClientMsg_WorldLine.Parser, new[]{ "Worldline" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_RequestGraphUpdate), global::CDOTAClientMsg_RequestGraphUpdate.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ChatWheel), global::CDOTAClientMsg_ChatWheel.Parser, new[]{ "ChatMessageId", "ParamHeroId", "EmoticonId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_DismissAllStatPopups), global::CDOTAClientMsg_DismissAllStatPopups.Parser, new[]{ "Dismissallmsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_BeginLastHitChallenge), global::CDOTAClientMsg_BeginLastHitChallenge.Parser, new[]{ "ChosenLane", "HelperEnabled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_UpdateQuickBuyItem), global::CDOTAClientMsg_UpdateQuickBuyItem.Parser, new[]{ "ItemAbilityId", "Purchasable" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_UpdateQuickBuy), global::CDOTAClientMsg_UpdateQuickBuy.Parser, new[]{ "Items" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_RecordVote), global::CDOTAClientMsg_RecordVote.Parser, new[]{ "ChoiceIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_WillPurchaseAlert), global::CDOTAClientMsg_WillPurchaseAlert.Parser, new[]{ "ItemAbilityId", "GoldRemaining", "SuggestionPlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_BuyBackStateAlert), global::CDOTAClientMsg_BuyBackStateAlert.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_QuickBuyAlert), global::CDOTAClientMsg_QuickBuyAlert.Parser, new[]{ "ItemAbilityId", "GoldCost", "ItemCooldownSeconds", "ShowBuyback" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_PlayerShowCase), global::CDOTAClientMsg_PlayerShowCase.Parser, new[]{ "Showcase" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_CameraZoomAmount), global::CDOTAClientMsg_CameraZoomAmount.Parser, new[]{ "ZoomAmount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_BroadcasterUsingCameraman), global::CDOTAClientMsg_BroadcasterUsingCameraman.Parser, new[]{ "Cameraman" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator), global::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.Parser, new[]{ "Enabled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAdditionalEquipSlotClientMsg), global::CAdditionalEquipSlotClientMsg.Parser, new[]{ "ClassId", "SlotId", "DefIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_FreeInventory), global::CDOTAClientMsg_FreeInventory.Parser, new[]{ "Equips" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_FillEmptySlotsWithBots), global::CDOTAClientMsg_FillEmptySlotsWithBots.Parser, new[]{ "Fillwithbots" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_HeroStatueLike), global::CDOTAClientMsg_HeroStatueLike.Parser, new[]{ "OwnerPlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_EventCNY2015Cmd), global::CDOTAClientMsg_EventCNY2015Cmd.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_DemoHero), global::CDOTAClientMsg_DemoHero.Parser, new[]{ "HeroId", "HeroIdToSpawn", "ItemDefs", "ItemIds", "StyleIndex", "KeepExistingDemohero" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ChallengeSelect), global::CDOTAClientMsg_ChallengeSelect.Parser, new[]{ "EventId", "SlotId", "SequenceId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_CoinWager), global::CDOTAClientMsg_CoinWager.Parser, new[]{ "WagerAmount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_CoinWagerToken), global::CDOTAClientMsg_CoinWagerToken.Parser, new[]{ "WagerTokenItemId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_RankWager), global::CDOTAClientMsg_RankWager.Parser, new[]{ "AnnounceWager" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_EventPointsTip), global::CDOTAClientMsg_EventPointsTip.Parser, new[]{ "RecipientPlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_XPAlert), global::CDOTAClientMsg_XPAlert.Parser, new[]{ "TargetEntindex", "DamageTaken" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_TalentTreeAlert), global::CDOTAClientMsg_TalentTreeAlert.Parser, new[]{ "TargetEntindex", "AbilityId", "Slot", "Learned" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_KillcamDamageTaken), global::CDOTAClientMsg_KillcamDamageTaken.Parser, new[]{ "TargetEntindex", "DamageTaken", "ItemType", "ItemAbilityId", "HeroName", "DamageColor" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_MatchMetadata), global::CDOTAClientMsg_MatchMetadata.Parser, new[]{ "MatchId", "Metadata" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_KillMyHero), global::CDOTAClientMsg_KillMyHero.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_QuestStatus), global::CDOTAClientMsg_QuestStatus.Parser, new[]{ "QuestId", "ChallengeId", "Progress", "Goal", "Query", "FailGametime", "ItemAbilityId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_ToggleAutoattack), global::CDOTAClientMsg_ToggleAutoattack.Parser, new[]{ "Mode", "ShowMessage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SpecialAbility), global::CDOTAClientMsg_SpecialAbility.Parser, new[]{ "AbilityIndex", "TargetEntindex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SetEnemyStartingPosition), global::CDOTAClientMsg_SetEnemyStartingPosition.Parser, new[]{ "EnemyPlayerId", "EnemyStartingPosition" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SetDesiredWardPlacement), global::CDOTAClientMsg_SetDesiredWardPlacement.Parser, new[]{ "WardIndex", "WardX", "WardY" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_RollDice), global::CDOTAClientMsg_RollDice.Parser, new[]{ "ChannelType", "RollMin", "RollMax" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_FlipCoin), global::CDOTAClientMsg_FlipCoin.Parser, new[]{ "ChannelType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_RequestItemSuggestions), global::CDOTAClientMsg_RequestItemSuggestions.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_MakeTeamCaptain), global::CDOTAClientMsg_MakeTeamCaptain.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_HelpTipSystemStateChanged), global::CDOTAClientMsg_HelpTipSystemStateChanged.Parser, new[]{ "TipDisplayed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_RequestBulkCombatLog), global::CDOTAClientMsg_RequestBulkCombatLog.Parser, new[]{ "GameTime", "Duration", "RecentPlayerDeath", "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_AbilityDraftRequestAbility), global::CDOTAClientMsg_AbilityDraftRequestAbility.Parser, new[]{ "RequestedAbilityId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_GuideSelectOption), global::CDOTAClientMsg_GuideSelectOption.Parser, new[]{ "Option", "ForceRecalculate" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_GuideSelected), global::CDOTAClientMsg_GuideSelected.Parser, new[]{ "GuideWorkshopId", "IsPlusGuide" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_DamageReport), global::CDOTAClientMsg_DamageReport.Parser, new[]{ "TargetHeroId", "SourceHeroId", "DamageAmount", "Broadcast" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_SalutePlayer), global::CDOTAClientMsg_SalutePlayer.Parser, new[]{ "TargetPlayerId", "EventId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_TipAlert), global::CDOTAClientMsg_TipAlert.Parser, new[]{ "TipText" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDOTAClientMsg_EmptyTeleportAlert), global::CDOTAClientMsg_EmptyTeleportAlert.Parser, new[]{ "TargetEntindex" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum EDotaClientMessages {
  [pbr::OriginalName("DOTA_CM_Nil")] DotaCmNil = 0,
  [pbr::OriginalName("DOTA_CM_MapLine")] DotaCmMapLine = 301,
  [pbr::OriginalName("DOTA_CM_AspectRatio")] DotaCmAspectRatio = 302,
  [pbr::OriginalName("DOTA_CM_MapPing")] DotaCmMapPing = 303,
  [pbr::OriginalName("DOTA_CM_UnitsAutoAttack")] DotaCmUnitsAutoAttack = 304,
  [pbr::OriginalName("DOTA_CM_SearchString")] DotaCmSearchString = 307,
  [pbr::OriginalName("DOTA_CM_Pause")] DotaCmPause = 308,
  [pbr::OriginalName("DOTA_CM_ShopViewMode")] DotaCmShopViewMode = 309,
  [pbr::OriginalName("DOTA_CM_SetUnitShareFlag")] DotaCmSetUnitShareFlag = 310,
  [pbr::OriginalName("DOTA_CM_SwapRequest")] DotaCmSwapRequest = 311,
  [pbr::OriginalName("DOTA_CM_SwapAccept")] DotaCmSwapAccept = 312,
  [pbr::OriginalName("DOTA_CM_WorldLine")] DotaCmWorldLine = 313,
  [pbr::OriginalName("DOTA_CM_RequestGraphUpdate")] DotaCmRequestGraphUpdate = 314,
  [pbr::OriginalName("DOTA_CM_ItemAlert")] DotaCmItemAlert = 315,
  [pbr::OriginalName("DOTA_CM_ChatWheel")] DotaCmChatWheel = 316,
  [pbr::OriginalName("DOTA_CM_SendStatPopup")] DotaCmSendStatPopup = 317,
  [pbr::OriginalName("DOTA_CM_BeginLastHitChallenge")] DotaCmBeginLastHitChallenge = 318,
  [pbr::OriginalName("DOTA_CM_UpdateQuickBuy")] DotaCmUpdateQuickBuy = 319,
  [pbr::OriginalName("DOTA_CM_UpdateCoachListen")] DotaCmUpdateCoachListen = 320,
  [pbr::OriginalName("DOTA_CM_CoachHUDPing")] DotaCmCoachHudping = 321,
  [pbr::OriginalName("DOTA_CM_RecordVote")] DotaCmRecordVote = 322,
  [pbr::OriginalName("DOTA_CM_UnitsAutoAttackAfterSpell")] DotaCmUnitsAutoAttackAfterSpell = 323,
  [pbr::OriginalName("DOTA_CM_WillPurchaseAlert")] DotaCmWillPurchaseAlert = 324,
  [pbr::OriginalName("DOTA_CM_PlayerShowCase")] DotaCmPlayerShowCase = 325,
  [pbr::OriginalName("DOTA_CM_TeleportRequiresHalt")] DotaCmTeleportRequiresHalt = 326,
  [pbr::OriginalName("DOTA_CM_CameraZoomAmount")] DotaCmCameraZoomAmount = 327,
  [pbr::OriginalName("DOTA_CM_BroadcasterUsingCamerman")] DotaCmBroadcasterUsingCamerman = 328,
  [pbr::OriginalName("DOTA_CM_BroadcasterUsingAssistedCameraOperator")] DotaCmBroadcasterUsingAssistedCameraOperator = 329,
  [pbr::OriginalName("DOTA_CM_EnemyItemAlert")] DotaCmEnemyItemAlert = 330,
  [pbr::OriginalName("DOTA_CM_FreeInventory")] DotaCmFreeInventory = 331,
  [pbr::OriginalName("DOTA_CM_BuyBackStateAlert")] DotaCmBuyBackStateAlert = 332,
  [pbr::OriginalName("DOTA_CM_QuickBuyAlert")] DotaCmQuickBuyAlert = 333,
  [pbr::OriginalName("DOTA_CM_HeroStatueLike")] DotaCmHeroStatueLike = 334,
  [pbr::OriginalName("DOTA_CM_ModifierAlert")] DotaCmModifierAlert = 335,
  [pbr::OriginalName("DOTA_CM_TeamShowcaseEditor")] DotaCmTeamShowcaseEditor = 336,
  [pbr::OriginalName("DOTA_CM_HPManaAlert")] DotaCmHpmanaAlert = 337,
  [pbr::OriginalName("DOTA_CM_GlyphAlert")] DotaCmGlyphAlert = 338,
  [pbr::OriginalName("DOTA_CM_TeamShowcaseClientData")] DotaCmTeamShowcaseClientData = 339,
  [pbr::OriginalName("DOTA_CM_PlayTeamShowcase")] DotaCmPlayTeamShowcase = 340,
  [pbr::OriginalName("DOTA_CM_EventCNY2015Cmd")] DotaCmEventCny2015Cmd = 341,
  [pbr::OriginalName("DOTA_CM_FillEmptySlotsWithBots")] DotaCmFillEmptySlotsWithBots = 342,
  [pbr::OriginalName("DOTA_CM_DemoHero")] DotaCmDemoHero = 343,
  [pbr::OriginalName("DOTA_CM_AbilityLearnModeToggled")] DotaCmAbilityLearnModeToggled = 344,
  [pbr::OriginalName("DOTA_CM_AbilityStartUse")] DotaCmAbilityStartUse = 345,
  [pbr::OriginalName("DOTA_CM_ChallengeSelect")] DotaCmChallengeSelect = 346,
  [pbr::OriginalName("DOTA_CM_ChallengeReroll")] DotaCmChallengeReroll = 347,
  [pbr::OriginalName("DOTA_CM_ClickedBuff")] DotaCmClickedBuff = 348,
  [pbr::OriginalName("DOTA_CM_CoinWager")] DotaCmCoinWager = 349,
  [pbr::OriginalName("DOTA_CM_ExecuteOrders")] DotaCmExecuteOrders = 350,
  [pbr::OriginalName("DOTA_CM_XPAlert")] DotaCmXpalert = 351,
  [pbr::OriginalName("DOTA_CM_EventPointsTip")] DotaCmEventPointsTip = 353,
  [pbr::OriginalName("DOTA_CM_MatchMetadata")] DotaCmMatchMetadata = 354,
  [pbr::OriginalName("DOTA_CM_KillMyHero")] DotaCmKillMyHero = 355,
  [pbr::OriginalName("DOTA_CM_QuestStatus")] DotaCmQuestStatus = 356,
  [pbr::OriginalName("DOTA_CM_ToggleAutoattack")] DotaCmToggleAutoattack = 357,
  [pbr::OriginalName("DOTA_CM_SpecialAbility")] DotaCmSpecialAbility = 358,
  [pbr::OriginalName("DOTA_CM_KillcamDamageTaken")] DotaCmKillcamDamageTaken = 359,
  [pbr::OriginalName("DOTA_CM_SetEnemyStartingPosition")] DotaCmSetEnemyStartingPosition = 360,
  [pbr::OriginalName("DOTA_CM_SetDesiredWardPlacement")] DotaCmSetDesiredWardPlacement = 361,
  [pbr::OriginalName("DOTA_CM_RollDice")] DotaCmRollDice = 362,
  [pbr::OriginalName("DOTA_CM_FlipCoin")] DotaCmFlipCoin = 363,
  [pbr::OriginalName("DOTA_CM_RequestItemSuggestions")] DotaCmRequestItemSuggestions = 364,
  [pbr::OriginalName("DOTA_CM_MakeTeamCaptain")] DotaCmMakeTeamCaptain = 365,
  [pbr::OriginalName("DOTA_CM_CoinWagerToken")] DotaCmCoinWagerToken = 366,
  [pbr::OriginalName("DOTA_CM_RankWager")] DotaCmRankWager = 367,
  [pbr::OriginalName("DOTA_CM_DismissAllStatPopups")] DotaCmDismissAllStatPopups = 368,
  [pbr::OriginalName("DOTA_CM_HelpTipSystemStateChanged")] DotaCmHelpTipSystemStateChanged = 369,
  [pbr::OriginalName("DOTA_CM_ChannelRequiresHalt")] DotaCmChannelRequiresHalt = 370,
  [pbr::OriginalName("DOTA_CM_RequestBulkCombatLog")] DotaCmRequestBulkCombatLog = 371,
  [pbr::OriginalName("DOTA_CM_AbilityDraftRequestAbility")] DotaCmAbilityDraftRequestAbility = 372,
  [pbr::OriginalName("DOTA_CM_GuideSelectOption")] DotaCmGuideSelectOption = 373,
  [pbr::OriginalName("DOTA_CM_GuideSelected")] DotaCmGuideSelected = 374,
  [pbr::OriginalName("DOTA_CM_DamageReport")] DotaCmDamageReport = 375,
  [pbr::OriginalName("DOTA_CM_SalutePlayer")] DotaCmSalutePlayer = 376,
  [pbr::OriginalName("DOTA_CM_SprayWheel")] DotaCmSprayWheel = 377,
  [pbr::OriginalName("DOTA_CM_TipAlert")] DotaCmTipAlert = 378,
  [pbr::OriginalName("DOTA_CM_EmptyTeleportAlert")] DotaCmEmptyTeleportAlert = 379,
  [pbr::OriginalName("DOTA_CM_RadarAlert")] DotaCmRadarAlert = 380,
  [pbr::OriginalName("DOTA_CM_TalentTreeAlert")] DotaCmTalentTreeAlert = 381,
}

#endregion

#region Messages
public sealed partial class CDOTAClientMsg_MapPing : pb::IMessage<CDOTAClientMsg_MapPing> {
  private static readonly pb::MessageParser<CDOTAClientMsg_MapPing> _parser = new pb::MessageParser<CDOTAClientMsg_MapPing>(() => new CDOTAClientMsg_MapPing());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_MapPing> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MapPing() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MapPing(CDOTAClientMsg_MapPing other) : this() {
    locationPing_ = other.locationPing_ != null ? other.locationPing_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MapPing Clone() {
    return new CDOTAClientMsg_MapPing(this);
  }

  /// <summary>Field number for the "location_ping" field.</summary>
  public const int LocationPingFieldNumber = 1;
  private global::CDOTAMsg_LocationPing locationPing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CDOTAMsg_LocationPing LocationPing {
    get { return locationPing_; }
    set {
      locationPing_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_MapPing);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_MapPing other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LocationPing, other.LocationPing)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (locationPing_ != null) hash ^= LocationPing.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (locationPing_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(LocationPing);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (locationPing_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocationPing);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_MapPing other) {
    if (other == null) {
      return;
    }
    if (other.locationPing_ != null) {
      if (locationPing_ == null) {
        locationPing_ = new global::CDOTAMsg_LocationPing();
      }
      LocationPing.MergeFrom(other.LocationPing);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (locationPing_ == null) {
            locationPing_ = new global::CDOTAMsg_LocationPing();
          }
          input.ReadMessage(locationPing_);
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ItemAlert : pb::IMessage<CDOTAClientMsg_ItemAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ItemAlert> _parser = new pb::MessageParser<CDOTAClientMsg_ItemAlert>(() => new CDOTAClientMsg_ItemAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ItemAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ItemAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ItemAlert(CDOTAClientMsg_ItemAlert other) : this() {
    itemAlert_ = other.itemAlert_ != null ? other.itemAlert_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ItemAlert Clone() {
    return new CDOTAClientMsg_ItemAlert(this);
  }

  /// <summary>Field number for the "item_alert" field.</summary>
  public const int ItemAlertFieldNumber = 1;
  private global::CDOTAMsg_ItemAlert itemAlert_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CDOTAMsg_ItemAlert ItemAlert {
    get { return itemAlert_; }
    set {
      itemAlert_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ItemAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ItemAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ItemAlert, other.ItemAlert)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (itemAlert_ != null) hash ^= ItemAlert.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (itemAlert_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ItemAlert);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (itemAlert_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemAlert);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ItemAlert other) {
    if (other == null) {
      return;
    }
    if (other.itemAlert_ != null) {
      if (itemAlert_ == null) {
        itemAlert_ = new global::CDOTAMsg_ItemAlert();
      }
      ItemAlert.MergeFrom(other.ItemAlert);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (itemAlert_ == null) {
            itemAlert_ = new global::CDOTAMsg_ItemAlert();
          }
          input.ReadMessage(itemAlert_);
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ModifierAlert : pb::IMessage<CDOTAClientMsg_ModifierAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ModifierAlert> _parser = new pb::MessageParser<CDOTAClientMsg_ModifierAlert>(() => new CDOTAClientMsg_ModifierAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ModifierAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ModifierAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ModifierAlert(CDOTAClientMsg_ModifierAlert other) : this() {
    buffInternalIndex_ = other.buffInternalIndex_;
    targetEntindex_ = other.targetEntindex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ModifierAlert Clone() {
    return new CDOTAClientMsg_ModifierAlert(this);
  }

  /// <summary>Field number for the "buff_internal_index" field.</summary>
  public const int BuffInternalIndexFieldNumber = 1;
  private int buffInternalIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffInternalIndex {
    get { return buffInternalIndex_; }
    set {
      buffInternalIndex_ = value;
    }
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 2;
  private uint targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ModifierAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ModifierAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuffInternalIndex != other.BuffInternalIndex) return false;
    if (TargetEntindex != other.TargetEntindex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuffInternalIndex != 0) hash ^= BuffInternalIndex.GetHashCode();
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuffInternalIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BuffInternalIndex);
    }
    if (TargetEntindex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetEntindex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuffInternalIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffInternalIndex);
    }
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ModifierAlert other) {
    if (other == null) {
      return;
    }
    if (other.BuffInternalIndex != 0) {
      BuffInternalIndex = other.BuffInternalIndex;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BuffInternalIndex = input.ReadInt32();
          break;
        }
        case 16: {
          TargetEntindex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ClickedBuff : pb::IMessage<CDOTAClientMsg_ClickedBuff> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ClickedBuff> _parser = new pb::MessageParser<CDOTAClientMsg_ClickedBuff>(() => new CDOTAClientMsg_ClickedBuff());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ClickedBuff> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ClickedBuff() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ClickedBuff(CDOTAClientMsg_ClickedBuff other) : this() {
    buffInternalIndex_ = other.buffInternalIndex_;
    targetEntindex_ = other.targetEntindex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ClickedBuff Clone() {
    return new CDOTAClientMsg_ClickedBuff(this);
  }

  /// <summary>Field number for the "buff_internal_index" field.</summary>
  public const int BuffInternalIndexFieldNumber = 1;
  private int buffInternalIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffInternalIndex {
    get { return buffInternalIndex_; }
    set {
      buffInternalIndex_ = value;
    }
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 2;
  private uint targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ClickedBuff);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ClickedBuff other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuffInternalIndex != other.BuffInternalIndex) return false;
    if (TargetEntindex != other.TargetEntindex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuffInternalIndex != 0) hash ^= BuffInternalIndex.GetHashCode();
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuffInternalIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BuffInternalIndex);
    }
    if (TargetEntindex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetEntindex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuffInternalIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffInternalIndex);
    }
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ClickedBuff other) {
    if (other == null) {
      return;
    }
    if (other.BuffInternalIndex != 0) {
      BuffInternalIndex = other.BuffInternalIndex;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BuffInternalIndex = input.ReadInt32();
          break;
        }
        case 16: {
          TargetEntindex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_HPManaAlert : pb::IMessage<CDOTAClientMsg_HPManaAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_HPManaAlert> _parser = new pb::MessageParser<CDOTAClientMsg_HPManaAlert>(() => new CDOTAClientMsg_HPManaAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_HPManaAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HPManaAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HPManaAlert(CDOTAClientMsg_HPManaAlert other) : this() {
    targetEntindex_ = other.targetEntindex_;
    showRawValues_ = other.showRawValues_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HPManaAlert Clone() {
    return new CDOTAClientMsg_HPManaAlert(this);
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 1;
  private uint targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  /// <summary>Field number for the "show_raw_values" field.</summary>
  public const int ShowRawValuesFieldNumber = 2;
  private bool showRawValues_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowRawValues {
    get { return showRawValues_; }
    set {
      showRawValues_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_HPManaAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_HPManaAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetEntindex != other.TargetEntindex) return false;
    if (ShowRawValues != other.ShowRawValues) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (ShowRawValues != false) hash ^= ShowRawValues.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetEntindex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetEntindex);
    }
    if (ShowRawValues != false) {
      output.WriteRawTag(16);
      output.WriteBool(ShowRawValues);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
    }
    if (ShowRawValues != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_HPManaAlert other) {
    if (other == null) {
      return;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    if (other.ShowRawValues != false) {
      ShowRawValues = other.ShowRawValues;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetEntindex = input.ReadUInt32();
          break;
        }
        case 16: {
          ShowRawValues = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_GlyphAlert : pb::IMessage<CDOTAClientMsg_GlyphAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_GlyphAlert> _parser = new pb::MessageParser<CDOTAClientMsg_GlyphAlert>(() => new CDOTAClientMsg_GlyphAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_GlyphAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GlyphAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GlyphAlert(CDOTAClientMsg_GlyphAlert other) : this() {
    negative_ = other.negative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GlyphAlert Clone() {
    return new CDOTAClientMsg_GlyphAlert(this);
  }

  /// <summary>Field number for the "negative" field.</summary>
  public const int NegativeFieldNumber = 1;
  private bool negative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Negative {
    get { return negative_; }
    set {
      negative_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_GlyphAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_GlyphAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Negative != other.Negative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Negative != false) hash ^= Negative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Negative != false) {
      output.WriteRawTag(8);
      output.WriteBool(Negative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Negative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_GlyphAlert other) {
    if (other == null) {
      return;
    }
    if (other.Negative != false) {
      Negative = other.Negative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Negative = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_RadarAlert : pb::IMessage<CDOTAClientMsg_RadarAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_RadarAlert> _parser = new pb::MessageParser<CDOTAClientMsg_RadarAlert>(() => new CDOTAClientMsg_RadarAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_RadarAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RadarAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RadarAlert(CDOTAClientMsg_RadarAlert other) : this() {
    negative_ = other.negative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RadarAlert Clone() {
    return new CDOTAClientMsg_RadarAlert(this);
  }

  /// <summary>Field number for the "negative" field.</summary>
  public const int NegativeFieldNumber = 1;
  private bool negative_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Negative {
    get { return negative_; }
    set {
      negative_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_RadarAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_RadarAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Negative != other.Negative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Negative != false) hash ^= Negative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Negative != false) {
      output.WriteRawTag(8);
      output.WriteBool(Negative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Negative != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_RadarAlert other) {
    if (other == null) {
      return;
    }
    if (other.Negative != false) {
      Negative = other.Negative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Negative = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_MapLine : pb::IMessage<CDOTAClientMsg_MapLine> {
  private static readonly pb::MessageParser<CDOTAClientMsg_MapLine> _parser = new pb::MessageParser<CDOTAClientMsg_MapLine>(() => new CDOTAClientMsg_MapLine());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_MapLine> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MapLine() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MapLine(CDOTAClientMsg_MapLine other) : this() {
    mapline_ = other.mapline_ != null ? other.mapline_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MapLine Clone() {
    return new CDOTAClientMsg_MapLine(this);
  }

  /// <summary>Field number for the "mapline" field.</summary>
  public const int MaplineFieldNumber = 1;
  private global::CDOTAMsg_MapLine mapline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CDOTAMsg_MapLine Mapline {
    get { return mapline_; }
    set {
      mapline_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_MapLine);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_MapLine other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Mapline, other.Mapline)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (mapline_ != null) hash ^= Mapline.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (mapline_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Mapline);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (mapline_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mapline);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_MapLine other) {
    if (other == null) {
      return;
    }
    if (other.mapline_ != null) {
      if (mapline_ == null) {
        mapline_ = new global::CDOTAMsg_MapLine();
      }
      Mapline.MergeFrom(other.Mapline);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (mapline_ == null) {
            mapline_ = new global::CDOTAMsg_MapLine();
          }
          input.ReadMessage(mapline_);
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_AspectRatio : pb::IMessage<CDOTAClientMsg_AspectRatio> {
  private static readonly pb::MessageParser<CDOTAClientMsg_AspectRatio> _parser = new pb::MessageParser<CDOTAClientMsg_AspectRatio>(() => new CDOTAClientMsg_AspectRatio());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_AspectRatio> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_AspectRatio() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_AspectRatio(CDOTAClientMsg_AspectRatio other) : this() {
    ratio_ = other.ratio_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_AspectRatio Clone() {
    return new CDOTAClientMsg_AspectRatio(this);
  }

  /// <summary>Field number for the "ratio" field.</summary>
  public const int RatioFieldNumber = 1;
  private float ratio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ratio {
    get { return ratio_; }
    set {
      ratio_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_AspectRatio);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_AspectRatio other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ratio, other.Ratio)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ratio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ratio);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ratio != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Ratio);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ratio != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_AspectRatio other) {
    if (other == null) {
      return;
    }
    if (other.Ratio != 0F) {
      Ratio = other.Ratio;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Ratio = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_UnitsAutoAttackAfterSpell : pb::IMessage<CDOTAClientMsg_UnitsAutoAttackAfterSpell> {
  private static readonly pb::MessageParser<CDOTAClientMsg_UnitsAutoAttackAfterSpell> _parser = new pb::MessageParser<CDOTAClientMsg_UnitsAutoAttackAfterSpell>(() => new CDOTAClientMsg_UnitsAutoAttackAfterSpell());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_UnitsAutoAttackAfterSpell> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UnitsAutoAttackAfterSpell(CDOTAClientMsg_UnitsAutoAttackAfterSpell other) : this() {
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UnitsAutoAttackAfterSpell Clone() {
    return new CDOTAClientMsg_UnitsAutoAttackAfterSpell(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_UnitsAutoAttackAfterSpell);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_UnitsAutoAttackAfterSpell other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_UnitsAutoAttackAfterSpell other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_TeleportRequiresHalt : pb::IMessage<CDOTAClientMsg_TeleportRequiresHalt> {
  private static readonly pb::MessageParser<CDOTAClientMsg_TeleportRequiresHalt> _parser = new pb::MessageParser<CDOTAClientMsg_TeleportRequiresHalt>(() => new CDOTAClientMsg_TeleportRequiresHalt());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_TeleportRequiresHalt> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TeleportRequiresHalt() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TeleportRequiresHalt(CDOTAClientMsg_TeleportRequiresHalt other) : this() {
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TeleportRequiresHalt Clone() {
    return new CDOTAClientMsg_TeleportRequiresHalt(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_TeleportRequiresHalt);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_TeleportRequiresHalt other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_TeleportRequiresHalt other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ChannelRequiresHalt : pb::IMessage<CDOTAClientMsg_ChannelRequiresHalt> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ChannelRequiresHalt> _parser = new pb::MessageParser<CDOTAClientMsg_ChannelRequiresHalt>(() => new CDOTAClientMsg_ChannelRequiresHalt());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ChannelRequiresHalt> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChannelRequiresHalt() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChannelRequiresHalt(CDOTAClientMsg_ChannelRequiresHalt other) : this() {
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChannelRequiresHalt Clone() {
    return new CDOTAClientMsg_ChannelRequiresHalt(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ChannelRequiresHalt);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ChannelRequiresHalt other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ChannelRequiresHalt other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SearchString : pb::IMessage<CDOTAClientMsg_SearchString> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SearchString> _parser = new pb::MessageParser<CDOTAClientMsg_SearchString>(() => new CDOTAClientMsg_SearchString());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SearchString> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SearchString() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SearchString(CDOTAClientMsg_SearchString other) : this() {
    search_ = other.search_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SearchString Clone() {
    return new CDOTAClientMsg_SearchString(this);
  }

  /// <summary>Field number for the "search" field.</summary>
  public const int SearchFieldNumber = 1;
  private string search_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Search {
    get { return search_; }
    set {
      search_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SearchString);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SearchString other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Search != other.Search) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Search.Length != 0) hash ^= Search.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Search.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Search);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Search.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Search);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SearchString other) {
    if (other == null) {
      return;
    }
    if (other.Search.Length != 0) {
      Search = other.Search;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Search = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_Pause : pb::IMessage<CDOTAClientMsg_Pause> {
  private static readonly pb::MessageParser<CDOTAClientMsg_Pause> _parser = new pb::MessageParser<CDOTAClientMsg_Pause>(() => new CDOTAClientMsg_Pause());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_Pause> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_Pause() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_Pause(CDOTAClientMsg_Pause other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_Pause Clone() {
    return new CDOTAClientMsg_Pause(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_Pause);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_Pause other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_Pause other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ShopViewMode : pb::IMessage<CDOTAClientMsg_ShopViewMode> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ShopViewMode> _parser = new pb::MessageParser<CDOTAClientMsg_ShopViewMode>(() => new CDOTAClientMsg_ShopViewMode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ShopViewMode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ShopViewMode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ShopViewMode(CDOTAClientMsg_ShopViewMode other) : this() {
    mode_ = other.mode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ShopViewMode Clone() {
    return new CDOTAClientMsg_ShopViewMode(this);
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 1;
  private uint mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ShopViewMode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ShopViewMode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Mode != other.Mode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Mode != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Mode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ShopViewMode other) {
    if (other == null) {
      return;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Mode = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SetUnitShareFlag : pb::IMessage<CDOTAClientMsg_SetUnitShareFlag> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SetUnitShareFlag> _parser = new pb::MessageParser<CDOTAClientMsg_SetUnitShareFlag>(() => new CDOTAClientMsg_SetUnitShareFlag());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SetUnitShareFlag> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetUnitShareFlag() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetUnitShareFlag(CDOTAClientMsg_SetUnitShareFlag other) : this() {
    playerID_ = other.playerID_;
    flag_ = other.flag_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetUnitShareFlag Clone() {
    return new CDOTAClientMsg_SetUnitShareFlag(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private uint playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "flag" field.</summary>
  public const int FlagFieldNumber = 2;
  private uint flag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Flag {
    get { return flag_; }
    set {
      flag_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private bool state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SetUnitShareFlag);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SetUnitShareFlag other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (Flag != other.Flag) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Flag != 0) hash ^= Flag.GetHashCode();
    if (State != false) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerID);
    }
    if (Flag != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Flag);
    }
    if (State != false) {
      output.WriteRawTag(24);
      output.WriteBool(State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerID);
    }
    if (Flag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
    }
    if (State != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SetUnitShareFlag other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Flag != 0) {
      Flag = other.Flag;
    }
    if (other.State != false) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadUInt32();
          break;
        }
        case 16: {
          Flag = input.ReadUInt32();
          break;
        }
        case 24: {
          State = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SwapRequest : pb::IMessage<CDOTAClientMsg_SwapRequest> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SwapRequest> _parser = new pb::MessageParser<CDOTAClientMsg_SwapRequest>(() => new CDOTAClientMsg_SwapRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SwapRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SwapRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SwapRequest(CDOTAClientMsg_SwapRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SwapRequest Clone() {
    return new CDOTAClientMsg_SwapRequest(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SwapRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SwapRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SwapRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SwapAccept : pb::IMessage<CDOTAClientMsg_SwapAccept> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SwapAccept> _parser = new pb::MessageParser<CDOTAClientMsg_SwapAccept>(() => new CDOTAClientMsg_SwapAccept());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SwapAccept> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SwapAccept() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SwapAccept(CDOTAClientMsg_SwapAccept other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SwapAccept Clone() {
    return new CDOTAClientMsg_SwapAccept(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SwapAccept);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SwapAccept other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SwapAccept other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_WorldLine : pb::IMessage<CDOTAClientMsg_WorldLine> {
  private static readonly pb::MessageParser<CDOTAClientMsg_WorldLine> _parser = new pb::MessageParser<CDOTAClientMsg_WorldLine>(() => new CDOTAClientMsg_WorldLine());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_WorldLine> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_WorldLine() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_WorldLine(CDOTAClientMsg_WorldLine other) : this() {
    worldline_ = other.worldline_ != null ? other.worldline_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_WorldLine Clone() {
    return new CDOTAClientMsg_WorldLine(this);
  }

  /// <summary>Field number for the "worldline" field.</summary>
  public const int WorldlineFieldNumber = 1;
  private global::CDOTAMsg_WorldLine worldline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CDOTAMsg_WorldLine Worldline {
    get { return worldline_; }
    set {
      worldline_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_WorldLine);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_WorldLine other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Worldline, other.Worldline)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (worldline_ != null) hash ^= Worldline.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (worldline_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Worldline);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (worldline_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worldline);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_WorldLine other) {
    if (other == null) {
      return;
    }
    if (other.worldline_ != null) {
      if (worldline_ == null) {
        worldline_ = new global::CDOTAMsg_WorldLine();
      }
      Worldline.MergeFrom(other.Worldline);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (worldline_ == null) {
            worldline_ = new global::CDOTAMsg_WorldLine();
          }
          input.ReadMessage(worldline_);
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_RequestGraphUpdate : pb::IMessage<CDOTAClientMsg_RequestGraphUpdate> {
  private static readonly pb::MessageParser<CDOTAClientMsg_RequestGraphUpdate> _parser = new pb::MessageParser<CDOTAClientMsg_RequestGraphUpdate>(() => new CDOTAClientMsg_RequestGraphUpdate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_RequestGraphUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestGraphUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestGraphUpdate(CDOTAClientMsg_RequestGraphUpdate other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestGraphUpdate Clone() {
    return new CDOTAClientMsg_RequestGraphUpdate(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_RequestGraphUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_RequestGraphUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_RequestGraphUpdate other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ChatWheel : pb::IMessage<CDOTAClientMsg_ChatWheel> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ChatWheel> _parser = new pb::MessageParser<CDOTAClientMsg_ChatWheel>(() => new CDOTAClientMsg_ChatWheel());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ChatWheel> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChatWheel() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChatWheel(CDOTAClientMsg_ChatWheel other) : this() {
    chatMessageId_ = other.chatMessageId_;
    paramHeroId_ = other.paramHeroId_;
    emoticonId_ = other.emoticonId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChatWheel Clone() {
    return new CDOTAClientMsg_ChatWheel(this);
  }

  /// <summary>Field number for the "chat_message_id" field.</summary>
  public const int ChatMessageIdFieldNumber = 1;
  private uint chatMessageId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChatMessageId {
    get { return chatMessageId_; }
    set {
      chatMessageId_ = value;
    }
  }

  /// <summary>Field number for the "param_hero_id" field.</summary>
  public const int ParamHeroIdFieldNumber = 2;
  private uint paramHeroId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ParamHeroId {
    get { return paramHeroId_; }
    set {
      paramHeroId_ = value;
    }
  }

  /// <summary>Field number for the "emoticon_id" field.</summary>
  public const int EmoticonIdFieldNumber = 3;
  private uint emoticonId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EmoticonId {
    get { return emoticonId_; }
    set {
      emoticonId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ChatWheel);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ChatWheel other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChatMessageId != other.ChatMessageId) return false;
    if (ParamHeroId != other.ParamHeroId) return false;
    if (EmoticonId != other.EmoticonId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChatMessageId != 0) hash ^= ChatMessageId.GetHashCode();
    if (ParamHeroId != 0) hash ^= ParamHeroId.GetHashCode();
    if (EmoticonId != 0) hash ^= EmoticonId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChatMessageId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ChatMessageId);
    }
    if (ParamHeroId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ParamHeroId);
    }
    if (EmoticonId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(EmoticonId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChatMessageId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatMessageId);
    }
    if (ParamHeroId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParamHeroId);
    }
    if (EmoticonId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EmoticonId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ChatWheel other) {
    if (other == null) {
      return;
    }
    if (other.ChatMessageId != 0) {
      ChatMessageId = other.ChatMessageId;
    }
    if (other.ParamHeroId != 0) {
      ParamHeroId = other.ParamHeroId;
    }
    if (other.EmoticonId != 0) {
      EmoticonId = other.EmoticonId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChatMessageId = input.ReadUInt32();
          break;
        }
        case 16: {
          ParamHeroId = input.ReadUInt32();
          break;
        }
        case 24: {
          EmoticonId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_DismissAllStatPopups : pb::IMessage<CDOTAClientMsg_DismissAllStatPopups> {
  private static readonly pb::MessageParser<CDOTAClientMsg_DismissAllStatPopups> _parser = new pb::MessageParser<CDOTAClientMsg_DismissAllStatPopups>(() => new CDOTAClientMsg_DismissAllStatPopups());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_DismissAllStatPopups> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DismissAllStatPopups() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DismissAllStatPopups(CDOTAClientMsg_DismissAllStatPopups other) : this() {
    dismissallmsg_ = other.dismissallmsg_ != null ? other.dismissallmsg_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DismissAllStatPopups Clone() {
    return new CDOTAClientMsg_DismissAllStatPopups(this);
  }

  /// <summary>Field number for the "dismissallmsg" field.</summary>
  public const int DismissallmsgFieldNumber = 1;
  private global::CDOTAMsg_DismissAllStatPopups dismissallmsg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CDOTAMsg_DismissAllStatPopups Dismissallmsg {
    get { return dismissallmsg_; }
    set {
      dismissallmsg_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_DismissAllStatPopups);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_DismissAllStatPopups other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Dismissallmsg, other.Dismissallmsg)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dismissallmsg_ != null) hash ^= Dismissallmsg.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dismissallmsg_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Dismissallmsg);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dismissallmsg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dismissallmsg);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_DismissAllStatPopups other) {
    if (other == null) {
      return;
    }
    if (other.dismissallmsg_ != null) {
      if (dismissallmsg_ == null) {
        dismissallmsg_ = new global::CDOTAMsg_DismissAllStatPopups();
      }
      Dismissallmsg.MergeFrom(other.Dismissallmsg);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (dismissallmsg_ == null) {
            dismissallmsg_ = new global::CDOTAMsg_DismissAllStatPopups();
          }
          input.ReadMessage(dismissallmsg_);
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_BeginLastHitChallenge : pb::IMessage<CDOTAClientMsg_BeginLastHitChallenge> {
  private static readonly pb::MessageParser<CDOTAClientMsg_BeginLastHitChallenge> _parser = new pb::MessageParser<CDOTAClientMsg_BeginLastHitChallenge>(() => new CDOTAClientMsg_BeginLastHitChallenge());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_BeginLastHitChallenge> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BeginLastHitChallenge() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BeginLastHitChallenge(CDOTAClientMsg_BeginLastHitChallenge other) : this() {
    chosenLane_ = other.chosenLane_;
    helperEnabled_ = other.helperEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BeginLastHitChallenge Clone() {
    return new CDOTAClientMsg_BeginLastHitChallenge(this);
  }

  /// <summary>Field number for the "chosen_lane" field.</summary>
  public const int ChosenLaneFieldNumber = 1;
  private uint chosenLane_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChosenLane {
    get { return chosenLane_; }
    set {
      chosenLane_ = value;
    }
  }

  /// <summary>Field number for the "helper_enabled" field.</summary>
  public const int HelperEnabledFieldNumber = 2;
  private bool helperEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HelperEnabled {
    get { return helperEnabled_; }
    set {
      helperEnabled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_BeginLastHitChallenge);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_BeginLastHitChallenge other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChosenLane != other.ChosenLane) return false;
    if (HelperEnabled != other.HelperEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChosenLane != 0) hash ^= ChosenLane.GetHashCode();
    if (HelperEnabled != false) hash ^= HelperEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChosenLane != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ChosenLane);
    }
    if (HelperEnabled != false) {
      output.WriteRawTag(16);
      output.WriteBool(HelperEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChosenLane != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChosenLane);
    }
    if (HelperEnabled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_BeginLastHitChallenge other) {
    if (other == null) {
      return;
    }
    if (other.ChosenLane != 0) {
      ChosenLane = other.ChosenLane;
    }
    if (other.HelperEnabled != false) {
      HelperEnabled = other.HelperEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChosenLane = input.ReadUInt32();
          break;
        }
        case 16: {
          HelperEnabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_UpdateQuickBuyItem : pb::IMessage<CDOTAClientMsg_UpdateQuickBuyItem> {
  private static readonly pb::MessageParser<CDOTAClientMsg_UpdateQuickBuyItem> _parser = new pb::MessageParser<CDOTAClientMsg_UpdateQuickBuyItem>(() => new CDOTAClientMsg_UpdateQuickBuyItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_UpdateQuickBuyItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UpdateQuickBuyItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UpdateQuickBuyItem(CDOTAClientMsg_UpdateQuickBuyItem other) : this() {
    itemAbilityId_ = other.itemAbilityId_;
    purchasable_ = other.purchasable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UpdateQuickBuyItem Clone() {
    return new CDOTAClientMsg_UpdateQuickBuyItem(this);
  }

  /// <summary>Field number for the "item_ability_id" field.</summary>
  public const int ItemAbilityIdFieldNumber = 1;
  private int itemAbilityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemAbilityId {
    get { return itemAbilityId_; }
    set {
      itemAbilityId_ = value;
    }
  }

  /// <summary>Field number for the "purchasable" field.</summary>
  public const int PurchasableFieldNumber = 2;
  private bool purchasable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Purchasable {
    get { return purchasable_; }
    set {
      purchasable_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_UpdateQuickBuyItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_UpdateQuickBuyItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemAbilityId != other.ItemAbilityId) return false;
    if (Purchasable != other.Purchasable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
    if (Purchasable != false) hash ^= Purchasable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ItemAbilityId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ItemAbilityId);
    }
    if (Purchasable != false) {
      output.WriteRawTag(16);
      output.WriteBool(Purchasable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ItemAbilityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
    }
    if (Purchasable != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_UpdateQuickBuyItem other) {
    if (other == null) {
      return;
    }
    if (other.ItemAbilityId != 0) {
      ItemAbilityId = other.ItemAbilityId;
    }
    if (other.Purchasable != false) {
      Purchasable = other.Purchasable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ItemAbilityId = input.ReadInt32();
          break;
        }
        case 16: {
          Purchasable = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_UpdateQuickBuy : pb::IMessage<CDOTAClientMsg_UpdateQuickBuy> {
  private static readonly pb::MessageParser<CDOTAClientMsg_UpdateQuickBuy> _parser = new pb::MessageParser<CDOTAClientMsg_UpdateQuickBuy>(() => new CDOTAClientMsg_UpdateQuickBuy());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_UpdateQuickBuy> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UpdateQuickBuy() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UpdateQuickBuy(CDOTAClientMsg_UpdateQuickBuy other) : this() {
    items_ = other.items_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_UpdateQuickBuy Clone() {
    return new CDOTAClientMsg_UpdateQuickBuy(this);
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CDOTAClientMsg_UpdateQuickBuyItem> _repeated_items_codec
      = pb::FieldCodec.ForMessage(10, global::CDOTAClientMsg_UpdateQuickBuyItem.Parser);
  private readonly pbc::RepeatedField<global::CDOTAClientMsg_UpdateQuickBuyItem> items_ = new pbc::RepeatedField<global::CDOTAClientMsg_UpdateQuickBuyItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CDOTAClientMsg_UpdateQuickBuyItem> Items {
    get { return items_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_UpdateQuickBuy);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_UpdateQuickBuy other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!items_.Equals(other.items_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= items_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    items_.WriteTo(output, _repeated_items_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += items_.CalculateSize(_repeated_items_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_UpdateQuickBuy other) {
    if (other == null) {
      return;
    }
    items_.Add(other.items_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          items_.AddEntriesFrom(input, _repeated_items_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_RecordVote : pb::IMessage<CDOTAClientMsg_RecordVote> {
  private static readonly pb::MessageParser<CDOTAClientMsg_RecordVote> _parser = new pb::MessageParser<CDOTAClientMsg_RecordVote>(() => new CDOTAClientMsg_RecordVote());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_RecordVote> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RecordVote() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RecordVote(CDOTAClientMsg_RecordVote other) : this() {
    choiceIndex_ = other.choiceIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RecordVote Clone() {
    return new CDOTAClientMsg_RecordVote(this);
  }

  /// <summary>Field number for the "choice_index" field.</summary>
  public const int ChoiceIndexFieldNumber = 1;
  private int choiceIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChoiceIndex {
    get { return choiceIndex_; }
    set {
      choiceIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_RecordVote);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_RecordVote other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChoiceIndex != other.ChoiceIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChoiceIndex != 0) hash ^= ChoiceIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChoiceIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ChoiceIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChoiceIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChoiceIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_RecordVote other) {
    if (other == null) {
      return;
    }
    if (other.ChoiceIndex != 0) {
      ChoiceIndex = other.ChoiceIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChoiceIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_WillPurchaseAlert : pb::IMessage<CDOTAClientMsg_WillPurchaseAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_WillPurchaseAlert> _parser = new pb::MessageParser<CDOTAClientMsg_WillPurchaseAlert>(() => new CDOTAClientMsg_WillPurchaseAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_WillPurchaseAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_WillPurchaseAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_WillPurchaseAlert(CDOTAClientMsg_WillPurchaseAlert other) : this() {
    itemAbilityId_ = other.itemAbilityId_;
    goldRemaining_ = other.goldRemaining_;
    suggestionPlayerId_ = other.suggestionPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_WillPurchaseAlert Clone() {
    return new CDOTAClientMsg_WillPurchaseAlert(this);
  }

  /// <summary>Field number for the "item_ability_id" field.</summary>
  public const int ItemAbilityIdFieldNumber = 1;
  private int itemAbilityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemAbilityId {
    get { return itemAbilityId_; }
    set {
      itemAbilityId_ = value;
    }
  }

  /// <summary>Field number for the "gold_remaining" field.</summary>
  public const int GoldRemainingFieldNumber = 2;
  private uint goldRemaining_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GoldRemaining {
    get { return goldRemaining_; }
    set {
      goldRemaining_ = value;
    }
  }

  /// <summary>Field number for the "suggestion_player_id" field.</summary>
  public const int SuggestionPlayerIdFieldNumber = 3;
  private int suggestionPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SuggestionPlayerId {
    get { return suggestionPlayerId_; }
    set {
      suggestionPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_WillPurchaseAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_WillPurchaseAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemAbilityId != other.ItemAbilityId) return false;
    if (GoldRemaining != other.GoldRemaining) return false;
    if (SuggestionPlayerId != other.SuggestionPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
    if (GoldRemaining != 0) hash ^= GoldRemaining.GetHashCode();
    if (SuggestionPlayerId != 0) hash ^= SuggestionPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ItemAbilityId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ItemAbilityId);
    }
    if (GoldRemaining != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GoldRemaining);
    }
    if (SuggestionPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SuggestionPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ItemAbilityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
    }
    if (GoldRemaining != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldRemaining);
    }
    if (SuggestionPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuggestionPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_WillPurchaseAlert other) {
    if (other == null) {
      return;
    }
    if (other.ItemAbilityId != 0) {
      ItemAbilityId = other.ItemAbilityId;
    }
    if (other.GoldRemaining != 0) {
      GoldRemaining = other.GoldRemaining;
    }
    if (other.SuggestionPlayerId != 0) {
      SuggestionPlayerId = other.SuggestionPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ItemAbilityId = input.ReadInt32();
          break;
        }
        case 16: {
          GoldRemaining = input.ReadUInt32();
          break;
        }
        case 24: {
          SuggestionPlayerId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_BuyBackStateAlert : pb::IMessage<CDOTAClientMsg_BuyBackStateAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_BuyBackStateAlert> _parser = new pb::MessageParser<CDOTAClientMsg_BuyBackStateAlert>(() => new CDOTAClientMsg_BuyBackStateAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_BuyBackStateAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BuyBackStateAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BuyBackStateAlert(CDOTAClientMsg_BuyBackStateAlert other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BuyBackStateAlert Clone() {
    return new CDOTAClientMsg_BuyBackStateAlert(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_BuyBackStateAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_BuyBackStateAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_BuyBackStateAlert other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_QuickBuyAlert : pb::IMessage<CDOTAClientMsg_QuickBuyAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_QuickBuyAlert> _parser = new pb::MessageParser<CDOTAClientMsg_QuickBuyAlert>(() => new CDOTAClientMsg_QuickBuyAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_QuickBuyAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_QuickBuyAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_QuickBuyAlert(CDOTAClientMsg_QuickBuyAlert other) : this() {
    itemAbilityId_ = other.itemAbilityId_;
    goldCost_ = other.goldCost_;
    itemCooldownSeconds_ = other.itemCooldownSeconds_;
    showBuyback_ = other.showBuyback_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_QuickBuyAlert Clone() {
    return new CDOTAClientMsg_QuickBuyAlert(this);
  }

  /// <summary>Field number for the "item_ability_id" field.</summary>
  public const int ItemAbilityIdFieldNumber = 1;
  private int itemAbilityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemAbilityId {
    get { return itemAbilityId_; }
    set {
      itemAbilityId_ = value;
    }
  }

  /// <summary>Field number for the "gold_cost" field.</summary>
  public const int GoldCostFieldNumber = 2;
  private int goldCost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldCost {
    get { return goldCost_; }
    set {
      goldCost_ = value;
    }
  }

  /// <summary>Field number for the "item_cooldown_seconds" field.</summary>
  public const int ItemCooldownSecondsFieldNumber = 3;
  private int itemCooldownSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemCooldownSeconds {
    get { return itemCooldownSeconds_; }
    set {
      itemCooldownSeconds_ = value;
    }
  }

  /// <summary>Field number for the "show_buyback" field.</summary>
  public const int ShowBuybackFieldNumber = 4;
  private bool showBuyback_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowBuyback {
    get { return showBuyback_; }
    set {
      showBuyback_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_QuickBuyAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_QuickBuyAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemAbilityId != other.ItemAbilityId) return false;
    if (GoldCost != other.GoldCost) return false;
    if (ItemCooldownSeconds != other.ItemCooldownSeconds) return false;
    if (ShowBuyback != other.ShowBuyback) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
    if (GoldCost != 0) hash ^= GoldCost.GetHashCode();
    if (ItemCooldownSeconds != 0) hash ^= ItemCooldownSeconds.GetHashCode();
    if (ShowBuyback != false) hash ^= ShowBuyback.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ItemAbilityId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ItemAbilityId);
    }
    if (GoldCost != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldCost);
    }
    if (ItemCooldownSeconds != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ItemCooldownSeconds);
    }
    if (ShowBuyback != false) {
      output.WriteRawTag(32);
      output.WriteBool(ShowBuyback);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ItemAbilityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAbilityId);
    }
    if (GoldCost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldCost);
    }
    if (ItemCooldownSeconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCooldownSeconds);
    }
    if (ShowBuyback != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_QuickBuyAlert other) {
    if (other == null) {
      return;
    }
    if (other.ItemAbilityId != 0) {
      ItemAbilityId = other.ItemAbilityId;
    }
    if (other.GoldCost != 0) {
      GoldCost = other.GoldCost;
    }
    if (other.ItemCooldownSeconds != 0) {
      ItemCooldownSeconds = other.ItemCooldownSeconds;
    }
    if (other.ShowBuyback != false) {
      ShowBuyback = other.ShowBuyback;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ItemAbilityId = input.ReadInt32();
          break;
        }
        case 16: {
          GoldCost = input.ReadInt32();
          break;
        }
        case 24: {
          ItemCooldownSeconds = input.ReadInt32();
          break;
        }
        case 32: {
          ShowBuyback = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_PlayerShowCase : pb::IMessage<CDOTAClientMsg_PlayerShowCase> {
  private static readonly pb::MessageParser<CDOTAClientMsg_PlayerShowCase> _parser = new pb::MessageParser<CDOTAClientMsg_PlayerShowCase>(() => new CDOTAClientMsg_PlayerShowCase());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_PlayerShowCase> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_PlayerShowCase() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_PlayerShowCase(CDOTAClientMsg_PlayerShowCase other) : this() {
    showcase_ = other.showcase_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_PlayerShowCase Clone() {
    return new CDOTAClientMsg_PlayerShowCase(this);
  }

  /// <summary>Field number for the "showcase" field.</summary>
  public const int ShowcaseFieldNumber = 1;
  private bool showcase_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Showcase {
    get { return showcase_; }
    set {
      showcase_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_PlayerShowCase);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_PlayerShowCase other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Showcase != other.Showcase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Showcase != false) hash ^= Showcase.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Showcase != false) {
      output.WriteRawTag(8);
      output.WriteBool(Showcase);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Showcase != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_PlayerShowCase other) {
    if (other == null) {
      return;
    }
    if (other.Showcase != false) {
      Showcase = other.Showcase;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Showcase = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_CameraZoomAmount : pb::IMessage<CDOTAClientMsg_CameraZoomAmount> {
  private static readonly pb::MessageParser<CDOTAClientMsg_CameraZoomAmount> _parser = new pb::MessageParser<CDOTAClientMsg_CameraZoomAmount>(() => new CDOTAClientMsg_CameraZoomAmount());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_CameraZoomAmount> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CameraZoomAmount() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CameraZoomAmount(CDOTAClientMsg_CameraZoomAmount other) : this() {
    zoomAmount_ = other.zoomAmount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CameraZoomAmount Clone() {
    return new CDOTAClientMsg_CameraZoomAmount(this);
  }

  /// <summary>Field number for the "zoom_amount" field.</summary>
  public const int ZoomAmountFieldNumber = 1;
  private float zoomAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ZoomAmount {
    get { return zoomAmount_; }
    set {
      zoomAmount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_CameraZoomAmount);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_CameraZoomAmount other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoomAmount, other.ZoomAmount)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ZoomAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoomAmount);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ZoomAmount != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(ZoomAmount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ZoomAmount != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_CameraZoomAmount other) {
    if (other == null) {
      return;
    }
    if (other.ZoomAmount != 0F) {
      ZoomAmount = other.ZoomAmount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ZoomAmount = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_BroadcasterUsingCameraman : pb::IMessage<CDOTAClientMsg_BroadcasterUsingCameraman> {
  private static readonly pb::MessageParser<CDOTAClientMsg_BroadcasterUsingCameraman> _parser = new pb::MessageParser<CDOTAClientMsg_BroadcasterUsingCameraman>(() => new CDOTAClientMsg_BroadcasterUsingCameraman());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_BroadcasterUsingCameraman> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BroadcasterUsingCameraman() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BroadcasterUsingCameraman(CDOTAClientMsg_BroadcasterUsingCameraman other) : this() {
    cameraman_ = other.cameraman_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BroadcasterUsingCameraman Clone() {
    return new CDOTAClientMsg_BroadcasterUsingCameraman(this);
  }

  /// <summary>Field number for the "cameraman" field.</summary>
  public const int CameramanFieldNumber = 1;
  private bool cameraman_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Cameraman {
    get { return cameraman_; }
    set {
      cameraman_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_BroadcasterUsingCameraman);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_BroadcasterUsingCameraman other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cameraman != other.Cameraman) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cameraman != false) hash ^= Cameraman.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Cameraman != false) {
      output.WriteRawTag(8);
      output.WriteBool(Cameraman);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cameraman != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_BroadcasterUsingCameraman other) {
    if (other == null) {
      return;
    }
    if (other.Cameraman != false) {
      Cameraman = other.Cameraman;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Cameraman = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator : pb::IMessage<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator> {
  private static readonly pb::MessageParser<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator> _parser = new pb::MessageParser<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>(() => new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator other) : this() {
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator Clone() {
    return new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enabled != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator other) {
    if (other == null) {
      return;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CAdditionalEquipSlotClientMsg : pb::IMessage<CAdditionalEquipSlotClientMsg> {
  private static readonly pb::MessageParser<CAdditionalEquipSlotClientMsg> _parser = new pb::MessageParser<CAdditionalEquipSlotClientMsg>(() => new CAdditionalEquipSlotClientMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAdditionalEquipSlotClientMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAdditionalEquipSlotClientMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAdditionalEquipSlotClientMsg(CAdditionalEquipSlotClientMsg other) : this() {
    classId_ = other.classId_;
    slotId_ = other.slotId_;
    defIndex_ = other.defIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAdditionalEquipSlotClientMsg Clone() {
    return new CAdditionalEquipSlotClientMsg(this);
  }

  /// <summary>Field number for the "class_id" field.</summary>
  public const int ClassIdFieldNumber = 1;
  private uint classId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ClassId {
    get { return classId_; }
    set {
      classId_ = value;
    }
  }

  /// <summary>Field number for the "slot_id" field.</summary>
  public const int SlotIdFieldNumber = 2;
  private uint slotId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SlotId {
    get { return slotId_; }
    set {
      slotId_ = value;
    }
  }

  /// <summary>Field number for the "def_index" field.</summary>
  public const int DefIndexFieldNumber = 3;
  private uint defIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DefIndex {
    get { return defIndex_; }
    set {
      defIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAdditionalEquipSlotClientMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAdditionalEquipSlotClientMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClassId != other.ClassId) return false;
    if (SlotId != other.SlotId) return false;
    if (DefIndex != other.DefIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClassId != 0) hash ^= ClassId.GetHashCode();
    if (SlotId != 0) hash ^= SlotId.GetHashCode();
    if (DefIndex != 0) hash ^= DefIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClassId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ClassId);
    }
    if (SlotId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(SlotId);
    }
    if (DefIndex != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(DefIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClassId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClassId);
    }
    if (SlotId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
    }
    if (DefIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAdditionalEquipSlotClientMsg other) {
    if (other == null) {
      return;
    }
    if (other.ClassId != 0) {
      ClassId = other.ClassId;
    }
    if (other.SlotId != 0) {
      SlotId = other.SlotId;
    }
    if (other.DefIndex != 0) {
      DefIndex = other.DefIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClassId = input.ReadUInt32();
          break;
        }
        case 16: {
          SlotId = input.ReadUInt32();
          break;
        }
        case 24: {
          DefIndex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_FreeInventory : pb::IMessage<CDOTAClientMsg_FreeInventory> {
  private static readonly pb::MessageParser<CDOTAClientMsg_FreeInventory> _parser = new pb::MessageParser<CDOTAClientMsg_FreeInventory>(() => new CDOTAClientMsg_FreeInventory());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_FreeInventory> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FreeInventory() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FreeInventory(CDOTAClientMsg_FreeInventory other) : this() {
    equips_ = other.equips_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FreeInventory Clone() {
    return new CDOTAClientMsg_FreeInventory(this);
  }

  /// <summary>Field number for the "equips" field.</summary>
  public const int EquipsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CAdditionalEquipSlotClientMsg> _repeated_equips_codec
      = pb::FieldCodec.ForMessage(10, global::CAdditionalEquipSlotClientMsg.Parser);
  private readonly pbc::RepeatedField<global::CAdditionalEquipSlotClientMsg> equips_ = new pbc::RepeatedField<global::CAdditionalEquipSlotClientMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CAdditionalEquipSlotClientMsg> Equips {
    get { return equips_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_FreeInventory);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_FreeInventory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!equips_.Equals(other.equips_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= equips_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    equips_.WriteTo(output, _repeated_equips_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += equips_.CalculateSize(_repeated_equips_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_FreeInventory other) {
    if (other == null) {
      return;
    }
    equips_.Add(other.equips_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          equips_.AddEntriesFrom(input, _repeated_equips_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_FillEmptySlotsWithBots : pb::IMessage<CDOTAClientMsg_FillEmptySlotsWithBots> {
  private static readonly pb::MessageParser<CDOTAClientMsg_FillEmptySlotsWithBots> _parser = new pb::MessageParser<CDOTAClientMsg_FillEmptySlotsWithBots>(() => new CDOTAClientMsg_FillEmptySlotsWithBots());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_FillEmptySlotsWithBots> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FillEmptySlotsWithBots() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FillEmptySlotsWithBots(CDOTAClientMsg_FillEmptySlotsWithBots other) : this() {
    fillwithbots_ = other.fillwithbots_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FillEmptySlotsWithBots Clone() {
    return new CDOTAClientMsg_FillEmptySlotsWithBots(this);
  }

  /// <summary>Field number for the "fillwithbots" field.</summary>
  public const int FillwithbotsFieldNumber = 1;
  private bool fillwithbots_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Fillwithbots {
    get { return fillwithbots_; }
    set {
      fillwithbots_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_FillEmptySlotsWithBots);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_FillEmptySlotsWithBots other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Fillwithbots != other.Fillwithbots) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Fillwithbots != false) hash ^= Fillwithbots.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Fillwithbots != false) {
      output.WriteRawTag(8);
      output.WriteBool(Fillwithbots);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Fillwithbots != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_FillEmptySlotsWithBots other) {
    if (other == null) {
      return;
    }
    if (other.Fillwithbots != false) {
      Fillwithbots = other.Fillwithbots;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Fillwithbots = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_HeroStatueLike : pb::IMessage<CDOTAClientMsg_HeroStatueLike> {
  private static readonly pb::MessageParser<CDOTAClientMsg_HeroStatueLike> _parser = new pb::MessageParser<CDOTAClientMsg_HeroStatueLike>(() => new CDOTAClientMsg_HeroStatueLike());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_HeroStatueLike> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HeroStatueLike() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HeroStatueLike(CDOTAClientMsg_HeroStatueLike other) : this() {
    ownerPlayerId_ = other.ownerPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HeroStatueLike Clone() {
    return new CDOTAClientMsg_HeroStatueLike(this);
  }

  /// <summary>Field number for the "owner_player_id" field.</summary>
  public const int OwnerPlayerIdFieldNumber = 1;
  private uint ownerPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint OwnerPlayerId {
    get { return ownerPlayerId_; }
    set {
      ownerPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_HeroStatueLike);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_HeroStatueLike other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OwnerPlayerId != other.OwnerPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OwnerPlayerId != 0) hash ^= OwnerPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OwnerPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(OwnerPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OwnerPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_HeroStatueLike other) {
    if (other == null) {
      return;
    }
    if (other.OwnerPlayerId != 0) {
      OwnerPlayerId = other.OwnerPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OwnerPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_EventCNY2015Cmd : pb::IMessage<CDOTAClientMsg_EventCNY2015Cmd> {
  private static readonly pb::MessageParser<CDOTAClientMsg_EventCNY2015Cmd> _parser = new pb::MessageParser<CDOTAClientMsg_EventCNY2015Cmd>(() => new CDOTAClientMsg_EventCNY2015Cmd());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_EventCNY2015Cmd> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EventCNY2015Cmd() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EventCNY2015Cmd(CDOTAClientMsg_EventCNY2015Cmd other) : this() {
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EventCNY2015Cmd Clone() {
    return new CDOTAClientMsg_EventCNY2015Cmd(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_EventCNY2015Cmd);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_EventCNY2015Cmd other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_EventCNY2015Cmd other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_DemoHero : pb::IMessage<CDOTAClientMsg_DemoHero> {
  private static readonly pb::MessageParser<CDOTAClientMsg_DemoHero> _parser = new pb::MessageParser<CDOTAClientMsg_DemoHero>(() => new CDOTAClientMsg_DemoHero());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_DemoHero> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DemoHero() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DemoHero(CDOTAClientMsg_DemoHero other) : this() {
    heroId_ = other.heroId_;
    heroIdToSpawn_ = other.heroIdToSpawn_;
    itemDefs_ = other.itemDefs_.Clone();
    itemIds_ = other.itemIds_.Clone();
    styleIndex_ = other.styleIndex_;
    keepExistingDemohero_ = other.keepExistingDemohero_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DemoHero Clone() {
    return new CDOTAClientMsg_DemoHero(this);
  }

  /// <summary>Field number for the "hero_id" field.</summary>
  public const int HeroIdFieldNumber = 1;
  private int heroId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeroId {
    get { return heroId_; }
    set {
      heroId_ = value;
    }
  }

  /// <summary>Field number for the "hero_id_to_spawn" field.</summary>
  public const int HeroIdToSpawnFieldNumber = 2;
  private int heroIdToSpawn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeroIdToSpawn {
    get { return heroIdToSpawn_; }
    set {
      heroIdToSpawn_ = value;
    }
  }

  /// <summary>Field number for the "item_defs" field.</summary>
  public const int ItemDefsFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_itemDefs_codec
      = pb::FieldCodec.ForUInt32(26);
  private readonly pbc::RepeatedField<uint> itemDefs_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ItemDefs {
    get { return itemDefs_; }
  }

  /// <summary>Field number for the "item_ids" field.</summary>
  public const int ItemIdsFieldNumber = 4;
  private static readonly pb::FieldCodec<ulong> _repeated_itemIds_codec
      = pb::FieldCodec.ForUInt64(34);
  private readonly pbc::RepeatedField<ulong> itemIds_ = new pbc::RepeatedField<ulong>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> ItemIds {
    get { return itemIds_; }
  }

  /// <summary>Field number for the "style_index" field.</summary>
  public const int StyleIndexFieldNumber = 5;
  private uint styleIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StyleIndex {
    get { return styleIndex_; }
    set {
      styleIndex_ = value;
    }
  }

  /// <summary>Field number for the "keep_existing_demohero" field.</summary>
  public const int KeepExistingDemoheroFieldNumber = 6;
  private bool keepExistingDemohero_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool KeepExistingDemohero {
    get { return keepExistingDemohero_; }
    set {
      keepExistingDemohero_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_DemoHero);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_DemoHero other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HeroId != other.HeroId) return false;
    if (HeroIdToSpawn != other.HeroIdToSpawn) return false;
    if(!itemDefs_.Equals(other.itemDefs_)) return false;
    if(!itemIds_.Equals(other.itemIds_)) return false;
    if (StyleIndex != other.StyleIndex) return false;
    if (KeepExistingDemohero != other.KeepExistingDemohero) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HeroId != 0) hash ^= HeroId.GetHashCode();
    if (HeroIdToSpawn != 0) hash ^= HeroIdToSpawn.GetHashCode();
    hash ^= itemDefs_.GetHashCode();
    hash ^= itemIds_.GetHashCode();
    if (StyleIndex != 0) hash ^= StyleIndex.GetHashCode();
    if (KeepExistingDemohero != false) hash ^= KeepExistingDemohero.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HeroId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(HeroId);
    }
    if (HeroIdToSpawn != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(HeroIdToSpawn);
    }
    itemDefs_.WriteTo(output, _repeated_itemDefs_codec);
    itemIds_.WriteTo(output, _repeated_itemIds_codec);
    if (StyleIndex != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(StyleIndex);
    }
    if (KeepExistingDemohero != false) {
      output.WriteRawTag(48);
      output.WriteBool(KeepExistingDemohero);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HeroId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
    }
    if (HeroIdToSpawn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroIdToSpawn);
    }
    size += itemDefs_.CalculateSize(_repeated_itemDefs_codec);
    size += itemIds_.CalculateSize(_repeated_itemIds_codec);
    if (StyleIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StyleIndex);
    }
    if (KeepExistingDemohero != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_DemoHero other) {
    if (other == null) {
      return;
    }
    if (other.HeroId != 0) {
      HeroId = other.HeroId;
    }
    if (other.HeroIdToSpawn != 0) {
      HeroIdToSpawn = other.HeroIdToSpawn;
    }
    itemDefs_.Add(other.itemDefs_);
    itemIds_.Add(other.itemIds_);
    if (other.StyleIndex != 0) {
      StyleIndex = other.StyleIndex;
    }
    if (other.KeepExistingDemohero != false) {
      KeepExistingDemohero = other.KeepExistingDemohero;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          HeroId = input.ReadInt32();
          break;
        }
        case 16: {
          HeroIdToSpawn = input.ReadInt32();
          break;
        }
        case 26:
        case 24: {
          itemDefs_.AddEntriesFrom(input, _repeated_itemDefs_codec);
          break;
        }
        case 34:
        case 32: {
          itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
          break;
        }
        case 40: {
          StyleIndex = input.ReadUInt32();
          break;
        }
        case 48: {
          KeepExistingDemohero = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ChallengeSelect : pb::IMessage<CDOTAClientMsg_ChallengeSelect> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ChallengeSelect> _parser = new pb::MessageParser<CDOTAClientMsg_ChallengeSelect>(() => new CDOTAClientMsg_ChallengeSelect());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ChallengeSelect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChallengeSelect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChallengeSelect(CDOTAClientMsg_ChallengeSelect other) : this() {
    eventId_ = other.eventId_;
    slotId_ = other.slotId_;
    sequenceId_ = other.sequenceId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ChallengeSelect Clone() {
    return new CDOTAClientMsg_ChallengeSelect(this);
  }

  /// <summary>Field number for the "event_id" field.</summary>
  public const int EventIdFieldNumber = 1;
  private uint eventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EventId {
    get { return eventId_; }
    set {
      eventId_ = value;
    }
  }

  /// <summary>Field number for the "slot_id" field.</summary>
  public const int SlotIdFieldNumber = 2;
  private uint slotId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SlotId {
    get { return slotId_; }
    set {
      slotId_ = value;
    }
  }

  /// <summary>Field number for the "sequence_id" field.</summary>
  public const int SequenceIdFieldNumber = 3;
  private uint sequenceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SequenceId {
    get { return sequenceId_; }
    set {
      sequenceId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ChallengeSelect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ChallengeSelect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventId != other.EventId) return false;
    if (SlotId != other.SlotId) return false;
    if (SequenceId != other.SequenceId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventId != 0) hash ^= EventId.GetHashCode();
    if (SlotId != 0) hash ^= SlotId.GetHashCode();
    if (SequenceId != 0) hash ^= SequenceId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(EventId);
    }
    if (SlotId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(SlotId);
    }
    if (SequenceId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SequenceId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
    }
    if (SlotId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
    }
    if (SequenceId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ChallengeSelect other) {
    if (other == null) {
      return;
    }
    if (other.EventId != 0) {
      EventId = other.EventId;
    }
    if (other.SlotId != 0) {
      SlotId = other.SlotId;
    }
    if (other.SequenceId != 0) {
      SequenceId = other.SequenceId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EventId = input.ReadUInt32();
          break;
        }
        case 16: {
          SlotId = input.ReadUInt32();
          break;
        }
        case 24: {
          SequenceId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_CoinWager : pb::IMessage<CDOTAClientMsg_CoinWager> {
  private static readonly pb::MessageParser<CDOTAClientMsg_CoinWager> _parser = new pb::MessageParser<CDOTAClientMsg_CoinWager>(() => new CDOTAClientMsg_CoinWager());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_CoinWager> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CoinWager() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CoinWager(CDOTAClientMsg_CoinWager other) : this() {
    wagerAmount_ = other.wagerAmount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CoinWager Clone() {
    return new CDOTAClientMsg_CoinWager(this);
  }

  /// <summary>Field number for the "wager_amount" field.</summary>
  public const int WagerAmountFieldNumber = 1;
  private uint wagerAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WagerAmount {
    get { return wagerAmount_; }
    set {
      wagerAmount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_CoinWager);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_CoinWager other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WagerAmount != other.WagerAmount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WagerAmount != 0) hash ^= WagerAmount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WagerAmount != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(WagerAmount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WagerAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WagerAmount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_CoinWager other) {
    if (other == null) {
      return;
    }
    if (other.WagerAmount != 0) {
      WagerAmount = other.WagerAmount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          WagerAmount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_CoinWagerToken : pb::IMessage<CDOTAClientMsg_CoinWagerToken> {
  private static readonly pb::MessageParser<CDOTAClientMsg_CoinWagerToken> _parser = new pb::MessageParser<CDOTAClientMsg_CoinWagerToken>(() => new CDOTAClientMsg_CoinWagerToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_CoinWagerToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CoinWagerToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CoinWagerToken(CDOTAClientMsg_CoinWagerToken other) : this() {
    wagerTokenItemId_ = other.wagerTokenItemId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_CoinWagerToken Clone() {
    return new CDOTAClientMsg_CoinWagerToken(this);
  }

  /// <summary>Field number for the "wager_token_item_id" field.</summary>
  public const int WagerTokenItemIdFieldNumber = 1;
  private ulong wagerTokenItemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong WagerTokenItemId {
    get { return wagerTokenItemId_; }
    set {
      wagerTokenItemId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_CoinWagerToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_CoinWagerToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WagerTokenItemId != other.WagerTokenItemId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WagerTokenItemId != 0UL) hash ^= WagerTokenItemId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WagerTokenItemId != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(WagerTokenItemId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WagerTokenItemId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WagerTokenItemId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_CoinWagerToken other) {
    if (other == null) {
      return;
    }
    if (other.WagerTokenItemId != 0UL) {
      WagerTokenItemId = other.WagerTokenItemId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          WagerTokenItemId = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_RankWager : pb::IMessage<CDOTAClientMsg_RankWager> {
  private static readonly pb::MessageParser<CDOTAClientMsg_RankWager> _parser = new pb::MessageParser<CDOTAClientMsg_RankWager>(() => new CDOTAClientMsg_RankWager());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_RankWager> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RankWager() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RankWager(CDOTAClientMsg_RankWager other) : this() {
    announceWager_ = other.announceWager_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RankWager Clone() {
    return new CDOTAClientMsg_RankWager(this);
  }

  /// <summary>Field number for the "announce_wager" field.</summary>
  public const int AnnounceWagerFieldNumber = 1;
  private bool announceWager_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AnnounceWager {
    get { return announceWager_; }
    set {
      announceWager_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_RankWager);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_RankWager other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AnnounceWager != other.AnnounceWager) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AnnounceWager != false) hash ^= AnnounceWager.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AnnounceWager != false) {
      output.WriteRawTag(8);
      output.WriteBool(AnnounceWager);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AnnounceWager != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_RankWager other) {
    if (other == null) {
      return;
    }
    if (other.AnnounceWager != false) {
      AnnounceWager = other.AnnounceWager;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AnnounceWager = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_EventPointsTip : pb::IMessage<CDOTAClientMsg_EventPointsTip> {
  private static readonly pb::MessageParser<CDOTAClientMsg_EventPointsTip> _parser = new pb::MessageParser<CDOTAClientMsg_EventPointsTip>(() => new CDOTAClientMsg_EventPointsTip());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_EventPointsTip> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EventPointsTip() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EventPointsTip(CDOTAClientMsg_EventPointsTip other) : this() {
    recipientPlayerId_ = other.recipientPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EventPointsTip Clone() {
    return new CDOTAClientMsg_EventPointsTip(this);
  }

  /// <summary>Field number for the "recipient_player_id" field.</summary>
  public const int RecipientPlayerIdFieldNumber = 1;
  private uint recipientPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RecipientPlayerId {
    get { return recipientPlayerId_; }
    set {
      recipientPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_EventPointsTip);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_EventPointsTip other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RecipientPlayerId != other.RecipientPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RecipientPlayerId != 0) hash ^= RecipientPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RecipientPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(RecipientPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RecipientPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecipientPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_EventPointsTip other) {
    if (other == null) {
      return;
    }
    if (other.RecipientPlayerId != 0) {
      RecipientPlayerId = other.RecipientPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RecipientPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_XPAlert : pb::IMessage<CDOTAClientMsg_XPAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_XPAlert> _parser = new pb::MessageParser<CDOTAClientMsg_XPAlert>(() => new CDOTAClientMsg_XPAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_XPAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_XPAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_XPAlert(CDOTAClientMsg_XPAlert other) : this() {
    targetEntindex_ = other.targetEntindex_;
    damageTaken_ = other.damageTaken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_XPAlert Clone() {
    return new CDOTAClientMsg_XPAlert(this);
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 1;
  private uint targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  /// <summary>Field number for the "damage_taken" field.</summary>
  public const int DamageTakenFieldNumber = 2;
  private uint damageTaken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DamageTaken {
    get { return damageTaken_; }
    set {
      damageTaken_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_XPAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_XPAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetEntindex != other.TargetEntindex) return false;
    if (DamageTaken != other.DamageTaken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (DamageTaken != 0) hash ^= DamageTaken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetEntindex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetEntindex);
    }
    if (DamageTaken != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(DamageTaken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
    }
    if (DamageTaken != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageTaken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_XPAlert other) {
    if (other == null) {
      return;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    if (other.DamageTaken != 0) {
      DamageTaken = other.DamageTaken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetEntindex = input.ReadUInt32();
          break;
        }
        case 16: {
          DamageTaken = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_TalentTreeAlert : pb::IMessage<CDOTAClientMsg_TalentTreeAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_TalentTreeAlert> _parser = new pb::MessageParser<CDOTAClientMsg_TalentTreeAlert>(() => new CDOTAClientMsg_TalentTreeAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_TalentTreeAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TalentTreeAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TalentTreeAlert(CDOTAClientMsg_TalentTreeAlert other) : this() {
    targetEntindex_ = other.targetEntindex_;
    abilityId_ = other.abilityId_;
    slot_ = other.slot_;
    learned_ = other.learned_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TalentTreeAlert Clone() {
    return new CDOTAClientMsg_TalentTreeAlert(this);
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 1;
  private uint targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  /// <summary>Field number for the "ability_id" field.</summary>
  public const int AbilityIdFieldNumber = 2;
  private int abilityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AbilityId {
    get { return abilityId_; }
    set {
      abilityId_ = value;
    }
  }

  /// <summary>Field number for the "slot" field.</summary>
  public const int SlotFieldNumber = 3;
  private int slot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Slot {
    get { return slot_; }
    set {
      slot_ = value;
    }
  }

  /// <summary>Field number for the "learned" field.</summary>
  public const int LearnedFieldNumber = 4;
  private bool learned_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Learned {
    get { return learned_; }
    set {
      learned_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_TalentTreeAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_TalentTreeAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetEntindex != other.TargetEntindex) return false;
    if (AbilityId != other.AbilityId) return false;
    if (Slot != other.Slot) return false;
    if (Learned != other.Learned) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
    if (Slot != 0) hash ^= Slot.GetHashCode();
    if (Learned != false) hash ^= Learned.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetEntindex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetEntindex);
    }
    if (AbilityId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AbilityId);
    }
    if (Slot != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Slot);
    }
    if (Learned != false) {
      output.WriteRawTag(32);
      output.WriteBool(Learned);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
    }
    if (AbilityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
    }
    if (Slot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
    }
    if (Learned != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_TalentTreeAlert other) {
    if (other == null) {
      return;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    if (other.AbilityId != 0) {
      AbilityId = other.AbilityId;
    }
    if (other.Slot != 0) {
      Slot = other.Slot;
    }
    if (other.Learned != false) {
      Learned = other.Learned;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetEntindex = input.ReadUInt32();
          break;
        }
        case 16: {
          AbilityId = input.ReadInt32();
          break;
        }
        case 24: {
          Slot = input.ReadInt32();
          break;
        }
        case 32: {
          Learned = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_KillcamDamageTaken : pb::IMessage<CDOTAClientMsg_KillcamDamageTaken> {
  private static readonly pb::MessageParser<CDOTAClientMsg_KillcamDamageTaken> _parser = new pb::MessageParser<CDOTAClientMsg_KillcamDamageTaken>(() => new CDOTAClientMsg_KillcamDamageTaken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_KillcamDamageTaken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_KillcamDamageTaken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_KillcamDamageTaken(CDOTAClientMsg_KillcamDamageTaken other) : this() {
    targetEntindex_ = other.targetEntindex_;
    damageTaken_ = other.damageTaken_;
    itemType_ = other.itemType_;
    itemAbilityId_ = other.itemAbilityId_;
    heroName_ = other.heroName_;
    damageColor_ = other.damageColor_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_KillcamDamageTaken Clone() {
    return new CDOTAClientMsg_KillcamDamageTaken(this);
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 1;
  private uint targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  /// <summary>Field number for the "damage_taken" field.</summary>
  public const int DamageTakenFieldNumber = 2;
  private uint damageTaken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DamageTaken {
    get { return damageTaken_; }
    set {
      damageTaken_ = value;
    }
  }

  /// <summary>Field number for the "item_type" field.</summary>
  public const int ItemTypeFieldNumber = 3;
  private uint itemType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ItemType {
    get { return itemType_; }
    set {
      itemType_ = value;
    }
  }

  /// <summary>Field number for the "item_ability_id" field.</summary>
  public const int ItemAbilityIdFieldNumber = 4;
  private uint itemAbilityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ItemAbilityId {
    get { return itemAbilityId_; }
    set {
      itemAbilityId_ = value;
    }
  }

  /// <summary>Field number for the "hero_name" field.</summary>
  public const int HeroNameFieldNumber = 5;
  private string heroName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeroName {
    get { return heroName_; }
    set {
      heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "damage_color" field.</summary>
  public const int DamageColorFieldNumber = 6;
  private string damageColor_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DamageColor {
    get { return damageColor_; }
    set {
      damageColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_KillcamDamageTaken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_KillcamDamageTaken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetEntindex != other.TargetEntindex) return false;
    if (DamageTaken != other.DamageTaken) return false;
    if (ItemType != other.ItemType) return false;
    if (ItemAbilityId != other.ItemAbilityId) return false;
    if (HeroName != other.HeroName) return false;
    if (DamageColor != other.DamageColor) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (DamageTaken != 0) hash ^= DamageTaken.GetHashCode();
    if (ItemType != 0) hash ^= ItemType.GetHashCode();
    if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
    if (HeroName.Length != 0) hash ^= HeroName.GetHashCode();
    if (DamageColor.Length != 0) hash ^= DamageColor.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetEntindex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetEntindex);
    }
    if (DamageTaken != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(DamageTaken);
    }
    if (ItemType != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ItemType);
    }
    if (ItemAbilityId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ItemAbilityId);
    }
    if (HeroName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(HeroName);
    }
    if (DamageColor.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(DamageColor);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
    }
    if (DamageTaken != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageTaken);
    }
    if (ItemType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemType);
    }
    if (ItemAbilityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemAbilityId);
    }
    if (HeroName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
    }
    if (DamageColor.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DamageColor);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_KillcamDamageTaken other) {
    if (other == null) {
      return;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    if (other.DamageTaken != 0) {
      DamageTaken = other.DamageTaken;
    }
    if (other.ItemType != 0) {
      ItemType = other.ItemType;
    }
    if (other.ItemAbilityId != 0) {
      ItemAbilityId = other.ItemAbilityId;
    }
    if (other.HeroName.Length != 0) {
      HeroName = other.HeroName;
    }
    if (other.DamageColor.Length != 0) {
      DamageColor = other.DamageColor;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetEntindex = input.ReadUInt32();
          break;
        }
        case 16: {
          DamageTaken = input.ReadUInt32();
          break;
        }
        case 24: {
          ItemType = input.ReadUInt32();
          break;
        }
        case 32: {
          ItemAbilityId = input.ReadUInt32();
          break;
        }
        case 42: {
          HeroName = input.ReadString();
          break;
        }
        case 50: {
          DamageColor = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_MatchMetadata : pb::IMessage<CDOTAClientMsg_MatchMetadata> {
  private static readonly pb::MessageParser<CDOTAClientMsg_MatchMetadata> _parser = new pb::MessageParser<CDOTAClientMsg_MatchMetadata>(() => new CDOTAClientMsg_MatchMetadata());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_MatchMetadata> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MatchMetadata() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MatchMetadata(CDOTAClientMsg_MatchMetadata other) : this() {
    matchId_ = other.matchId_;
    metadata_ = other.metadata_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MatchMetadata Clone() {
    return new CDOTAClientMsg_MatchMetadata(this);
  }

  /// <summary>Field number for the "match_id" field.</summary>
  public const int MatchIdFieldNumber = 1;
  private ulong matchId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong MatchId {
    get { return matchId_; }
    set {
      matchId_ = value;
    }
  }

  /// <summary>Field number for the "metadata" field.</summary>
  public const int MetadataFieldNumber = 2;
  private pb::ByteString metadata_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Metadata {
    get { return metadata_; }
    set {
      metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_MatchMetadata);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_MatchMetadata other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MatchId != other.MatchId) return false;
    if (Metadata != other.Metadata) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
    if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MatchId != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(MatchId);
    }
    if (Metadata.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Metadata);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MatchId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
    }
    if (Metadata.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_MatchMetadata other) {
    if (other == null) {
      return;
    }
    if (other.MatchId != 0UL) {
      MatchId = other.MatchId;
    }
    if (other.Metadata.Length != 0) {
      Metadata = other.Metadata;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MatchId = input.ReadUInt64();
          break;
        }
        case 18: {
          Metadata = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_KillMyHero : pb::IMessage<CDOTAClientMsg_KillMyHero> {
  private static readonly pb::MessageParser<CDOTAClientMsg_KillMyHero> _parser = new pb::MessageParser<CDOTAClientMsg_KillMyHero>(() => new CDOTAClientMsg_KillMyHero());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_KillMyHero> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_KillMyHero() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_KillMyHero(CDOTAClientMsg_KillMyHero other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_KillMyHero Clone() {
    return new CDOTAClientMsg_KillMyHero(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_KillMyHero);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_KillMyHero other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_KillMyHero other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_QuestStatus : pb::IMessage<CDOTAClientMsg_QuestStatus> {
  private static readonly pb::MessageParser<CDOTAClientMsg_QuestStatus> _parser = new pb::MessageParser<CDOTAClientMsg_QuestStatus>(() => new CDOTAClientMsg_QuestStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_QuestStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_QuestStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_QuestStatus(CDOTAClientMsg_QuestStatus other) : this() {
    questId_ = other.questId_;
    challengeId_ = other.challengeId_;
    progress_ = other.progress_;
    goal_ = other.goal_;
    query_ = other.query_;
    failGametime_ = other.failGametime_;
    itemAbilityId_ = other.itemAbilityId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_QuestStatus Clone() {
    return new CDOTAClientMsg_QuestStatus(this);
  }

  /// <summary>Field number for the "quest_id" field.</summary>
  public const int QuestIdFieldNumber = 1;
  private uint questId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint QuestId {
    get { return questId_; }
    set {
      questId_ = value;
    }
  }

  /// <summary>Field number for the "challenge_id" field.</summary>
  public const int ChallengeIdFieldNumber = 2;
  private uint challengeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChallengeId {
    get { return challengeId_; }
    set {
      challengeId_ = value;
    }
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 3;
  private uint progress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  /// <summary>Field number for the "goal" field.</summary>
  public const int GoalFieldNumber = 4;
  private uint goal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Goal {
    get { return goal_; }
    set {
      goal_ = value;
    }
  }

  /// <summary>Field number for the "query" field.</summary>
  public const int QueryFieldNumber = 5;
  private uint query_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Query {
    get { return query_; }
    set {
      query_ = value;
    }
  }

  /// <summary>Field number for the "fail_gametime" field.</summary>
  public const int FailGametimeFieldNumber = 6;
  private float failGametime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FailGametime {
    get { return failGametime_; }
    set {
      failGametime_ = value;
    }
  }

  /// <summary>Field number for the "item_ability_id" field.</summary>
  public const int ItemAbilityIdFieldNumber = 7;
  private uint itemAbilityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ItemAbilityId {
    get { return itemAbilityId_; }
    set {
      itemAbilityId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_QuestStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_QuestStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (QuestId != other.QuestId) return false;
    if (ChallengeId != other.ChallengeId) return false;
    if (Progress != other.Progress) return false;
    if (Goal != other.Goal) return false;
    if (Query != other.Query) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FailGametime, other.FailGametime)) return false;
    if (ItemAbilityId != other.ItemAbilityId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (QuestId != 0) hash ^= QuestId.GetHashCode();
    if (ChallengeId != 0) hash ^= ChallengeId.GetHashCode();
    if (Progress != 0) hash ^= Progress.GetHashCode();
    if (Goal != 0) hash ^= Goal.GetHashCode();
    if (Query != 0) hash ^= Query.GetHashCode();
    if (FailGametime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FailGametime);
    if (ItemAbilityId != 0) hash ^= ItemAbilityId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (QuestId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(QuestId);
    }
    if (ChallengeId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChallengeId);
    }
    if (Progress != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Progress);
    }
    if (Goal != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Goal);
    }
    if (Query != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Query);
    }
    if (FailGametime != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(FailGametime);
    }
    if (ItemAbilityId != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(ItemAbilityId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (QuestId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuestId);
    }
    if (ChallengeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeId);
    }
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
    }
    if (Goal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Goal);
    }
    if (Query != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Query);
    }
    if (FailGametime != 0F) {
      size += 1 + 4;
    }
    if (ItemAbilityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemAbilityId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_QuestStatus other) {
    if (other == null) {
      return;
    }
    if (other.QuestId != 0) {
      QuestId = other.QuestId;
    }
    if (other.ChallengeId != 0) {
      ChallengeId = other.ChallengeId;
    }
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
    if (other.Goal != 0) {
      Goal = other.Goal;
    }
    if (other.Query != 0) {
      Query = other.Query;
    }
    if (other.FailGametime != 0F) {
      FailGametime = other.FailGametime;
    }
    if (other.ItemAbilityId != 0) {
      ItemAbilityId = other.ItemAbilityId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          QuestId = input.ReadUInt32();
          break;
        }
        case 16: {
          ChallengeId = input.ReadUInt32();
          break;
        }
        case 24: {
          Progress = input.ReadUInt32();
          break;
        }
        case 32: {
          Goal = input.ReadUInt32();
          break;
        }
        case 40: {
          Query = input.ReadUInt32();
          break;
        }
        case 53: {
          FailGametime = input.ReadFloat();
          break;
        }
        case 56: {
          ItemAbilityId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_ToggleAutoattack : pb::IMessage<CDOTAClientMsg_ToggleAutoattack> {
  private static readonly pb::MessageParser<CDOTAClientMsg_ToggleAutoattack> _parser = new pb::MessageParser<CDOTAClientMsg_ToggleAutoattack>(() => new CDOTAClientMsg_ToggleAutoattack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_ToggleAutoattack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ToggleAutoattack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ToggleAutoattack(CDOTAClientMsg_ToggleAutoattack other) : this() {
    mode_ = other.mode_;
    showMessage_ = other.showMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_ToggleAutoattack Clone() {
    return new CDOTAClientMsg_ToggleAutoattack(this);
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 1;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "show_message" field.</summary>
  public const int ShowMessageFieldNumber = 2;
  private bool showMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowMessage {
    get { return showMessage_; }
    set {
      showMessage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_ToggleAutoattack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_ToggleAutoattack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Mode != other.Mode) return false;
    if (ShowMessage != other.ShowMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (ShowMessage != false) hash ^= ShowMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Mode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Mode);
    }
    if (ShowMessage != false) {
      output.WriteRawTag(16);
      output.WriteBool(ShowMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (ShowMessage != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_ToggleAutoattack other) {
    if (other == null) {
      return;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.ShowMessage != false) {
      ShowMessage = other.ShowMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Mode = input.ReadInt32();
          break;
        }
        case 16: {
          ShowMessage = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SpecialAbility : pb::IMessage<CDOTAClientMsg_SpecialAbility> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SpecialAbility> _parser = new pb::MessageParser<CDOTAClientMsg_SpecialAbility>(() => new CDOTAClientMsg_SpecialAbility());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SpecialAbility> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SpecialAbility() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SpecialAbility(CDOTAClientMsg_SpecialAbility other) : this() {
    abilityIndex_ = other.abilityIndex_;
    targetEntindex_ = other.targetEntindex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SpecialAbility Clone() {
    return new CDOTAClientMsg_SpecialAbility(this);
  }

  /// <summary>Field number for the "ability_index" field.</summary>
  public const int AbilityIndexFieldNumber = 1;
  private uint abilityIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AbilityIndex {
    get { return abilityIndex_; }
    set {
      abilityIndex_ = value;
    }
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 2;
  private uint targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SpecialAbility);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SpecialAbility other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AbilityIndex != other.AbilityIndex) return false;
    if (TargetEntindex != other.TargetEntindex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AbilityIndex != 0) hash ^= AbilityIndex.GetHashCode();
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AbilityIndex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(AbilityIndex);
    }
    if (TargetEntindex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetEntindex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AbilityIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityIndex);
    }
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntindex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SpecialAbility other) {
    if (other == null) {
      return;
    }
    if (other.AbilityIndex != 0) {
      AbilityIndex = other.AbilityIndex;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AbilityIndex = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetEntindex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SetEnemyStartingPosition : pb::IMessage<CDOTAClientMsg_SetEnemyStartingPosition> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SetEnemyStartingPosition> _parser = new pb::MessageParser<CDOTAClientMsg_SetEnemyStartingPosition>(() => new CDOTAClientMsg_SetEnemyStartingPosition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SetEnemyStartingPosition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetEnemyStartingPosition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetEnemyStartingPosition(CDOTAClientMsg_SetEnemyStartingPosition other) : this() {
    enemyPlayerId_ = other.enemyPlayerId_;
    enemyStartingPosition_ = other.enemyStartingPosition_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetEnemyStartingPosition Clone() {
    return new CDOTAClientMsg_SetEnemyStartingPosition(this);
  }

  /// <summary>Field number for the "enemy_player_id" field.</summary>
  public const int EnemyPlayerIdFieldNumber = 1;
  private uint enemyPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnemyPlayerId {
    get { return enemyPlayerId_; }
    set {
      enemyPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "enemy_starting_position" field.</summary>
  public const int EnemyStartingPositionFieldNumber = 2;
  private uint enemyStartingPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnemyStartingPosition {
    get { return enemyStartingPosition_; }
    set {
      enemyStartingPosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SetEnemyStartingPosition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SetEnemyStartingPosition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnemyPlayerId != other.EnemyPlayerId) return false;
    if (EnemyStartingPosition != other.EnemyStartingPosition) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnemyPlayerId != 0) hash ^= EnemyPlayerId.GetHashCode();
    if (EnemyStartingPosition != 0) hash ^= EnemyStartingPosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnemyPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(EnemyPlayerId);
    }
    if (EnemyStartingPosition != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(EnemyStartingPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnemyPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyPlayerId);
    }
    if (EnemyStartingPosition != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyStartingPosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SetEnemyStartingPosition other) {
    if (other == null) {
      return;
    }
    if (other.EnemyPlayerId != 0) {
      EnemyPlayerId = other.EnemyPlayerId;
    }
    if (other.EnemyStartingPosition != 0) {
      EnemyStartingPosition = other.EnemyStartingPosition;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EnemyPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          EnemyStartingPosition = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SetDesiredWardPlacement : pb::IMessage<CDOTAClientMsg_SetDesiredWardPlacement> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SetDesiredWardPlacement> _parser = new pb::MessageParser<CDOTAClientMsg_SetDesiredWardPlacement>(() => new CDOTAClientMsg_SetDesiredWardPlacement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SetDesiredWardPlacement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetDesiredWardPlacement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetDesiredWardPlacement(CDOTAClientMsg_SetDesiredWardPlacement other) : this() {
    wardIndex_ = other.wardIndex_;
    wardX_ = other.wardX_;
    wardY_ = other.wardY_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SetDesiredWardPlacement Clone() {
    return new CDOTAClientMsg_SetDesiredWardPlacement(this);
  }

  /// <summary>Field number for the "ward_index" field.</summary>
  public const int WardIndexFieldNumber = 1;
  private uint wardIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WardIndex {
    get { return wardIndex_; }
    set {
      wardIndex_ = value;
    }
  }

  /// <summary>Field number for the "ward_x" field.</summary>
  public const int WardXFieldNumber = 2;
  private float wardX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float WardX {
    get { return wardX_; }
    set {
      wardX_ = value;
    }
  }

  /// <summary>Field number for the "ward_y" field.</summary>
  public const int WardYFieldNumber = 3;
  private float wardY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float WardY {
    get { return wardY_; }
    set {
      wardY_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SetDesiredWardPlacement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SetDesiredWardPlacement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WardIndex != other.WardIndex) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WardX, other.WardX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WardY, other.WardY)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WardIndex != 0) hash ^= WardIndex.GetHashCode();
    if (WardX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WardX);
    if (WardY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WardY);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WardIndex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(WardIndex);
    }
    if (WardX != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(WardX);
    }
    if (WardY != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(WardY);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WardIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WardIndex);
    }
    if (WardX != 0F) {
      size += 1 + 4;
    }
    if (WardY != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SetDesiredWardPlacement other) {
    if (other == null) {
      return;
    }
    if (other.WardIndex != 0) {
      WardIndex = other.WardIndex;
    }
    if (other.WardX != 0F) {
      WardX = other.WardX;
    }
    if (other.WardY != 0F) {
      WardY = other.WardY;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          WardIndex = input.ReadUInt32();
          break;
        }
        case 21: {
          WardX = input.ReadFloat();
          break;
        }
        case 29: {
          WardY = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_RollDice : pb::IMessage<CDOTAClientMsg_RollDice> {
  private static readonly pb::MessageParser<CDOTAClientMsg_RollDice> _parser = new pb::MessageParser<CDOTAClientMsg_RollDice>(() => new CDOTAClientMsg_RollDice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_RollDice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RollDice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RollDice(CDOTAClientMsg_RollDice other) : this() {
    channelType_ = other.channelType_;
    rollMin_ = other.rollMin_;
    rollMax_ = other.rollMax_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RollDice Clone() {
    return new CDOTAClientMsg_RollDice(this);
  }

  /// <summary>Field number for the "channel_type" field.</summary>
  public const int ChannelTypeFieldNumber = 1;
  private uint channelType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChannelType {
    get { return channelType_; }
    set {
      channelType_ = value;
    }
  }

  /// <summary>Field number for the "roll_min" field.</summary>
  public const int RollMinFieldNumber = 2;
  private uint rollMin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RollMin {
    get { return rollMin_; }
    set {
      rollMin_ = value;
    }
  }

  /// <summary>Field number for the "roll_max" field.</summary>
  public const int RollMaxFieldNumber = 3;
  private uint rollMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RollMax {
    get { return rollMax_; }
    set {
      rollMax_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_RollDice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_RollDice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChannelType != other.ChannelType) return false;
    if (RollMin != other.RollMin) return false;
    if (RollMax != other.RollMax) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChannelType != 0) hash ^= ChannelType.GetHashCode();
    if (RollMin != 0) hash ^= RollMin.GetHashCode();
    if (RollMax != 0) hash ^= RollMax.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChannelType != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ChannelType);
    }
    if (RollMin != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(RollMin);
    }
    if (RollMax != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(RollMax);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChannelType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelType);
    }
    if (RollMin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollMin);
    }
    if (RollMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollMax);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_RollDice other) {
    if (other == null) {
      return;
    }
    if (other.ChannelType != 0) {
      ChannelType = other.ChannelType;
    }
    if (other.RollMin != 0) {
      RollMin = other.RollMin;
    }
    if (other.RollMax != 0) {
      RollMax = other.RollMax;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChannelType = input.ReadUInt32();
          break;
        }
        case 16: {
          RollMin = input.ReadUInt32();
          break;
        }
        case 24: {
          RollMax = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_FlipCoin : pb::IMessage<CDOTAClientMsg_FlipCoin> {
  private static readonly pb::MessageParser<CDOTAClientMsg_FlipCoin> _parser = new pb::MessageParser<CDOTAClientMsg_FlipCoin>(() => new CDOTAClientMsg_FlipCoin());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_FlipCoin> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FlipCoin() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FlipCoin(CDOTAClientMsg_FlipCoin other) : this() {
    channelType_ = other.channelType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_FlipCoin Clone() {
    return new CDOTAClientMsg_FlipCoin(this);
  }

  /// <summary>Field number for the "channel_type" field.</summary>
  public const int ChannelTypeFieldNumber = 1;
  private uint channelType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChannelType {
    get { return channelType_; }
    set {
      channelType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_FlipCoin);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_FlipCoin other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChannelType != other.ChannelType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChannelType != 0) hash ^= ChannelType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChannelType != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ChannelType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChannelType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_FlipCoin other) {
    if (other == null) {
      return;
    }
    if (other.ChannelType != 0) {
      ChannelType = other.ChannelType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChannelType = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_RequestItemSuggestions : pb::IMessage<CDOTAClientMsg_RequestItemSuggestions> {
  private static readonly pb::MessageParser<CDOTAClientMsg_RequestItemSuggestions> _parser = new pb::MessageParser<CDOTAClientMsg_RequestItemSuggestions>(() => new CDOTAClientMsg_RequestItemSuggestions());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_RequestItemSuggestions> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestItemSuggestions() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestItemSuggestions(CDOTAClientMsg_RequestItemSuggestions other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestItemSuggestions Clone() {
    return new CDOTAClientMsg_RequestItemSuggestions(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_RequestItemSuggestions);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_RequestItemSuggestions other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_RequestItemSuggestions other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_MakeTeamCaptain : pb::IMessage<CDOTAClientMsg_MakeTeamCaptain> {
  private static readonly pb::MessageParser<CDOTAClientMsg_MakeTeamCaptain> _parser = new pb::MessageParser<CDOTAClientMsg_MakeTeamCaptain>(() => new CDOTAClientMsg_MakeTeamCaptain());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_MakeTeamCaptain> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MakeTeamCaptain() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MakeTeamCaptain(CDOTAClientMsg_MakeTeamCaptain other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_MakeTeamCaptain Clone() {
    return new CDOTAClientMsg_MakeTeamCaptain(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_MakeTeamCaptain);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_MakeTeamCaptain other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_MakeTeamCaptain other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_HelpTipSystemStateChanged : pb::IMessage<CDOTAClientMsg_HelpTipSystemStateChanged> {
  private static readonly pb::MessageParser<CDOTAClientMsg_HelpTipSystemStateChanged> _parser = new pb::MessageParser<CDOTAClientMsg_HelpTipSystemStateChanged>(() => new CDOTAClientMsg_HelpTipSystemStateChanged());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_HelpTipSystemStateChanged> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HelpTipSystemStateChanged() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HelpTipSystemStateChanged(CDOTAClientMsg_HelpTipSystemStateChanged other) : this() {
    tipDisplayed_ = other.tipDisplayed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_HelpTipSystemStateChanged Clone() {
    return new CDOTAClientMsg_HelpTipSystemStateChanged(this);
  }

  /// <summary>Field number for the "tip_displayed" field.</summary>
  public const int TipDisplayedFieldNumber = 1;
  private bool tipDisplayed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TipDisplayed {
    get { return tipDisplayed_; }
    set {
      tipDisplayed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_HelpTipSystemStateChanged);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_HelpTipSystemStateChanged other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TipDisplayed != other.TipDisplayed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TipDisplayed != false) hash ^= TipDisplayed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TipDisplayed != false) {
      output.WriteRawTag(8);
      output.WriteBool(TipDisplayed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TipDisplayed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_HelpTipSystemStateChanged other) {
    if (other == null) {
      return;
    }
    if (other.TipDisplayed != false) {
      TipDisplayed = other.TipDisplayed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TipDisplayed = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_RequestBulkCombatLog : pb::IMessage<CDOTAClientMsg_RequestBulkCombatLog> {
  private static readonly pb::MessageParser<CDOTAClientMsg_RequestBulkCombatLog> _parser = new pb::MessageParser<CDOTAClientMsg_RequestBulkCombatLog>(() => new CDOTAClientMsg_RequestBulkCombatLog());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_RequestBulkCombatLog> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestBulkCombatLog() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestBulkCombatLog(CDOTAClientMsg_RequestBulkCombatLog other) : this() {
    gameTime_ = other.gameTime_;
    duration_ = other.duration_;
    recentPlayerDeath_ = other.recentPlayerDeath_;
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_RequestBulkCombatLog Clone() {
    return new CDOTAClientMsg_RequestBulkCombatLog(this);
  }

  /// <summary>Field number for the "game_time" field.</summary>
  public const int GameTimeFieldNumber = 1;
  private float gameTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float GameTime {
    get { return gameTime_; }
    set {
      gameTime_ = value;
    }
  }

  /// <summary>Field number for the "duration" field.</summary>
  public const int DurationFieldNumber = 2;
  private float duration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  /// <summary>Field number for the "recent_player_death" field.</summary>
  public const int RecentPlayerDeathFieldNumber = 3;
  private bool recentPlayerDeath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool RecentPlayerDeath {
    get { return recentPlayerDeath_; }
    set {
      recentPlayerDeath_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 4;
  private int playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_RequestBulkCombatLog);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_RequestBulkCombatLog other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTime, other.GameTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
    if (RecentPlayerDeath != other.RecentPlayerDeath) return false;
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTime);
    if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
    if (RecentPlayerDeath != false) hash ^= RecentPlayerDeath.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameTime != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(GameTime);
    }
    if (Duration != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Duration);
    }
    if (RecentPlayerDeath != false) {
      output.WriteRawTag(24);
      output.WriteBool(RecentPlayerDeath);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameTime != 0F) {
      size += 1 + 4;
    }
    if (Duration != 0F) {
      size += 1 + 4;
    }
    if (RecentPlayerDeath != false) {
      size += 1 + 1;
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_RequestBulkCombatLog other) {
    if (other == null) {
      return;
    }
    if (other.GameTime != 0F) {
      GameTime = other.GameTime;
    }
    if (other.Duration != 0F) {
      Duration = other.Duration;
    }
    if (other.RecentPlayerDeath != false) {
      RecentPlayerDeath = other.RecentPlayerDeath;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          GameTime = input.ReadFloat();
          break;
        }
        case 21: {
          Duration = input.ReadFloat();
          break;
        }
        case 24: {
          RecentPlayerDeath = input.ReadBool();
          break;
        }
        case 32: {
          PlayerId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_AbilityDraftRequestAbility : pb::IMessage<CDOTAClientMsg_AbilityDraftRequestAbility> {
  private static readonly pb::MessageParser<CDOTAClientMsg_AbilityDraftRequestAbility> _parser = new pb::MessageParser<CDOTAClientMsg_AbilityDraftRequestAbility>(() => new CDOTAClientMsg_AbilityDraftRequestAbility());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_AbilityDraftRequestAbility> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_AbilityDraftRequestAbility() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_AbilityDraftRequestAbility(CDOTAClientMsg_AbilityDraftRequestAbility other) : this() {
    requestedAbilityId_ = other.requestedAbilityId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_AbilityDraftRequestAbility Clone() {
    return new CDOTAClientMsg_AbilityDraftRequestAbility(this);
  }

  /// <summary>Field number for the "requested_ability_id" field.</summary>
  public const int RequestedAbilityIdFieldNumber = 1;
  private uint requestedAbilityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestedAbilityId {
    get { return requestedAbilityId_; }
    set {
      requestedAbilityId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_AbilityDraftRequestAbility);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_AbilityDraftRequestAbility other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestedAbilityId != other.RequestedAbilityId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestedAbilityId != 0) hash ^= RequestedAbilityId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestedAbilityId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(RequestedAbilityId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestedAbilityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestedAbilityId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_AbilityDraftRequestAbility other) {
    if (other == null) {
      return;
    }
    if (other.RequestedAbilityId != 0) {
      RequestedAbilityId = other.RequestedAbilityId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestedAbilityId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_GuideSelectOption : pb::IMessage<CDOTAClientMsg_GuideSelectOption> {
  private static readonly pb::MessageParser<CDOTAClientMsg_GuideSelectOption> _parser = new pb::MessageParser<CDOTAClientMsg_GuideSelectOption>(() => new CDOTAClientMsg_GuideSelectOption());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_GuideSelectOption> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GuideSelectOption() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GuideSelectOption(CDOTAClientMsg_GuideSelectOption other) : this() {
    option_ = other.option_;
    forceRecalculate_ = other.forceRecalculate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GuideSelectOption Clone() {
    return new CDOTAClientMsg_GuideSelectOption(this);
  }

  /// <summary>Field number for the "option" field.</summary>
  public const int OptionFieldNumber = 1;
  private uint option_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Option {
    get { return option_; }
    set {
      option_ = value;
    }
  }

  /// <summary>Field number for the "force_recalculate" field.</summary>
  public const int ForceRecalculateFieldNumber = 2;
  private bool forceRecalculate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ForceRecalculate {
    get { return forceRecalculate_; }
    set {
      forceRecalculate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_GuideSelectOption);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_GuideSelectOption other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Option != other.Option) return false;
    if (ForceRecalculate != other.ForceRecalculate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Option != 0) hash ^= Option.GetHashCode();
    if (ForceRecalculate != false) hash ^= ForceRecalculate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Option != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Option);
    }
    if (ForceRecalculate != false) {
      output.WriteRawTag(16);
      output.WriteBool(ForceRecalculate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Option != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Option);
    }
    if (ForceRecalculate != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_GuideSelectOption other) {
    if (other == null) {
      return;
    }
    if (other.Option != 0) {
      Option = other.Option;
    }
    if (other.ForceRecalculate != false) {
      ForceRecalculate = other.ForceRecalculate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Option = input.ReadUInt32();
          break;
        }
        case 16: {
          ForceRecalculate = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_GuideSelected : pb::IMessage<CDOTAClientMsg_GuideSelected> {
  private static readonly pb::MessageParser<CDOTAClientMsg_GuideSelected> _parser = new pb::MessageParser<CDOTAClientMsg_GuideSelected>(() => new CDOTAClientMsg_GuideSelected());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_GuideSelected> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GuideSelected() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GuideSelected(CDOTAClientMsg_GuideSelected other) : this() {
    guideWorkshopId_ = other.guideWorkshopId_;
    isPlusGuide_ = other.isPlusGuide_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_GuideSelected Clone() {
    return new CDOTAClientMsg_GuideSelected(this);
  }

  /// <summary>Field number for the "guide_workshop_id" field.</summary>
  public const int GuideWorkshopIdFieldNumber = 1;
  private ulong guideWorkshopId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong GuideWorkshopId {
    get { return guideWorkshopId_; }
    set {
      guideWorkshopId_ = value;
    }
  }

  /// <summary>Field number for the "is_plus_guide" field.</summary>
  public const int IsPlusGuideFieldNumber = 2;
  private bool isPlusGuide_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPlusGuide {
    get { return isPlusGuide_; }
    set {
      isPlusGuide_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_GuideSelected);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_GuideSelected other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuideWorkshopId != other.GuideWorkshopId) return false;
    if (IsPlusGuide != other.IsPlusGuide) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuideWorkshopId != 0UL) hash ^= GuideWorkshopId.GetHashCode();
    if (IsPlusGuide != false) hash ^= IsPlusGuide.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuideWorkshopId != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(GuideWorkshopId);
    }
    if (IsPlusGuide != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsPlusGuide);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuideWorkshopId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuideWorkshopId);
    }
    if (IsPlusGuide != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_GuideSelected other) {
    if (other == null) {
      return;
    }
    if (other.GuideWorkshopId != 0UL) {
      GuideWorkshopId = other.GuideWorkshopId;
    }
    if (other.IsPlusGuide != false) {
      IsPlusGuide = other.IsPlusGuide;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GuideWorkshopId = input.ReadUInt64();
          break;
        }
        case 16: {
          IsPlusGuide = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_DamageReport : pb::IMessage<CDOTAClientMsg_DamageReport> {
  private static readonly pb::MessageParser<CDOTAClientMsg_DamageReport> _parser = new pb::MessageParser<CDOTAClientMsg_DamageReport>(() => new CDOTAClientMsg_DamageReport());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_DamageReport> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DamageReport() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DamageReport(CDOTAClientMsg_DamageReport other) : this() {
    targetHeroId_ = other.targetHeroId_;
    sourceHeroId_ = other.sourceHeroId_;
    damageAmount_ = other.damageAmount_;
    broadcast_ = other.broadcast_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_DamageReport Clone() {
    return new CDOTAClientMsg_DamageReport(this);
  }

  /// <summary>Field number for the "target_hero_id" field.</summary>
  public const int TargetHeroIdFieldNumber = 1;
  private uint targetHeroId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetHeroId {
    get { return targetHeroId_; }
    set {
      targetHeroId_ = value;
    }
  }

  /// <summary>Field number for the "source_hero_id" field.</summary>
  public const int SourceHeroIdFieldNumber = 2;
  private uint sourceHeroId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SourceHeroId {
    get { return sourceHeroId_; }
    set {
      sourceHeroId_ = value;
    }
  }

  /// <summary>Field number for the "damage_amount" field.</summary>
  public const int DamageAmountFieldNumber = 3;
  private int damageAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DamageAmount {
    get { return damageAmount_; }
    set {
      damageAmount_ = value;
    }
  }

  /// <summary>Field number for the "broadcast" field.</summary>
  public const int BroadcastFieldNumber = 4;
  private bool broadcast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Broadcast {
    get { return broadcast_; }
    set {
      broadcast_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_DamageReport);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_DamageReport other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetHeroId != other.TargetHeroId) return false;
    if (SourceHeroId != other.SourceHeroId) return false;
    if (DamageAmount != other.DamageAmount) return false;
    if (Broadcast != other.Broadcast) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetHeroId != 0) hash ^= TargetHeroId.GetHashCode();
    if (SourceHeroId != 0) hash ^= SourceHeroId.GetHashCode();
    if (DamageAmount != 0) hash ^= DamageAmount.GetHashCode();
    if (Broadcast != false) hash ^= Broadcast.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetHeroId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetHeroId);
    }
    if (SourceHeroId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(SourceHeroId);
    }
    if (DamageAmount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(DamageAmount);
    }
    if (Broadcast != false) {
      output.WriteRawTag(32);
      output.WriteBool(Broadcast);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetHeroId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetHeroId);
    }
    if (SourceHeroId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceHeroId);
    }
    if (DamageAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageAmount);
    }
    if (Broadcast != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_DamageReport other) {
    if (other == null) {
      return;
    }
    if (other.TargetHeroId != 0) {
      TargetHeroId = other.TargetHeroId;
    }
    if (other.SourceHeroId != 0) {
      SourceHeroId = other.SourceHeroId;
    }
    if (other.DamageAmount != 0) {
      DamageAmount = other.DamageAmount;
    }
    if (other.Broadcast != false) {
      Broadcast = other.Broadcast;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetHeroId = input.ReadUInt32();
          break;
        }
        case 16: {
          SourceHeroId = input.ReadUInt32();
          break;
        }
        case 24: {
          DamageAmount = input.ReadInt32();
          break;
        }
        case 32: {
          Broadcast = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_SalutePlayer : pb::IMessage<CDOTAClientMsg_SalutePlayer> {
  private static readonly pb::MessageParser<CDOTAClientMsg_SalutePlayer> _parser = new pb::MessageParser<CDOTAClientMsg_SalutePlayer>(() => new CDOTAClientMsg_SalutePlayer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_SalutePlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SalutePlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SalutePlayer(CDOTAClientMsg_SalutePlayer other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    eventId_ = other.eventId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_SalutePlayer Clone() {
    return new CDOTAClientMsg_SalutePlayer(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private int targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "event_id" field.</summary>
  public const int EventIdFieldNumber = 2;
  private int eventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EventId {
    get { return eventId_; }
    set {
      eventId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_SalutePlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_SalutePlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (EventId != other.EventId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (EventId != 0) hash ^= EventId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TargetPlayerId);
    }
    if (EventId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(EventId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayerId);
    }
    if (EventId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_SalutePlayer other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.EventId != 0) {
      EventId = other.EventId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadInt32();
          break;
        }
        case 16: {
          EventId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_TipAlert : pb::IMessage<CDOTAClientMsg_TipAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_TipAlert> _parser = new pb::MessageParser<CDOTAClientMsg_TipAlert>(() => new CDOTAClientMsg_TipAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_TipAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TipAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TipAlert(CDOTAClientMsg_TipAlert other) : this() {
    tipText_ = other.tipText_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_TipAlert Clone() {
    return new CDOTAClientMsg_TipAlert(this);
  }

  /// <summary>Field number for the "tip_text" field.</summary>
  public const int TipTextFieldNumber = 1;
  private string tipText_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TipText {
    get { return tipText_; }
    set {
      tipText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_TipAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_TipAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TipText != other.TipText) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TipText.Length != 0) hash ^= TipText.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TipText.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TipText);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TipText.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TipText);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_TipAlert other) {
    if (other == null) {
      return;
    }
    if (other.TipText.Length != 0) {
      TipText = other.TipText;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          TipText = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CDOTAClientMsg_EmptyTeleportAlert : pb::IMessage<CDOTAClientMsg_EmptyTeleportAlert> {
  private static readonly pb::MessageParser<CDOTAClientMsg_EmptyTeleportAlert> _parser = new pb::MessageParser<CDOTAClientMsg_EmptyTeleportAlert>(() => new CDOTAClientMsg_EmptyTeleportAlert());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDOTAClientMsg_EmptyTeleportAlert> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DotaClientmessagesReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EmptyTeleportAlert() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EmptyTeleportAlert(CDOTAClientMsg_EmptyTeleportAlert other) : this() {
    targetEntindex_ = other.targetEntindex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDOTAClientMsg_EmptyTeleportAlert Clone() {
    return new CDOTAClientMsg_EmptyTeleportAlert(this);
  }

  /// <summary>Field number for the "target_entindex" field.</summary>
  public const int TargetEntindexFieldNumber = 1;
  private int targetEntindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetEntindex {
    get { return targetEntindex_; }
    set {
      targetEntindex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDOTAClientMsg_EmptyTeleportAlert);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDOTAClientMsg_EmptyTeleportAlert other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetEntindex != other.TargetEntindex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetEntindex != 0) hash ^= TargetEntindex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetEntindex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TargetEntindex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetEntindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetEntindex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDOTAClientMsg_EmptyTeleportAlert other) {
    if (other == null) {
      return;
    }
    if (other.TargetEntindex != 0) {
      TargetEntindex = other.TargetEntindex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetEntindex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
