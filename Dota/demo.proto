syntax = "proto3";

option cc_generic_services = false;

enum EDemoCommands {
	//DEM_Error = -1;
	DEM_Stop = 0;
	DEM_FileHeader = 1;
	DEM_FileInfo = 2;
	DEM_SyncTick = 3;
	DEM_SendTables = 4;
	DEM_ClassInfo = 5;
	DEM_StringTables = 6;
	DEM_Packet = 7;
	DEM_SignonPacket = 8;
	DEM_ConsoleCmd = 9;
	DEM_CustomData = 10;
	DEM_CustomDataCallbacks = 11;
	DEM_UserCmd = 12;
	DEM_FullPacket = 13;
	DEM_SaveGame = 14;
	DEM_SpawnGroups = 15;
	DEM_Max = 16;
	DEM_IsCompressed = 64;
}

message CDemoFileHeader {
	string demo_file_stamp = 1;
	int32 network_protocol = 2;
	string server_name = 3;
	string client_name = 4;
	string map_name = 5;
	string game_directory = 6;
	int32 fullpackets_version = 7;
	bool allow_clientside_entities = 8;
	bool allow_clientside_particles = 9;
	string addons = 10;
}

message CGameInfo {
	message CDotaGameInfo {
		message CPlayerInfo {
			string hero_name = 1;
			string player_name = 2;
			bool is_fake_client = 3;
			uint64 steamid = 4;
			int32 game_team = 5;
		}

		message CHeroSelectEvent {
			bool is_pick = 1;
			uint32 team = 2;
			uint32 hero_id = 3;
		}

		uint64 match_id = 1;
		int32 game_mode = 2;
		int32 game_winner = 3;
		repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
		uint32 leagueid = 5;
		repeated .CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
		uint32 radiant_team_id = 7;
		uint32 dire_team_id = 8;
		string radiant_team_tag = 9;
		string dire_team_tag = 10;
		uint32 end_time = 11;
	}

	.CGameInfo.CDotaGameInfo dota = 4;
}

message CDemoFileInfo {
	float playback_time = 1;
	int32 playback_ticks = 2;
	int32 playback_frames = 3;
	.CGameInfo game_info = 4;
}

message CDemoPacket {
	bytes data = 3;
}

message CDemoFullPacket {
	.CDemoStringTables string_table = 1;
	.CDemoPacket packet = 2;
}

message CDemoSaveGame {
	bytes data = 1;
	fixed64 steam_id = 2;
	fixed64 signature = 3;
	int32 version = 4;
}

message CDemoSyncTick {
}

message CDemoConsoleCmd {
	string cmdstring = 1;
}

message CDemoSendTables {
	bytes data = 1;
}

message CDemoClassInfo {
	message class_t {
		int32 class_id = 1;
		string network_name = 2;
		string table_name = 3;
	}

	repeated .CDemoClassInfo.class_t classes = 1;
}

message CDemoCustomData {
	int32 callback_index = 1;
	bytes data = 2;
}

message CDemoCustomDataCallbacks {
	repeated string save_id = 1;
}

message CDemoStringTables {
	message items_t {
		string str = 1;
		bytes data = 2;
	}

	message table_t {
		string table_name = 1;
		repeated .CDemoStringTables.items_t items = 2;
		repeated .CDemoStringTables.items_t items_clientside = 3;
		int32 table_flags = 4;
	}

	repeated .CDemoStringTables.table_t tables = 1;
}

message CDemoStop {
}

message CDemoUserCmd {
	int32 cmd_number = 1;
	bytes data = 2;
}

message CDemoSpawnGroups {
	repeated bytes msgs = 3;
}

message CNETMsg_Tick {
	uint32 tick = 1;
	uint32 host_computationtime = 4;
	uint32 host_computationtime_std_deviation = 5;
	uint32 host_framestarttime_std_deviation = 6;
}

message CNETMsg_SignonState {
	uint32 signon_state = 1;
	uint32 spawn_count = 2;
	uint32 num_server_players = 3;
	repeated string players_networkids = 4;
	string map_name = 5;
}

message CSVCMsg_SendTable {
	message sendprop_t {
		int32 type = 1;
		string var_name = 2;
		int32 flags = 3;
		int32 priority = 4;
		string dt_name = 5;
		int32 num_elements = 6;
		float low_value = 7;
		float high_value = 8;
		int32 num_bits = 9;
	}

	bool is_end = 1;
	string net_table_name = 2;
	bool needs_decoder = 3;
	repeated sendprop_t props = 4;
}

message CSVCMsg_ClassInfo {
	message class_t {
		int32 class_id = 1;
		string data_table_name = 2;
		string class_name = 3;
	}

	bool create_on_client = 1;
	repeated class_t classes = 2;
}

message CSVCMsg_ServerInfo {
	int32 protocol = 1;
	int32 server_count = 2;
	bool is_dedicated = 3;
	bool is_hltv = 4;
	bool is_replay = 5;
	int32 c_os = 6;
	fixed32 map_crc = 7;
	fixed32 client_crc = 8;
	fixed32 string_table_crc = 9;
	int32 max_clients = 10;
	int32 max_classes = 11;
	int32 player_slot = 12;
	float tick_interval = 13;
	string game_dir = 14;
	string map_name = 15;
	string sky_name = 16;
	string host_name = 17;
	string addon_name = 18;
}

message CSVCMsg_CreateStringTable {
	string name = 1;
	int32 max_entries = 2;
	int32 num_entries = 3;
	bool user_data_fixed_size = 4;
	int32 user_data_size = 5;
	int32 user_data_size_bits = 6;
	int32 flags = 7;
	bytes string_data = 8;
}

message CSVCMsg_UpdateStringTable {
	int32 table_id = 1;
	int32 num_changed_entries = 2;
	bytes string_data = 3;
}

message CSVCMsg_VoiceInit {
	int32 quality = 1;
	string codec = 2;
	int32 version = 3;
}

message CSVCMsg_VoiceData {
	int32 client = 1;
	bool proximity = 2;
	fixed64 xuid = 3;
	int32 audible_mask = 4;
	bytes voice_data = 5;
	VoiceDataFormat_t format = 6;
}

message CSVCMsg_SetView {
	int32 entity_index = 1;
}

message CSVCMsg_UserMessage {
	int32 msg_type = 1;
	bytes msg_data = 2;
}

message CSVCMsg_GameEvent {
	message key_t {
		int32 type = 1;
		string val_string = 2;
		float val_float = 3;
		int32 val_long = 4;
		int32 val_short = 5;
		int32 val_byte = 6;
		bool val_bool = 7;
		uint64 val_uint64 = 8;
	}

	string event_name = 1;
	int32 eventid = 2;
	repeated key_t keys = 3;
}

message CSVCMsg_PacketEntities {
	int32 max_entries = 1;
	int32 updated_entries = 2;
	bool is_delta = 3;
	bool update_baseline = 4;
	int32 baseline = 5;
	int32 delta_from = 6;
	bytes entity_data = 7;
	bool pending_full_frame = 8;
}

message CSVCMsg_TempEntities {
	bool reliable = 1;
	int32 num_entries = 2;
	bytes entity_data = 3;
}

message CSVCMsg_GameEventList {
	message key_t {
		int32 type = 1;
		string name = 2;
	}

	message descriptor_t {
		int32 eventid = 1;
		string name = 2;
		repeated key_t keys = 3;
	}

	repeated descriptor_t descriptors = 1;
}





enum VoiceDataFormat_t {
	VOICEDATA_FORMAT_STEAM = 0;
	VOICEDATA_FORMAT_ENGINE = 1;
}

enum EDotaEntityMessages {
	DOTA_UNIT_SPEECH = 0;
	DOTA_UNIT_SPEECH_MUTE = 1;
	DOTA_UNIT_ADD_GESTURE = 2;
	DOTA_UNIT_REMOVE_GESTURE = 3;
	DOTA_UNIT_REMOVE_ALL_GESTURES = 4;
	DOTA_UNIT_FADE_GESTURE = 6;
	DOTA_UNIT_SPEECH_CLIENTSIDE_RULES = 7;
}
