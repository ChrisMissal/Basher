// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: demo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from demo.proto</summary>
public static partial class DemoReflection {

  #region Descriptor
  /// <summary>File descriptor for demo.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DemoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpkZW1vLnByb3RvIowCCg9DRGVtb0ZpbGVIZWFkZXISFwoPZGVtb19maWxl",
          "X3N0YW1wGAEgASgJEhgKEG5ldHdvcmtfcHJvdG9jb2wYAiABKAUSEwoLc2Vy",
          "dmVyX25hbWUYAyABKAkSEwoLY2xpZW50X25hbWUYBCABKAkSEAoIbWFwX25h",
          "bWUYBSABKAkSFgoOZ2FtZV9kaXJlY3RvcnkYBiABKAkSGwoTZnVsbHBhY2tl",
          "dHNfdmVyc2lvbhgHIAEoBRIhChlhbGxvd19jbGllbnRzaWRlX2VudGl0aWVz",
          "GAggASgIEiIKGmFsbG93X2NsaWVudHNpZGVfcGFydGljbGVzGAkgASgIEg4K",
          "BmFkZG9ucxgKIAEoCSK0BAoJQ0dhbWVJbmZvEiYKBGRvdGEYBCABKAsyGC5D",
          "R2FtZUluZm8uQ0RvdGFHYW1lSW5mbxr+AwoNQ0RvdGFHYW1lSW5mbxIQCght",
          "YXRjaF9pZBgBIAEoBBIRCglnYW1lX21vZGUYAiABKAUSEwoLZ2FtZV93aW5u",
          "ZXIYAyABKAUSOQoLcGxheWVyX2luZm8YBCADKAsyJC5DR2FtZUluZm8uQ0Rv",
          "dGFHYW1lSW5mby5DUGxheWVySW5mbxIQCghsZWFndWVpZBgFIAEoDRI9Cgpw",
          "aWNrc19iYW5zGAYgAygLMikuQ0dhbWVJbmZvLkNEb3RhR2FtZUluZm8uQ0hl",
          "cm9TZWxlY3RFdmVudBIXCg9yYWRpYW50X3RlYW1faWQYByABKA0SFAoMZGly",
          "ZV90ZWFtX2lkGAggASgNEhgKEHJhZGlhbnRfdGVhbV90YWcYCSABKAkSFQoN",
          "ZGlyZV90ZWFtX3RhZxgKIAEoCRIQCghlbmRfdGltZRgLIAEoDRpxCgtDUGxh",
          "eWVySW5mbxIRCgloZXJvX25hbWUYASABKAkSEwoLcGxheWVyX25hbWUYAiAB",
          "KAkSFgoOaXNfZmFrZV9jbGllbnQYAyABKAgSDwoHc3RlYW1pZBgEIAEoBBIR",
          "CglnYW1lX3RlYW0YBSABKAUaQgoQQ0hlcm9TZWxlY3RFdmVudBIPCgdpc19w",
          "aWNrGAEgASgIEgwKBHRlYW0YAiABKA0SDwoHaGVyb19pZBgDIAEoDSJ2Cg1D",
          "RGVtb0ZpbGVJbmZvEhUKDXBsYXliYWNrX3RpbWUYASABKAISFgoOcGxheWJh",
          "Y2tfdGlja3MYAiABKAUSFwoPcGxheWJhY2tfZnJhbWVzGAMgASgFEh0KCWdh",
          "bWVfaW5mbxgEIAEoCzIKLkNHYW1lSW5mbyIbCgtDRGVtb1BhY2tldBIMCgRk",
          "YXRhGAMgASgMIlkKD0NEZW1vRnVsbFBhY2tldBIoCgxzdHJpbmdfdGFibGUY",
          "ASABKAsyEi5DRGVtb1N0cmluZ1RhYmxlcxIcCgZwYWNrZXQYAiABKAsyDC5D",
          "RGVtb1BhY2tldCJTCg1DRGVtb1NhdmVHYW1lEgwKBGRhdGEYASABKAwSEAoI",
          "c3RlYW1faWQYAiABKAYSEQoJc2lnbmF0dXJlGAMgASgGEg8KB3ZlcnNpb24Y",
          "BCABKAUiDwoNQ0RlbW9TeW5jVGljayIkCg9DRGVtb0NvbnNvbGVDbWQSEQoJ",
          "Y21kc3RyaW5nGAEgASgJIh8KD0NEZW1vU2VuZFRhYmxlcxIMCgRkYXRhGAEg",
          "ASgMIoEBCg5DRGVtb0NsYXNzSW5mbxIoCgdjbGFzc2VzGAEgAygLMhcuQ0Rl",
          "bW9DbGFzc0luZm8uY2xhc3NfdBpFCgdjbGFzc190EhAKCGNsYXNzX2lkGAEg",
          "ASgFEhQKDG5ldHdvcmtfbmFtZRgCIAEoCRISCgp0YWJsZV9uYW1lGAMgASgJ",
          "IjcKD0NEZW1vQ3VzdG9tRGF0YRIWCg5jYWxsYmFja19pbmRleBgBIAEoBRIM",
          "CgRkYXRhGAIgASgMIisKGENEZW1vQ3VzdG9tRGF0YUNhbGxiYWNrcxIPCgdz",
          "YXZlX2lkGAEgAygJIvsBChFDRGVtb1N0cmluZ1RhYmxlcxIqCgZ0YWJsZXMY",
          "ASADKAsyGi5DRGVtb1N0cmluZ1RhYmxlcy50YWJsZV90GiQKB2l0ZW1zX3QS",
          "CwoDc3RyGAEgASgJEgwKBGRhdGEYAiABKAwakwEKB3RhYmxlX3QSEgoKdGFi",
          "bGVfbmFtZRgBIAEoCRIpCgVpdGVtcxgCIAMoCzIaLkNEZW1vU3RyaW5nVGFi",
          "bGVzLml0ZW1zX3QSNAoQaXRlbXNfY2xpZW50c2lkZRgDIAMoCzIaLkNEZW1v",
          "U3RyaW5nVGFibGVzLml0ZW1zX3QSEwoLdGFibGVfZmxhZ3MYBCABKAUiCwoJ",
          "Q0RlbW9TdG9wIjAKDENEZW1vVXNlckNtZBISCgpjbWRfbnVtYmVyGAEgASgF",
          "EgwKBGRhdGEYAiABKAwiIAoQQ0RlbW9TcGF3bkdyb3VwcxIMCgRtc2dzGAMg",
          "AygMIvYCChJDU1ZDTXNnX1NlcnZlckluZm8SEAoIcHJvdG9jb2wYASABKAUS",
          "FAoMc2VydmVyX2NvdW50GAIgASgFEhQKDGlzX2RlZGljYXRlZBgDIAEoCBIP",
          "Cgdpc19obHR2GAQgASgIEhEKCWlzX3JlcGxheRgFIAEoCBIMCgRjX29zGAYg",
          "ASgFEg8KB21hcF9jcmMYByABKAcSEgoKY2xpZW50X2NyYxgIIAEoBxIYChBz",
          "dHJpbmdfdGFibGVfY3JjGAkgASgHEhMKC21heF9jbGllbnRzGAogASgFEhMK",
          "C21heF9jbGFzc2VzGAsgASgFEhMKC3BsYXllcl9zbG90GAwgASgFEhUKDXRp",
          "Y2tfaW50ZXJ2YWwYDSABKAISEAoIZ2FtZV9kaXIYDiABKAkSEAoIbWFwX25h",
          "bWUYDyABKAkSEAoIc2t5X25hbWUYECABKAkSEQoJaG9zdF9uYW1lGBEgASgJ",
          "EhIKCmFkZG9uX25hbWUYEiABKAkiyAEKFkNTVkNNc2dfUGFja2V0RW50aXRp",
          "ZXMSEwoLbWF4X2VudHJpZXMYASABKAUSFwoPdXBkYXRlZF9lbnRyaWVzGAIg",
          "ASgFEhAKCGlzX2RlbHRhGAMgASgIEhcKD3VwZGF0ZV9iYXNlbGluZRgEIAEo",
          "CBIQCghiYXNlbGluZRgFIAEoBRISCgpkZWx0YV9mcm9tGAYgASgFEhMKC2Vu",
          "dGl0eV9kYXRhGAcgASgMEhoKEnBlbmRpbmdfZnVsbF9mcmFtZRgIIAEoCCKk",
          "AQoRQ1NWQ01zZ19DbGFzc0luZm8SGAoQY3JlYXRlX29uX2NsaWVudBgBIAEo",
          "CBIrCgdjbGFzc2VzGAIgAygLMhouQ1NWQ01zZ19DbGFzc0luZm8uY2xhc3Nf",
          "dBpICgdjbGFzc190EhAKCGNsYXNzX2lkGAEgASgFEhcKD2RhdGFfdGFibGVf",
          "bmFtZRgCIAEoCRISCgpjbGFzc19uYW1lGAMgASgJKuwCCg1FRGVtb0NvbW1h",
          "bmRzEgwKCERFTV9TdG9wEAASEgoOREVNX0ZpbGVIZWFkZXIQARIQCgxERU1f",
          "RmlsZUluZm8QAhIQCgxERU1fU3luY1RpY2sQAxISCg5ERU1fU2VuZFRhYmxl",
          "cxAEEhEKDURFTV9DbGFzc0luZm8QBRIUChBERU1fU3RyaW5nVGFibGVzEAYS",
          "DgoKREVNX1BhY2tldBAHEhQKEERFTV9TaWdub25QYWNrZXQQCBISCg5ERU1f",
          "Q29uc29sZUNtZBAJEhIKDkRFTV9DdXN0b21EYXRhEAoSGwoXREVNX0N1c3Rv",
          "bURhdGFDYWxsYmFja3MQCxIPCgtERU1fVXNlckNtZBAMEhIKDkRFTV9GdWxs",
          "UGFja2V0EA0SEAoMREVNX1NhdmVHYW1lEA4SEwoPREVNX1NwYXduR3JvdXBz",
          "EA8SCwoHREVNX01heBAQEhQKEERFTV9Jc0NvbXByZXNzZWQQQEIDgAEAYgZw",
          "cm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::EDemoCommands), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoFileHeader), global::CDemoFileHeader.Parser, new[]{ "DemoFileStamp", "NetworkProtocol", "ServerName", "ClientName", "MapName", "GameDirectory", "FullpacketsVersion", "AllowClientsideEntities", "AllowClientsideParticles", "Addons" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameInfo), global::CGameInfo.Parser, new[]{ "Dota" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CGameInfo.Types.CDotaGameInfo), global::CGameInfo.Types.CDotaGameInfo.Parser, new[]{ "MatchId", "GameMode", "GameWinner", "PlayerInfo", "Leagueid", "PicksBans", "RadiantTeamId", "DireTeamId", "RadiantTeamTag", "DireTeamTag", "EndTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CGameInfo.Types.CDotaGameInfo.Types.CPlayerInfo), global::CGameInfo.Types.CDotaGameInfo.Types.CPlayerInfo.Parser, new[]{ "HeroName", "PlayerName", "IsFakeClient", "Steamid", "GameTeam" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameInfo.Types.CDotaGameInfo.Types.CHeroSelectEvent), global::CGameInfo.Types.CDotaGameInfo.Types.CHeroSelectEvent.Parser, new[]{ "IsPick", "Team", "HeroId" }, null, null, null, null)})}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoFileInfo), global::CDemoFileInfo.Parser, new[]{ "PlaybackTime", "PlaybackTicks", "PlaybackFrames", "GameInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoPacket), global::CDemoPacket.Parser, new[]{ "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoFullPacket), global::CDemoFullPacket.Parser, new[]{ "StringTable", "Packet" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoSaveGame), global::CDemoSaveGame.Parser, new[]{ "Data", "SteamId", "Signature", "Version" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoSyncTick), global::CDemoSyncTick.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoConsoleCmd), global::CDemoConsoleCmd.Parser, new[]{ "Cmdstring" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoSendTables), global::CDemoSendTables.Parser, new[]{ "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoClassInfo), global::CDemoClassInfo.Parser, new[]{ "Classes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CDemoClassInfo.Types.class_t), global::CDemoClassInfo.Types.class_t.Parser, new[]{ "ClassId", "NetworkName", "TableName" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoCustomData), global::CDemoCustomData.Parser, new[]{ "CallbackIndex", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoCustomDataCallbacks), global::CDemoCustomDataCallbacks.Parser, new[]{ "SaveId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoStringTables), global::CDemoStringTables.Parser, new[]{ "Tables" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CDemoStringTables.Types.items_t), global::CDemoStringTables.Types.items_t.Parser, new[]{ "Str", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoStringTables.Types.table_t), global::CDemoStringTables.Types.table_t.Parser, new[]{ "TableName", "Items", "ItemsClientside", "TableFlags" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoStop), global::CDemoStop.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoUserCmd), global::CDemoUserCmd.Parser, new[]{ "CmdNumber", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CDemoSpawnGroups), global::CDemoSpawnGroups.Parser, new[]{ "Msgs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_ServerInfo), global::CSVCMsg_ServerInfo.Parser, new[]{ "Protocol", "ServerCount", "IsDedicated", "IsHltv", "IsReplay", "COs", "MapCrc", "ClientCrc", "StringTableCrc", "MaxClients", "MaxClasses", "PlayerSlot", "TickInterval", "GameDir", "MapName", "SkyName", "HostName", "AddonName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_PacketEntities), global::CSVCMsg_PacketEntities.Parser, new[]{ "MaxEntries", "UpdatedEntries", "IsDelta", "UpdateBaseline", "Baseline", "DeltaFrom", "EntityData", "PendingFullFrame" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_ClassInfo), global::CSVCMsg_ClassInfo.Parser, new[]{ "CreateOnClient", "Classes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CSVCMsg_ClassInfo.Types.class_t), global::CSVCMsg_ClassInfo.Types.class_t.Parser, new[]{ "ClassId", "DataTableName", "ClassName" }, null, null, null, null)})
        }));
  }
  #endregion

}
#region Enums
public enum EDemoCommands {
  /// <summary>
  ///DEM_Error = -1;
  /// </summary>
  [pbr::OriginalName("DEM_Stop")] DemStop = 0,
  [pbr::OriginalName("DEM_FileHeader")] DemFileHeader = 1,
  [pbr::OriginalName("DEM_FileInfo")] DemFileInfo = 2,
  [pbr::OriginalName("DEM_SyncTick")] DemSyncTick = 3,
  [pbr::OriginalName("DEM_SendTables")] DemSendTables = 4,
  [pbr::OriginalName("DEM_ClassInfo")] DemClassInfo = 5,
  [pbr::OriginalName("DEM_StringTables")] DemStringTables = 6,
  [pbr::OriginalName("DEM_Packet")] DemPacket = 7,
  [pbr::OriginalName("DEM_SignonPacket")] DemSignonPacket = 8,
  [pbr::OriginalName("DEM_ConsoleCmd")] DemConsoleCmd = 9,
  [pbr::OriginalName("DEM_CustomData")] DemCustomData = 10,
  [pbr::OriginalName("DEM_CustomDataCallbacks")] DemCustomDataCallbacks = 11,
  [pbr::OriginalName("DEM_UserCmd")] DemUserCmd = 12,
  [pbr::OriginalName("DEM_FullPacket")] DemFullPacket = 13,
  [pbr::OriginalName("DEM_SaveGame")] DemSaveGame = 14,
  [pbr::OriginalName("DEM_SpawnGroups")] DemSpawnGroups = 15,
  [pbr::OriginalName("DEM_Max")] DemMax = 16,
  [pbr::OriginalName("DEM_IsCompressed")] DemIsCompressed = 64,
}

#endregion

#region Messages
public sealed partial class CDemoFileHeader : pb::IMessage<CDemoFileHeader> {
  private static readonly pb::MessageParser<CDemoFileHeader> _parser = new pb::MessageParser<CDemoFileHeader>(() => new CDemoFileHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoFileHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFileHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFileHeader(CDemoFileHeader other) : this() {
    demoFileStamp_ = other.demoFileStamp_;
    networkProtocol_ = other.networkProtocol_;
    serverName_ = other.serverName_;
    clientName_ = other.clientName_;
    mapName_ = other.mapName_;
    gameDirectory_ = other.gameDirectory_;
    fullpacketsVersion_ = other.fullpacketsVersion_;
    allowClientsideEntities_ = other.allowClientsideEntities_;
    allowClientsideParticles_ = other.allowClientsideParticles_;
    addons_ = other.addons_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFileHeader Clone() {
    return new CDemoFileHeader(this);
  }

  /// <summary>Field number for the "demo_file_stamp" field.</summary>
  public const int DemoFileStampFieldNumber = 1;
  private string demoFileStamp_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DemoFileStamp {
    get { return demoFileStamp_; }
    set {
      demoFileStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "network_protocol" field.</summary>
  public const int NetworkProtocolFieldNumber = 2;
  private int networkProtocol_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NetworkProtocol {
    get { return networkProtocol_; }
    set {
      networkProtocol_ = value;
    }
  }

  /// <summary>Field number for the "server_name" field.</summary>
  public const int ServerNameFieldNumber = 3;
  private string serverName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerName {
    get { return serverName_; }
    set {
      serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "client_name" field.</summary>
  public const int ClientNameFieldNumber = 4;
  private string clientName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientName {
    get { return clientName_; }
    set {
      clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "map_name" field.</summary>
  public const int MapNameFieldNumber = 5;
  private string mapName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapName {
    get { return mapName_; }
    set {
      mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "game_directory" field.</summary>
  public const int GameDirectoryFieldNumber = 6;
  private string gameDirectory_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GameDirectory {
    get { return gameDirectory_; }
    set {
      gameDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fullpackets_version" field.</summary>
  public const int FullpacketsVersionFieldNumber = 7;
  private int fullpacketsVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FullpacketsVersion {
    get { return fullpacketsVersion_; }
    set {
      fullpacketsVersion_ = value;
    }
  }

  /// <summary>Field number for the "allow_clientside_entities" field.</summary>
  public const int AllowClientsideEntitiesFieldNumber = 8;
  private bool allowClientsideEntities_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AllowClientsideEntities {
    get { return allowClientsideEntities_; }
    set {
      allowClientsideEntities_ = value;
    }
  }

  /// <summary>Field number for the "allow_clientside_particles" field.</summary>
  public const int AllowClientsideParticlesFieldNumber = 9;
  private bool allowClientsideParticles_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AllowClientsideParticles {
    get { return allowClientsideParticles_; }
    set {
      allowClientsideParticles_ = value;
    }
  }

  /// <summary>Field number for the "addons" field.</summary>
  public const int AddonsFieldNumber = 10;
  private string addons_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Addons {
    get { return addons_; }
    set {
      addons_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoFileHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoFileHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DemoFileStamp != other.DemoFileStamp) return false;
    if (NetworkProtocol != other.NetworkProtocol) return false;
    if (ServerName != other.ServerName) return false;
    if (ClientName != other.ClientName) return false;
    if (MapName != other.MapName) return false;
    if (GameDirectory != other.GameDirectory) return false;
    if (FullpacketsVersion != other.FullpacketsVersion) return false;
    if (AllowClientsideEntities != other.AllowClientsideEntities) return false;
    if (AllowClientsideParticles != other.AllowClientsideParticles) return false;
    if (Addons != other.Addons) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DemoFileStamp.Length != 0) hash ^= DemoFileStamp.GetHashCode();
    if (NetworkProtocol != 0) hash ^= NetworkProtocol.GetHashCode();
    if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
    if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
    if (MapName.Length != 0) hash ^= MapName.GetHashCode();
    if (GameDirectory.Length != 0) hash ^= GameDirectory.GetHashCode();
    if (FullpacketsVersion != 0) hash ^= FullpacketsVersion.GetHashCode();
    if (AllowClientsideEntities != false) hash ^= AllowClientsideEntities.GetHashCode();
    if (AllowClientsideParticles != false) hash ^= AllowClientsideParticles.GetHashCode();
    if (Addons.Length != 0) hash ^= Addons.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DemoFileStamp.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DemoFileStamp);
    }
    if (NetworkProtocol != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NetworkProtocol);
    }
    if (ServerName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ServerName);
    }
    if (ClientName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ClientName);
    }
    if (MapName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(MapName);
    }
    if (GameDirectory.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(GameDirectory);
    }
    if (FullpacketsVersion != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(FullpacketsVersion);
    }
    if (AllowClientsideEntities != false) {
      output.WriteRawTag(64);
      output.WriteBool(AllowClientsideEntities);
    }
    if (AllowClientsideParticles != false) {
      output.WriteRawTag(72);
      output.WriteBool(AllowClientsideParticles);
    }
    if (Addons.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Addons);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DemoFileStamp.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DemoFileStamp);
    }
    if (NetworkProtocol != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkProtocol);
    }
    if (ServerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
    }
    if (ClientName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
    }
    if (MapName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
    }
    if (GameDirectory.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameDirectory);
    }
    if (FullpacketsVersion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FullpacketsVersion);
    }
    if (AllowClientsideEntities != false) {
      size += 1 + 1;
    }
    if (AllowClientsideParticles != false) {
      size += 1 + 1;
    }
    if (Addons.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Addons);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoFileHeader other) {
    if (other == null) {
      return;
    }
    if (other.DemoFileStamp.Length != 0) {
      DemoFileStamp = other.DemoFileStamp;
    }
    if (other.NetworkProtocol != 0) {
      NetworkProtocol = other.NetworkProtocol;
    }
    if (other.ServerName.Length != 0) {
      ServerName = other.ServerName;
    }
    if (other.ClientName.Length != 0) {
      ClientName = other.ClientName;
    }
    if (other.MapName.Length != 0) {
      MapName = other.MapName;
    }
    if (other.GameDirectory.Length != 0) {
      GameDirectory = other.GameDirectory;
    }
    if (other.FullpacketsVersion != 0) {
      FullpacketsVersion = other.FullpacketsVersion;
    }
    if (other.AllowClientsideEntities != false) {
      AllowClientsideEntities = other.AllowClientsideEntities;
    }
    if (other.AllowClientsideParticles != false) {
      AllowClientsideParticles = other.AllowClientsideParticles;
    }
    if (other.Addons.Length != 0) {
      Addons = other.Addons;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DemoFileStamp = input.ReadString();
          break;
        }
        case 16: {
          NetworkProtocol = input.ReadInt32();
          break;
        }
        case 26: {
          ServerName = input.ReadString();
          break;
        }
        case 34: {
          ClientName = input.ReadString();
          break;
        }
        case 42: {
          MapName = input.ReadString();
          break;
        }
        case 50: {
          GameDirectory = input.ReadString();
          break;
        }
        case 56: {
          FullpacketsVersion = input.ReadInt32();
          break;
        }
        case 64: {
          AllowClientsideEntities = input.ReadBool();
          break;
        }
        case 72: {
          AllowClientsideParticles = input.ReadBool();
          break;
        }
        case 82: {
          Addons = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CGameInfo : pb::IMessage<CGameInfo> {
  private static readonly pb::MessageParser<CGameInfo> _parser = new pb::MessageParser<CGameInfo>(() => new CGameInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGameInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGameInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGameInfo(CGameInfo other) : this() {
    dota_ = other.dota_ != null ? other.dota_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGameInfo Clone() {
    return new CGameInfo(this);
  }

  /// <summary>Field number for the "dota" field.</summary>
  public const int DotaFieldNumber = 4;
  private global::CGameInfo.Types.CDotaGameInfo dota_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CGameInfo.Types.CDotaGameInfo Dota {
    get { return dota_; }
    set {
      dota_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGameInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGameInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Dota, other.Dota)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dota_ != null) hash ^= Dota.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dota_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Dota);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dota_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dota);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGameInfo other) {
    if (other == null) {
      return;
    }
    if (other.dota_ != null) {
      if (dota_ == null) {
        Dota = new global::CGameInfo.Types.CDotaGameInfo();
      }
      Dota.MergeFrom(other.Dota);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 34: {
          if (dota_ == null) {
            Dota = new global::CGameInfo.Types.CDotaGameInfo();
          }
          input.ReadMessage(Dota);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CGameInfo message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class CDotaGameInfo : pb::IMessage<CDotaGameInfo> {
      private static readonly pb::MessageParser<CDotaGameInfo> _parser = new pb::MessageParser<CDotaGameInfo>(() => new CDotaGameInfo());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<CDotaGameInfo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CGameInfo.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CDotaGameInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CDotaGameInfo(CDotaGameInfo other) : this() {
        matchId_ = other.matchId_;
        gameMode_ = other.gameMode_;
        gameWinner_ = other.gameWinner_;
        playerInfo_ = other.playerInfo_.Clone();
        leagueid_ = other.leagueid_;
        picksBans_ = other.picksBans_.Clone();
        radiantTeamId_ = other.radiantTeamId_;
        direTeamId_ = other.direTeamId_;
        radiantTeamTag_ = other.radiantTeamTag_;
        direTeamTag_ = other.direTeamTag_;
        endTime_ = other.endTime_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public CDotaGameInfo Clone() {
        return new CDotaGameInfo(this);
      }

      /// <summary>Field number for the "match_id" field.</summary>
      public const int MatchIdFieldNumber = 1;
      private ulong matchId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong MatchId {
        get { return matchId_; }
        set {
          matchId_ = value;
        }
      }

      /// <summary>Field number for the "game_mode" field.</summary>
      public const int GameModeFieldNumber = 2;
      private int gameMode_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int GameMode {
        get { return gameMode_; }
        set {
          gameMode_ = value;
        }
      }

      /// <summary>Field number for the "game_winner" field.</summary>
      public const int GameWinnerFieldNumber = 3;
      private int gameWinner_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int GameWinner {
        get { return gameWinner_; }
        set {
          gameWinner_ = value;
        }
      }

      /// <summary>Field number for the "player_info" field.</summary>
      public const int PlayerInfoFieldNumber = 4;
      private static readonly pb::FieldCodec<global::CGameInfo.Types.CDotaGameInfo.Types.CPlayerInfo> _repeated_playerInfo_codec
          = pb::FieldCodec.ForMessage(34, global::CGameInfo.Types.CDotaGameInfo.Types.CPlayerInfo.Parser);
      private readonly pbc::RepeatedField<global::CGameInfo.Types.CDotaGameInfo.Types.CPlayerInfo> playerInfo_ = new pbc::RepeatedField<global::CGameInfo.Types.CDotaGameInfo.Types.CPlayerInfo>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::CGameInfo.Types.CDotaGameInfo.Types.CPlayerInfo> PlayerInfo {
        get { return playerInfo_; }
      }

      /// <summary>Field number for the "leagueid" field.</summary>
      public const int LeagueidFieldNumber = 5;
      private uint leagueid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Leagueid {
        get { return leagueid_; }
        set {
          leagueid_ = value;
        }
      }

      /// <summary>Field number for the "picks_bans" field.</summary>
      public const int PicksBansFieldNumber = 6;
      private static readonly pb::FieldCodec<global::CGameInfo.Types.CDotaGameInfo.Types.CHeroSelectEvent> _repeated_picksBans_codec
          = pb::FieldCodec.ForMessage(50, global::CGameInfo.Types.CDotaGameInfo.Types.CHeroSelectEvent.Parser);
      private readonly pbc::RepeatedField<global::CGameInfo.Types.CDotaGameInfo.Types.CHeroSelectEvent> picksBans_ = new pbc::RepeatedField<global::CGameInfo.Types.CDotaGameInfo.Types.CHeroSelectEvent>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::CGameInfo.Types.CDotaGameInfo.Types.CHeroSelectEvent> PicksBans {
        get { return picksBans_; }
      }

      /// <summary>Field number for the "radiant_team_id" field.</summary>
      public const int RadiantTeamIdFieldNumber = 7;
      private uint radiantTeamId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RadiantTeamId {
        get { return radiantTeamId_; }
        set {
          radiantTeamId_ = value;
        }
      }

      /// <summary>Field number for the "dire_team_id" field.</summary>
      public const int DireTeamIdFieldNumber = 8;
      private uint direTeamId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint DireTeamId {
        get { return direTeamId_; }
        set {
          direTeamId_ = value;
        }
      }

      /// <summary>Field number for the "radiant_team_tag" field.</summary>
      public const int RadiantTeamTagFieldNumber = 9;
      private string radiantTeamTag_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string RadiantTeamTag {
        get { return radiantTeamTag_; }
        set {
          radiantTeamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "dire_team_tag" field.</summary>
      public const int DireTeamTagFieldNumber = 10;
      private string direTeamTag_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DireTeamTag {
        get { return direTeamTag_; }
        set {
          direTeamTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "end_time" field.</summary>
      public const int EndTimeFieldNumber = 11;
      private uint endTime_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint EndTime {
        get { return endTime_; }
        set {
          endTime_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as CDotaGameInfo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(CDotaGameInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (MatchId != other.MatchId) return false;
        if (GameMode != other.GameMode) return false;
        if (GameWinner != other.GameWinner) return false;
        if(!playerInfo_.Equals(other.playerInfo_)) return false;
        if (Leagueid != other.Leagueid) return false;
        if(!picksBans_.Equals(other.picksBans_)) return false;
        if (RadiantTeamId != other.RadiantTeamId) return false;
        if (DireTeamId != other.DireTeamId) return false;
        if (RadiantTeamTag != other.RadiantTeamTag) return false;
        if (DireTeamTag != other.DireTeamTag) return false;
        if (EndTime != other.EndTime) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (MatchId != 0UL) hash ^= MatchId.GetHashCode();
        if (GameMode != 0) hash ^= GameMode.GetHashCode();
        if (GameWinner != 0) hash ^= GameWinner.GetHashCode();
        hash ^= playerInfo_.GetHashCode();
        if (Leagueid != 0) hash ^= Leagueid.GetHashCode();
        hash ^= picksBans_.GetHashCode();
        if (RadiantTeamId != 0) hash ^= RadiantTeamId.GetHashCode();
        if (DireTeamId != 0) hash ^= DireTeamId.GetHashCode();
        if (RadiantTeamTag.Length != 0) hash ^= RadiantTeamTag.GetHashCode();
        if (DireTeamTag.Length != 0) hash ^= DireTeamTag.GetHashCode();
        if (EndTime != 0) hash ^= EndTime.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (MatchId != 0UL) {
          output.WriteRawTag(8);
          output.WriteUInt64(MatchId);
        }
        if (GameMode != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(GameMode);
        }
        if (GameWinner != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(GameWinner);
        }
        playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
        if (Leagueid != 0) {
          output.WriteRawTag(40);
          output.WriteUInt32(Leagueid);
        }
        picksBans_.WriteTo(output, _repeated_picksBans_codec);
        if (RadiantTeamId != 0) {
          output.WriteRawTag(56);
          output.WriteUInt32(RadiantTeamId);
        }
        if (DireTeamId != 0) {
          output.WriteRawTag(64);
          output.WriteUInt32(DireTeamId);
        }
        if (RadiantTeamTag.Length != 0) {
          output.WriteRawTag(74);
          output.WriteString(RadiantTeamTag);
        }
        if (DireTeamTag.Length != 0) {
          output.WriteRawTag(82);
          output.WriteString(DireTeamTag);
        }
        if (EndTime != 0) {
          output.WriteRawTag(88);
          output.WriteUInt32(EndTime);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (MatchId != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
        }
        if (GameMode != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
        }
        if (GameWinner != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameWinner);
        }
        size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
        if (Leagueid != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Leagueid);
        }
        size += picksBans_.CalculateSize(_repeated_picksBans_codec);
        if (RadiantTeamId != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RadiantTeamId);
        }
        if (DireTeamId != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DireTeamId);
        }
        if (RadiantTeamTag.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(RadiantTeamTag);
        }
        if (DireTeamTag.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(DireTeamTag);
        }
        if (EndTime != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(CDotaGameInfo other) {
        if (other == null) {
          return;
        }
        if (other.MatchId != 0UL) {
          MatchId = other.MatchId;
        }
        if (other.GameMode != 0) {
          GameMode = other.GameMode;
        }
        if (other.GameWinner != 0) {
          GameWinner = other.GameWinner;
        }
        playerInfo_.Add(other.playerInfo_);
        if (other.Leagueid != 0) {
          Leagueid = other.Leagueid;
        }
        picksBans_.Add(other.picksBans_);
        if (other.RadiantTeamId != 0) {
          RadiantTeamId = other.RadiantTeamId;
        }
        if (other.DireTeamId != 0) {
          DireTeamId = other.DireTeamId;
        }
        if (other.RadiantTeamTag.Length != 0) {
          RadiantTeamTag = other.RadiantTeamTag;
        }
        if (other.DireTeamTag.Length != 0) {
          DireTeamTag = other.DireTeamTag;
        }
        if (other.EndTime != 0) {
          EndTime = other.EndTime;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              MatchId = input.ReadUInt64();
              break;
            }
            case 16: {
              GameMode = input.ReadInt32();
              break;
            }
            case 24: {
              GameWinner = input.ReadInt32();
              break;
            }
            case 34: {
              playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
              break;
            }
            case 40: {
              Leagueid = input.ReadUInt32();
              break;
            }
            case 50: {
              picksBans_.AddEntriesFrom(input, _repeated_picksBans_codec);
              break;
            }
            case 56: {
              RadiantTeamId = input.ReadUInt32();
              break;
            }
            case 64: {
              DireTeamId = input.ReadUInt32();
              break;
            }
            case 74: {
              RadiantTeamTag = input.ReadString();
              break;
            }
            case 82: {
              DireTeamTag = input.ReadString();
              break;
            }
            case 88: {
              EndTime = input.ReadUInt32();
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the CDotaGameInfo message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public sealed partial class CPlayerInfo : pb::IMessage<CPlayerInfo> {
          private static readonly pb::MessageParser<CPlayerInfo> _parser = new pb::MessageParser<CPlayerInfo>(() => new CPlayerInfo());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<CPlayerInfo> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CGameInfo.Types.CDotaGameInfo.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CPlayerInfo() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CPlayerInfo(CPlayerInfo other) : this() {
            heroName_ = other.heroName_;
            playerName_ = other.playerName_;
            isFakeClient_ = other.isFakeClient_;
            steamid_ = other.steamid_;
            gameTeam_ = other.gameTeam_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CPlayerInfo Clone() {
            return new CPlayerInfo(this);
          }

          /// <summary>Field number for the "hero_name" field.</summary>
          public const int HeroNameFieldNumber = 1;
          private string heroName_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string HeroName {
            get { return heroName_; }
            set {
              heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "player_name" field.</summary>
          public const int PlayerNameFieldNumber = 2;
          private string playerName_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string PlayerName {
            get { return playerName_; }
            set {
              playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "is_fake_client" field.</summary>
          public const int IsFakeClientFieldNumber = 3;
          private bool isFakeClient_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool IsFakeClient {
            get { return isFakeClient_; }
            set {
              isFakeClient_ = value;
            }
          }

          /// <summary>Field number for the "steamid" field.</summary>
          public const int SteamidFieldNumber = 4;
          private ulong steamid_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ulong Steamid {
            get { return steamid_; }
            set {
              steamid_ = value;
            }
          }

          /// <summary>Field number for the "game_team" field.</summary>
          public const int GameTeamFieldNumber = 5;
          private int gameTeam_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int GameTeam {
            get { return gameTeam_; }
            set {
              gameTeam_ = value;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as CPlayerInfo);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(CPlayerInfo other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (HeroName != other.HeroName) return false;
            if (PlayerName != other.PlayerName) return false;
            if (IsFakeClient != other.IsFakeClient) return false;
            if (Steamid != other.Steamid) return false;
            if (GameTeam != other.GameTeam) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HeroName.Length != 0) hash ^= HeroName.GetHashCode();
            if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
            if (IsFakeClient != false) hash ^= IsFakeClient.GetHashCode();
            if (Steamid != 0UL) hash ^= Steamid.GetHashCode();
            if (GameTeam != 0) hash ^= GameTeam.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HeroName.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(HeroName);
            }
            if (PlayerName.Length != 0) {
              output.WriteRawTag(18);
              output.WriteString(PlayerName);
            }
            if (IsFakeClient != false) {
              output.WriteRawTag(24);
              output.WriteBool(IsFakeClient);
            }
            if (Steamid != 0UL) {
              output.WriteRawTag(32);
              output.WriteUInt64(Steamid);
            }
            if (GameTeam != 0) {
              output.WriteRawTag(40);
              output.WriteInt32(GameTeam);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HeroName.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
            }
            if (PlayerName.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
            }
            if (IsFakeClient != false) {
              size += 1 + 1;
            }
            if (Steamid != 0UL) {
              size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Steamid);
            }
            if (GameTeam != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTeam);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(CPlayerInfo other) {
            if (other == null) {
              return;
            }
            if (other.HeroName.Length != 0) {
              HeroName = other.HeroName;
            }
            if (other.PlayerName.Length != 0) {
              PlayerName = other.PlayerName;
            }
            if (other.IsFakeClient != false) {
              IsFakeClient = other.IsFakeClient;
            }
            if (other.Steamid != 0UL) {
              Steamid = other.Steamid;
            }
            if (other.GameTeam != 0) {
              GameTeam = other.GameTeam;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  HeroName = input.ReadString();
                  break;
                }
                case 18: {
                  PlayerName = input.ReadString();
                  break;
                }
                case 24: {
                  IsFakeClient = input.ReadBool();
                  break;
                }
                case 32: {
                  Steamid = input.ReadUInt64();
                  break;
                }
                case 40: {
                  GameTeam = input.ReadInt32();
                  break;
                }
              }
            }
          }

        }

        public sealed partial class CHeroSelectEvent : pb::IMessage<CHeroSelectEvent> {
          private static readonly pb::MessageParser<CHeroSelectEvent> _parser = new pb::MessageParser<CHeroSelectEvent>(() => new CHeroSelectEvent());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<CHeroSelectEvent> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CGameInfo.Types.CDotaGameInfo.Descriptor.NestedTypes[1]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CHeroSelectEvent() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CHeroSelectEvent(CHeroSelectEvent other) : this() {
            isPick_ = other.isPick_;
            team_ = other.team_;
            heroId_ = other.heroId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CHeroSelectEvent Clone() {
            return new CHeroSelectEvent(this);
          }

          /// <summary>Field number for the "is_pick" field.</summary>
          public const int IsPickFieldNumber = 1;
          private bool isPick_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool IsPick {
            get { return isPick_; }
            set {
              isPick_ = value;
            }
          }

          /// <summary>Field number for the "team" field.</summary>
          public const int TeamFieldNumber = 2;
          private uint team_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public uint Team {
            get { return team_; }
            set {
              team_ = value;
            }
          }

          /// <summary>Field number for the "hero_id" field.</summary>
          public const int HeroIdFieldNumber = 3;
          private uint heroId_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public uint HeroId {
            get { return heroId_; }
            set {
              heroId_ = value;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as CHeroSelectEvent);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(CHeroSelectEvent other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (IsPick != other.IsPick) return false;
            if (Team != other.Team) return false;
            if (HeroId != other.HeroId) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (IsPick != false) hash ^= IsPick.GetHashCode();
            if (Team != 0) hash ^= Team.GetHashCode();
            if (HeroId != 0) hash ^= HeroId.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (IsPick != false) {
              output.WriteRawTag(8);
              output.WriteBool(IsPick);
            }
            if (Team != 0) {
              output.WriteRawTag(16);
              output.WriteUInt32(Team);
            }
            if (HeroId != 0) {
              output.WriteRawTag(24);
              output.WriteUInt32(HeroId);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (IsPick != false) {
              size += 1 + 1;
            }
            if (Team != 0) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
            }
            if (HeroId != 0) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(CHeroSelectEvent other) {
            if (other == null) {
              return;
            }
            if (other.IsPick != false) {
              IsPick = other.IsPick;
            }
            if (other.Team != 0) {
              Team = other.Team;
            }
            if (other.HeroId != 0) {
              HeroId = other.HeroId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  IsPick = input.ReadBool();
                  break;
                }
                case 16: {
                  Team = input.ReadUInt32();
                  break;
                }
                case 24: {
                  HeroId = input.ReadUInt32();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

  }
  #endregion

}

public sealed partial class CDemoFileInfo : pb::IMessage<CDemoFileInfo> {
  private static readonly pb::MessageParser<CDemoFileInfo> _parser = new pb::MessageParser<CDemoFileInfo>(() => new CDemoFileInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoFileInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFileInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFileInfo(CDemoFileInfo other) : this() {
    playbackTime_ = other.playbackTime_;
    playbackTicks_ = other.playbackTicks_;
    playbackFrames_ = other.playbackFrames_;
    gameInfo_ = other.gameInfo_ != null ? other.gameInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFileInfo Clone() {
    return new CDemoFileInfo(this);
  }

  /// <summary>Field number for the "playback_time" field.</summary>
  public const int PlaybackTimeFieldNumber = 1;
  private float playbackTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PlaybackTime {
    get { return playbackTime_; }
    set {
      playbackTime_ = value;
    }
  }

  /// <summary>Field number for the "playback_ticks" field.</summary>
  public const int PlaybackTicksFieldNumber = 2;
  private int playbackTicks_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlaybackTicks {
    get { return playbackTicks_; }
    set {
      playbackTicks_ = value;
    }
  }

  /// <summary>Field number for the "playback_frames" field.</summary>
  public const int PlaybackFramesFieldNumber = 3;
  private int playbackFrames_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlaybackFrames {
    get { return playbackFrames_; }
    set {
      playbackFrames_ = value;
    }
  }

  /// <summary>Field number for the "game_info" field.</summary>
  public const int GameInfoFieldNumber = 4;
  private global::CGameInfo gameInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CGameInfo GameInfo {
    get { return gameInfo_; }
    set {
      gameInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoFileInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoFileInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlaybackTime, other.PlaybackTime)) return false;
    if (PlaybackTicks != other.PlaybackTicks) return false;
    if (PlaybackFrames != other.PlaybackFrames) return false;
    if (!object.Equals(GameInfo, other.GameInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlaybackTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlaybackTime);
    if (PlaybackTicks != 0) hash ^= PlaybackTicks.GetHashCode();
    if (PlaybackFrames != 0) hash ^= PlaybackFrames.GetHashCode();
    if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlaybackTime != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(PlaybackTime);
    }
    if (PlaybackTicks != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlaybackTicks);
    }
    if (PlaybackFrames != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PlaybackFrames);
    }
    if (gameInfo_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(GameInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlaybackTime != 0F) {
      size += 1 + 4;
    }
    if (PlaybackTicks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaybackTicks);
    }
    if (PlaybackFrames != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaybackFrames);
    }
    if (gameInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoFileInfo other) {
    if (other == null) {
      return;
    }
    if (other.PlaybackTime != 0F) {
      PlaybackTime = other.PlaybackTime;
    }
    if (other.PlaybackTicks != 0) {
      PlaybackTicks = other.PlaybackTicks;
    }
    if (other.PlaybackFrames != 0) {
      PlaybackFrames = other.PlaybackFrames;
    }
    if (other.gameInfo_ != null) {
      if (gameInfo_ == null) {
        GameInfo = new global::CGameInfo();
      }
      GameInfo.MergeFrom(other.GameInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          PlaybackTime = input.ReadFloat();
          break;
        }
        case 16: {
          PlaybackTicks = input.ReadInt32();
          break;
        }
        case 24: {
          PlaybackFrames = input.ReadInt32();
          break;
        }
        case 34: {
          if (gameInfo_ == null) {
            GameInfo = new global::CGameInfo();
          }
          input.ReadMessage(GameInfo);
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoPacket : pb::IMessage<CDemoPacket> {
  private static readonly pb::MessageParser<CDemoPacket> _parser = new pb::MessageParser<CDemoPacket>(() => new CDemoPacket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoPacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoPacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoPacket(CDemoPacket other) : this() {
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoPacket Clone() {
    return new CDemoPacket(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoPacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoPacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoPacket other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoFullPacket : pb::IMessage<CDemoFullPacket> {
  private static readonly pb::MessageParser<CDemoFullPacket> _parser = new pb::MessageParser<CDemoFullPacket>(() => new CDemoFullPacket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoFullPacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFullPacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFullPacket(CDemoFullPacket other) : this() {
    stringTable_ = other.stringTable_ != null ? other.stringTable_.Clone() : null;
    packet_ = other.packet_ != null ? other.packet_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoFullPacket Clone() {
    return new CDemoFullPacket(this);
  }

  /// <summary>Field number for the "string_table" field.</summary>
  public const int StringTableFieldNumber = 1;
  private global::CDemoStringTables stringTable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CDemoStringTables StringTable {
    get { return stringTable_; }
    set {
      stringTable_ = value;
    }
  }

  /// <summary>Field number for the "packet" field.</summary>
  public const int PacketFieldNumber = 2;
  private global::CDemoPacket packet_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CDemoPacket Packet {
    get { return packet_; }
    set {
      packet_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoFullPacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoFullPacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StringTable, other.StringTable)) return false;
    if (!object.Equals(Packet, other.Packet)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (stringTable_ != null) hash ^= StringTable.GetHashCode();
    if (packet_ != null) hash ^= Packet.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (stringTable_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(StringTable);
    }
    if (packet_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Packet);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (stringTable_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringTable);
    }
    if (packet_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Packet);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoFullPacket other) {
    if (other == null) {
      return;
    }
    if (other.stringTable_ != null) {
      if (stringTable_ == null) {
        StringTable = new global::CDemoStringTables();
      }
      StringTable.MergeFrom(other.StringTable);
    }
    if (other.packet_ != null) {
      if (packet_ == null) {
        Packet = new global::CDemoPacket();
      }
      Packet.MergeFrom(other.Packet);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (stringTable_ == null) {
            StringTable = new global::CDemoStringTables();
          }
          input.ReadMessage(StringTable);
          break;
        }
        case 18: {
          if (packet_ == null) {
            Packet = new global::CDemoPacket();
          }
          input.ReadMessage(Packet);
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoSaveGame : pb::IMessage<CDemoSaveGame> {
  private static readonly pb::MessageParser<CDemoSaveGame> _parser = new pb::MessageParser<CDemoSaveGame>(() => new CDemoSaveGame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoSaveGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSaveGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSaveGame(CDemoSaveGame other) : this() {
    data_ = other.data_;
    steamId_ = other.steamId_;
    signature_ = other.signature_;
    version_ = other.version_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSaveGame Clone() {
    return new CDemoSaveGame(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "steam_id" field.</summary>
  public const int SteamIdFieldNumber = 2;
  private ulong steamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SteamId {
    get { return steamId_; }
    set {
      steamId_ = value;
    }
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int SignatureFieldNumber = 3;
  private ulong signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Signature {
    get { return signature_; }
    set {
      signature_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 4;
  private int version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoSaveGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoSaveGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    if (SteamId != other.SteamId) return false;
    if (Signature != other.Signature) return false;
    if (Version != other.Version) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (SteamId != 0UL) hash ^= SteamId.GetHashCode();
    if (Signature != 0UL) hash ^= Signature.GetHashCode();
    if (Version != 0) hash ^= Version.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (SteamId != 0UL) {
      output.WriteRawTag(17);
      output.WriteFixed64(SteamId);
    }
    if (Signature != 0UL) {
      output.WriteRawTag(25);
      output.WriteFixed64(Signature);
    }
    if (Version != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Version);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (SteamId != 0UL) {
      size += 1 + 8;
    }
    if (Signature != 0UL) {
      size += 1 + 8;
    }
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoSaveGame other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    if (other.SteamId != 0UL) {
      SteamId = other.SteamId;
    }
    if (other.Signature != 0UL) {
      Signature = other.Signature;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
        case 17: {
          SteamId = input.ReadFixed64();
          break;
        }
        case 25: {
          Signature = input.ReadFixed64();
          break;
        }
        case 32: {
          Version = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoSyncTick : pb::IMessage<CDemoSyncTick> {
  private static readonly pb::MessageParser<CDemoSyncTick> _parser = new pb::MessageParser<CDemoSyncTick>(() => new CDemoSyncTick());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoSyncTick> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSyncTick() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSyncTick(CDemoSyncTick other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSyncTick Clone() {
    return new CDemoSyncTick(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoSyncTick);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoSyncTick other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoSyncTick other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CDemoConsoleCmd : pb::IMessage<CDemoConsoleCmd> {
  private static readonly pb::MessageParser<CDemoConsoleCmd> _parser = new pb::MessageParser<CDemoConsoleCmd>(() => new CDemoConsoleCmd());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoConsoleCmd> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoConsoleCmd() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoConsoleCmd(CDemoConsoleCmd other) : this() {
    cmdstring_ = other.cmdstring_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoConsoleCmd Clone() {
    return new CDemoConsoleCmd(this);
  }

  /// <summary>Field number for the "cmdstring" field.</summary>
  public const int CmdstringFieldNumber = 1;
  private string cmdstring_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Cmdstring {
    get { return cmdstring_; }
    set {
      cmdstring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoConsoleCmd);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoConsoleCmd other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cmdstring != other.Cmdstring) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cmdstring.Length != 0) hash ^= Cmdstring.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Cmdstring.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Cmdstring);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cmdstring.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmdstring);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoConsoleCmd other) {
    if (other == null) {
      return;
    }
    if (other.Cmdstring.Length != 0) {
      Cmdstring = other.Cmdstring;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Cmdstring = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoSendTables : pb::IMessage<CDemoSendTables> {
  private static readonly pb::MessageParser<CDemoSendTables> _parser = new pb::MessageParser<CDemoSendTables>(() => new CDemoSendTables());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoSendTables> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSendTables() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSendTables(CDemoSendTables other) : this() {
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSendTables Clone() {
    return new CDemoSendTables(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoSendTables);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoSendTables other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Data.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoSendTables other) {
    if (other == null) {
      return;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoClassInfo : pb::IMessage<CDemoClassInfo> {
  private static readonly pb::MessageParser<CDemoClassInfo> _parser = new pb::MessageParser<CDemoClassInfo>(() => new CDemoClassInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoClassInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoClassInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoClassInfo(CDemoClassInfo other) : this() {
    classes_ = other.classes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoClassInfo Clone() {
    return new CDemoClassInfo(this);
  }

  /// <summary>Field number for the "classes" field.</summary>
  public const int ClassesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CDemoClassInfo.Types.class_t> _repeated_classes_codec
      = pb::FieldCodec.ForMessage(10, global::CDemoClassInfo.Types.class_t.Parser);
  private readonly pbc::RepeatedField<global::CDemoClassInfo.Types.class_t> classes_ = new pbc::RepeatedField<global::CDemoClassInfo.Types.class_t>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CDemoClassInfo.Types.class_t> Classes {
    get { return classes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoClassInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoClassInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!classes_.Equals(other.classes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= classes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    classes_.WriteTo(output, _repeated_classes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += classes_.CalculateSize(_repeated_classes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoClassInfo other) {
    if (other == null) {
      return;
    }
    classes_.Add(other.classes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          classes_.AddEntriesFrom(input, _repeated_classes_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CDemoClassInfo message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class class_t : pb::IMessage<class_t> {
      private static readonly pb::MessageParser<class_t> _parser = new pb::MessageParser<class_t>(() => new class_t());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<class_t> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CDemoClassInfo.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public class_t() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public class_t(class_t other) : this() {
        classId_ = other.classId_;
        networkName_ = other.networkName_;
        tableName_ = other.tableName_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public class_t Clone() {
        return new class_t(this);
      }

      /// <summary>Field number for the "class_id" field.</summary>
      public const int ClassIdFieldNumber = 1;
      private int classId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ClassId {
        get { return classId_; }
        set {
          classId_ = value;
        }
      }

      /// <summary>Field number for the "network_name" field.</summary>
      public const int NetworkNameFieldNumber = 2;
      private string networkName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string NetworkName {
        get { return networkName_; }
        set {
          networkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "table_name" field.</summary>
      public const int TableNameFieldNumber = 3;
      private string tableName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string TableName {
        get { return tableName_; }
        set {
          tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as class_t);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(class_t other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (ClassId != other.ClassId) return false;
        if (NetworkName != other.NetworkName) return false;
        if (TableName != other.TableName) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (ClassId != 0) hash ^= ClassId.GetHashCode();
        if (NetworkName.Length != 0) hash ^= NetworkName.GetHashCode();
        if (TableName.Length != 0) hash ^= TableName.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (ClassId != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(ClassId);
        }
        if (NetworkName.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(NetworkName);
        }
        if (TableName.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(TableName);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (ClassId != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassId);
        }
        if (NetworkName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkName);
        }
        if (TableName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(class_t other) {
        if (other == null) {
          return;
        }
        if (other.ClassId != 0) {
          ClassId = other.ClassId;
        }
        if (other.NetworkName.Length != 0) {
          NetworkName = other.NetworkName;
        }
        if (other.TableName.Length != 0) {
          TableName = other.TableName;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              ClassId = input.ReadInt32();
              break;
            }
            case 18: {
              NetworkName = input.ReadString();
              break;
            }
            case 26: {
              TableName = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class CDemoCustomData : pb::IMessage<CDemoCustomData> {
  private static readonly pb::MessageParser<CDemoCustomData> _parser = new pb::MessageParser<CDemoCustomData>(() => new CDemoCustomData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoCustomData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoCustomData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoCustomData(CDemoCustomData other) : this() {
    callbackIndex_ = other.callbackIndex_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoCustomData Clone() {
    return new CDemoCustomData(this);
  }

  /// <summary>Field number for the "callback_index" field.</summary>
  public const int CallbackIndexFieldNumber = 1;
  private int callbackIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallbackIndex {
    get { return callbackIndex_; }
    set {
      callbackIndex_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoCustomData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoCustomData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CallbackIndex != other.CallbackIndex) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CallbackIndex != 0) hash ^= CallbackIndex.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CallbackIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CallbackIndex);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CallbackIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallbackIndex);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoCustomData other) {
    if (other == null) {
      return;
    }
    if (other.CallbackIndex != 0) {
      CallbackIndex = other.CallbackIndex;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CallbackIndex = input.ReadInt32();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoCustomDataCallbacks : pb::IMessage<CDemoCustomDataCallbacks> {
  private static readonly pb::MessageParser<CDemoCustomDataCallbacks> _parser = new pb::MessageParser<CDemoCustomDataCallbacks>(() => new CDemoCustomDataCallbacks());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoCustomDataCallbacks> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoCustomDataCallbacks() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoCustomDataCallbacks(CDemoCustomDataCallbacks other) : this() {
    saveId_ = other.saveId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoCustomDataCallbacks Clone() {
    return new CDemoCustomDataCallbacks(this);
  }

  /// <summary>Field number for the "save_id" field.</summary>
  public const int SaveIdFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_saveId_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> saveId_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> SaveId {
    get { return saveId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoCustomDataCallbacks);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoCustomDataCallbacks other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!saveId_.Equals(other.saveId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= saveId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    saveId_.WriteTo(output, _repeated_saveId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += saveId_.CalculateSize(_repeated_saveId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoCustomDataCallbacks other) {
    if (other == null) {
      return;
    }
    saveId_.Add(other.saveId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          saveId_.AddEntriesFrom(input, _repeated_saveId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoStringTables : pb::IMessage<CDemoStringTables> {
  private static readonly pb::MessageParser<CDemoStringTables> _parser = new pb::MessageParser<CDemoStringTables>(() => new CDemoStringTables());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoStringTables> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoStringTables() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoStringTables(CDemoStringTables other) : this() {
    tables_ = other.tables_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoStringTables Clone() {
    return new CDemoStringTables(this);
  }

  /// <summary>Field number for the "tables" field.</summary>
  public const int TablesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CDemoStringTables.Types.table_t> _repeated_tables_codec
      = pb::FieldCodec.ForMessage(10, global::CDemoStringTables.Types.table_t.Parser);
  private readonly pbc::RepeatedField<global::CDemoStringTables.Types.table_t> tables_ = new pbc::RepeatedField<global::CDemoStringTables.Types.table_t>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CDemoStringTables.Types.table_t> Tables {
    get { return tables_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoStringTables);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoStringTables other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!tables_.Equals(other.tables_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= tables_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    tables_.WriteTo(output, _repeated_tables_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += tables_.CalculateSize(_repeated_tables_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoStringTables other) {
    if (other == null) {
      return;
    }
    tables_.Add(other.tables_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          tables_.AddEntriesFrom(input, _repeated_tables_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CDemoStringTables message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class items_t : pb::IMessage<items_t> {
      private static readonly pb::MessageParser<items_t> _parser = new pb::MessageParser<items_t>(() => new items_t());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<items_t> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CDemoStringTables.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public items_t() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public items_t(items_t other) : this() {
        str_ = other.str_;
        data_ = other.data_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public items_t Clone() {
        return new items_t(this);
      }

      /// <summary>Field number for the "str" field.</summary>
      public const int StrFieldNumber = 1;
      private string str_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Str {
        get { return str_; }
        set {
          str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "data" field.</summary>
      public const int DataFieldNumber = 2;
      private pb::ByteString data_ = pb::ByteString.Empty;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString Data {
        get { return data_; }
        set {
          data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as items_t);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(items_t other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Str != other.Str) return false;
        if (Data != other.Data) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Str.Length != 0) hash ^= Str.GetHashCode();
        if (Data.Length != 0) hash ^= Data.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Str.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Str);
        }
        if (Data.Length != 0) {
          output.WriteRawTag(18);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Str.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
        }
        if (Data.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(items_t other) {
        if (other == null) {
          return;
        }
        if (other.Str.Length != 0) {
          Str = other.Str;
        }
        if (other.Data.Length != 0) {
          Data = other.Data;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Str = input.ReadString();
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      }

    }

    public sealed partial class table_t : pb::IMessage<table_t> {
      private static readonly pb::MessageParser<table_t> _parser = new pb::MessageParser<table_t>(() => new table_t());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<table_t> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CDemoStringTables.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public table_t() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public table_t(table_t other) : this() {
        tableName_ = other.tableName_;
        items_ = other.items_.Clone();
        itemsClientside_ = other.itemsClientside_.Clone();
        tableFlags_ = other.tableFlags_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public table_t Clone() {
        return new table_t(this);
      }

      /// <summary>Field number for the "table_name" field.</summary>
      public const int TableNameFieldNumber = 1;
      private string tableName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string TableName {
        get { return tableName_; }
        set {
          tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "items" field.</summary>
      public const int ItemsFieldNumber = 2;
      private static readonly pb::FieldCodec<global::CDemoStringTables.Types.items_t> _repeated_items_codec
          = pb::FieldCodec.ForMessage(18, global::CDemoStringTables.Types.items_t.Parser);
      private readonly pbc::RepeatedField<global::CDemoStringTables.Types.items_t> items_ = new pbc::RepeatedField<global::CDemoStringTables.Types.items_t>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::CDemoStringTables.Types.items_t> Items {
        get { return items_; }
      }

      /// <summary>Field number for the "items_clientside" field.</summary>
      public const int ItemsClientsideFieldNumber = 3;
      private static readonly pb::FieldCodec<global::CDemoStringTables.Types.items_t> _repeated_itemsClientside_codec
          = pb::FieldCodec.ForMessage(26, global::CDemoStringTables.Types.items_t.Parser);
      private readonly pbc::RepeatedField<global::CDemoStringTables.Types.items_t> itemsClientside_ = new pbc::RepeatedField<global::CDemoStringTables.Types.items_t>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::CDemoStringTables.Types.items_t> ItemsClientside {
        get { return itemsClientside_; }
      }

      /// <summary>Field number for the "table_flags" field.</summary>
      public const int TableFlagsFieldNumber = 4;
      private int tableFlags_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int TableFlags {
        get { return tableFlags_; }
        set {
          tableFlags_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as table_t);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(table_t other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (TableName != other.TableName) return false;
        if(!items_.Equals(other.items_)) return false;
        if(!itemsClientside_.Equals(other.itemsClientside_)) return false;
        if (TableFlags != other.TableFlags) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (TableName.Length != 0) hash ^= TableName.GetHashCode();
        hash ^= items_.GetHashCode();
        hash ^= itemsClientside_.GetHashCode();
        if (TableFlags != 0) hash ^= TableFlags.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (TableName.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(TableName);
        }
        items_.WriteTo(output, _repeated_items_codec);
        itemsClientside_.WriteTo(output, _repeated_itemsClientside_codec);
        if (TableFlags != 0) {
          output.WriteRawTag(32);
          output.WriteInt32(TableFlags);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (TableName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
        }
        size += items_.CalculateSize(_repeated_items_codec);
        size += itemsClientside_.CalculateSize(_repeated_itemsClientside_codec);
        if (TableFlags != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableFlags);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(table_t other) {
        if (other == null) {
          return;
        }
        if (other.TableName.Length != 0) {
          TableName = other.TableName;
        }
        items_.Add(other.items_);
        itemsClientside_.Add(other.itemsClientside_);
        if (other.TableFlags != 0) {
          TableFlags = other.TableFlags;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              TableName = input.ReadString();
              break;
            }
            case 18: {
              items_.AddEntriesFrom(input, _repeated_items_codec);
              break;
            }
            case 26: {
              itemsClientside_.AddEntriesFrom(input, _repeated_itemsClientside_codec);
              break;
            }
            case 32: {
              TableFlags = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class CDemoStop : pb::IMessage<CDemoStop> {
  private static readonly pb::MessageParser<CDemoStop> _parser = new pb::MessageParser<CDemoStop>(() => new CDemoStop());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoStop> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoStop() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoStop(CDemoStop other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoStop Clone() {
    return new CDemoStop(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoStop);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoStop other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoStop other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class CDemoUserCmd : pb::IMessage<CDemoUserCmd> {
  private static readonly pb::MessageParser<CDemoUserCmd> _parser = new pb::MessageParser<CDemoUserCmd>(() => new CDemoUserCmd());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoUserCmd> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoUserCmd() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoUserCmd(CDemoUserCmd other) : this() {
    cmdNumber_ = other.cmdNumber_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoUserCmd Clone() {
    return new CDemoUserCmd(this);
  }

  /// <summary>Field number for the "cmd_number" field.</summary>
  public const int CmdNumberFieldNumber = 1;
  private int cmdNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CmdNumber {
    get { return cmdNumber_; }
    set {
      cmdNumber_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoUserCmd);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoUserCmd other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CmdNumber != other.CmdNumber) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CmdNumber != 0) hash ^= CmdNumber.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CmdNumber != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CmdNumber);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CmdNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmdNumber);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoUserCmd other) {
    if (other == null) {
      return;
    }
    if (other.CmdNumber != 0) {
      CmdNumber = other.CmdNumber;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CmdNumber = input.ReadInt32();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CDemoSpawnGroups : pb::IMessage<CDemoSpawnGroups> {
  private static readonly pb::MessageParser<CDemoSpawnGroups> _parser = new pb::MessageParser<CDemoSpawnGroups>(() => new CDemoSpawnGroups());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CDemoSpawnGroups> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSpawnGroups() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSpawnGroups(CDemoSpawnGroups other) : this() {
    msgs_ = other.msgs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CDemoSpawnGroups Clone() {
    return new CDemoSpawnGroups(this);
  }

  /// <summary>Field number for the "msgs" field.</summary>
  public const int MsgsFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_msgs_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> msgs_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> Msgs {
    get { return msgs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CDemoSpawnGroups);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CDemoSpawnGroups other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!msgs_.Equals(other.msgs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= msgs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    msgs_.WriteTo(output, _repeated_msgs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += msgs_.CalculateSize(_repeated_msgs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CDemoSpawnGroups other) {
    if (other == null) {
      return;
    }
    msgs_.Add(other.msgs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 26: {
          msgs_.AddEntriesFrom(input, _repeated_msgs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CSVCMsg_ServerInfo : pb::IMessage<CSVCMsg_ServerInfo> {
  private static readonly pb::MessageParser<CSVCMsg_ServerInfo> _parser = new pb::MessageParser<CSVCMsg_ServerInfo>(() => new CSVCMsg_ServerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsg_ServerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_ServerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_ServerInfo(CSVCMsg_ServerInfo other) : this() {
    protocol_ = other.protocol_;
    serverCount_ = other.serverCount_;
    isDedicated_ = other.isDedicated_;
    isHltv_ = other.isHltv_;
    isReplay_ = other.isReplay_;
    cOs_ = other.cOs_;
    mapCrc_ = other.mapCrc_;
    clientCrc_ = other.clientCrc_;
    stringTableCrc_ = other.stringTableCrc_;
    maxClients_ = other.maxClients_;
    maxClasses_ = other.maxClasses_;
    playerSlot_ = other.playerSlot_;
    tickInterval_ = other.tickInterval_;
    gameDir_ = other.gameDir_;
    mapName_ = other.mapName_;
    skyName_ = other.skyName_;
    hostName_ = other.hostName_;
    addonName_ = other.addonName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_ServerInfo Clone() {
    return new CSVCMsg_ServerInfo(this);
  }

  /// <summary>Field number for the "protocol" field.</summary>
  public const int ProtocolFieldNumber = 1;
  private int protocol_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Protocol {
    get { return protocol_; }
    set {
      protocol_ = value;
    }
  }

  /// <summary>Field number for the "server_count" field.</summary>
  public const int ServerCountFieldNumber = 2;
  private int serverCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerCount {
    get { return serverCount_; }
    set {
      serverCount_ = value;
    }
  }

  /// <summary>Field number for the "is_dedicated" field.</summary>
  public const int IsDedicatedFieldNumber = 3;
  private bool isDedicated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDedicated {
    get { return isDedicated_; }
    set {
      isDedicated_ = value;
    }
  }

  /// <summary>Field number for the "is_hltv" field.</summary>
  public const int IsHltvFieldNumber = 4;
  private bool isHltv_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsHltv {
    get { return isHltv_; }
    set {
      isHltv_ = value;
    }
  }

  /// <summary>Field number for the "is_replay" field.</summary>
  public const int IsReplayFieldNumber = 5;
  private bool isReplay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReplay {
    get { return isReplay_; }
    set {
      isReplay_ = value;
    }
  }

  /// <summary>Field number for the "c_os" field.</summary>
  public const int COsFieldNumber = 6;
  private int cOs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int COs {
    get { return cOs_; }
    set {
      cOs_ = value;
    }
  }

  /// <summary>Field number for the "map_crc" field.</summary>
  public const int MapCrcFieldNumber = 7;
  private uint mapCrc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MapCrc {
    get { return mapCrc_; }
    set {
      mapCrc_ = value;
    }
  }

  /// <summary>Field number for the "client_crc" field.</summary>
  public const int ClientCrcFieldNumber = 8;
  private uint clientCrc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ClientCrc {
    get { return clientCrc_; }
    set {
      clientCrc_ = value;
    }
  }

  /// <summary>Field number for the "string_table_crc" field.</summary>
  public const int StringTableCrcFieldNumber = 9;
  private uint stringTableCrc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StringTableCrc {
    get { return stringTableCrc_; }
    set {
      stringTableCrc_ = value;
    }
  }

  /// <summary>Field number for the "max_clients" field.</summary>
  public const int MaxClientsFieldNumber = 10;
  private int maxClients_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxClients {
    get { return maxClients_; }
    set {
      maxClients_ = value;
    }
  }

  /// <summary>Field number for the "max_classes" field.</summary>
  public const int MaxClassesFieldNumber = 11;
  private int maxClasses_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxClasses {
    get { return maxClasses_; }
    set {
      maxClasses_ = value;
    }
  }

  /// <summary>Field number for the "player_slot" field.</summary>
  public const int PlayerSlotFieldNumber = 12;
  private int playerSlot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerSlot {
    get { return playerSlot_; }
    set {
      playerSlot_ = value;
    }
  }

  /// <summary>Field number for the "tick_interval" field.</summary>
  public const int TickIntervalFieldNumber = 13;
  private float tickInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TickInterval {
    get { return tickInterval_; }
    set {
      tickInterval_ = value;
    }
  }

  /// <summary>Field number for the "game_dir" field.</summary>
  public const int GameDirFieldNumber = 14;
  private string gameDir_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GameDir {
    get { return gameDir_; }
    set {
      gameDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "map_name" field.</summary>
  public const int MapNameFieldNumber = 15;
  private string mapName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapName {
    get { return mapName_; }
    set {
      mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sky_name" field.</summary>
  public const int SkyNameFieldNumber = 16;
  private string skyName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SkyName {
    get { return skyName_; }
    set {
      skyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "host_name" field.</summary>
  public const int HostNameFieldNumber = 17;
  private string hostName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HostName {
    get { return hostName_; }
    set {
      hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "addon_name" field.</summary>
  public const int AddonNameFieldNumber = 18;
  private string addonName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AddonName {
    get { return addonName_; }
    set {
      addonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsg_ServerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsg_ServerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Protocol != other.Protocol) return false;
    if (ServerCount != other.ServerCount) return false;
    if (IsDedicated != other.IsDedicated) return false;
    if (IsHltv != other.IsHltv) return false;
    if (IsReplay != other.IsReplay) return false;
    if (COs != other.COs) return false;
    if (MapCrc != other.MapCrc) return false;
    if (ClientCrc != other.ClientCrc) return false;
    if (StringTableCrc != other.StringTableCrc) return false;
    if (MaxClients != other.MaxClients) return false;
    if (MaxClasses != other.MaxClasses) return false;
    if (PlayerSlot != other.PlayerSlot) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickInterval, other.TickInterval)) return false;
    if (GameDir != other.GameDir) return false;
    if (MapName != other.MapName) return false;
    if (SkyName != other.SkyName) return false;
    if (HostName != other.HostName) return false;
    if (AddonName != other.AddonName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Protocol != 0) hash ^= Protocol.GetHashCode();
    if (ServerCount != 0) hash ^= ServerCount.GetHashCode();
    if (IsDedicated != false) hash ^= IsDedicated.GetHashCode();
    if (IsHltv != false) hash ^= IsHltv.GetHashCode();
    if (IsReplay != false) hash ^= IsReplay.GetHashCode();
    if (COs != 0) hash ^= COs.GetHashCode();
    if (MapCrc != 0) hash ^= MapCrc.GetHashCode();
    if (ClientCrc != 0) hash ^= ClientCrc.GetHashCode();
    if (StringTableCrc != 0) hash ^= StringTableCrc.GetHashCode();
    if (MaxClients != 0) hash ^= MaxClients.GetHashCode();
    if (MaxClasses != 0) hash ^= MaxClasses.GetHashCode();
    if (PlayerSlot != 0) hash ^= PlayerSlot.GetHashCode();
    if (TickInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickInterval);
    if (GameDir.Length != 0) hash ^= GameDir.GetHashCode();
    if (MapName.Length != 0) hash ^= MapName.GetHashCode();
    if (SkyName.Length != 0) hash ^= SkyName.GetHashCode();
    if (HostName.Length != 0) hash ^= HostName.GetHashCode();
    if (AddonName.Length != 0) hash ^= AddonName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Protocol != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Protocol);
    }
    if (ServerCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ServerCount);
    }
    if (IsDedicated != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsDedicated);
    }
    if (IsHltv != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsHltv);
    }
    if (IsReplay != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsReplay);
    }
    if (COs != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(COs);
    }
    if (MapCrc != 0) {
      output.WriteRawTag(61);
      output.WriteFixed32(MapCrc);
    }
    if (ClientCrc != 0) {
      output.WriteRawTag(69);
      output.WriteFixed32(ClientCrc);
    }
    if (StringTableCrc != 0) {
      output.WriteRawTag(77);
      output.WriteFixed32(StringTableCrc);
    }
    if (MaxClients != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(MaxClients);
    }
    if (MaxClasses != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(MaxClasses);
    }
    if (PlayerSlot != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(PlayerSlot);
    }
    if (TickInterval != 0F) {
      output.WriteRawTag(109);
      output.WriteFloat(TickInterval);
    }
    if (GameDir.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(GameDir);
    }
    if (MapName.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(MapName);
    }
    if (SkyName.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(SkyName);
    }
    if (HostName.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(HostName);
    }
    if (AddonName.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(AddonName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Protocol != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protocol);
    }
    if (ServerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerCount);
    }
    if (IsDedicated != false) {
      size += 1 + 1;
    }
    if (IsHltv != false) {
      size += 1 + 1;
    }
    if (IsReplay != false) {
      size += 1 + 1;
    }
    if (COs != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(COs);
    }
    if (MapCrc != 0) {
      size += 1 + 4;
    }
    if (ClientCrc != 0) {
      size += 1 + 4;
    }
    if (StringTableCrc != 0) {
      size += 1 + 4;
    }
    if (MaxClients != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxClients);
    }
    if (MaxClasses != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxClasses);
    }
    if (PlayerSlot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerSlot);
    }
    if (TickInterval != 0F) {
      size += 1 + 4;
    }
    if (GameDir.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameDir);
    }
    if (MapName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
    }
    if (SkyName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SkyName);
    }
    if (HostName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(HostName);
    }
    if (AddonName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(AddonName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsg_ServerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Protocol != 0) {
      Protocol = other.Protocol;
    }
    if (other.ServerCount != 0) {
      ServerCount = other.ServerCount;
    }
    if (other.IsDedicated != false) {
      IsDedicated = other.IsDedicated;
    }
    if (other.IsHltv != false) {
      IsHltv = other.IsHltv;
    }
    if (other.IsReplay != false) {
      IsReplay = other.IsReplay;
    }
    if (other.COs != 0) {
      COs = other.COs;
    }
    if (other.MapCrc != 0) {
      MapCrc = other.MapCrc;
    }
    if (other.ClientCrc != 0) {
      ClientCrc = other.ClientCrc;
    }
    if (other.StringTableCrc != 0) {
      StringTableCrc = other.StringTableCrc;
    }
    if (other.MaxClients != 0) {
      MaxClients = other.MaxClients;
    }
    if (other.MaxClasses != 0) {
      MaxClasses = other.MaxClasses;
    }
    if (other.PlayerSlot != 0) {
      PlayerSlot = other.PlayerSlot;
    }
    if (other.TickInterval != 0F) {
      TickInterval = other.TickInterval;
    }
    if (other.GameDir.Length != 0) {
      GameDir = other.GameDir;
    }
    if (other.MapName.Length != 0) {
      MapName = other.MapName;
    }
    if (other.SkyName.Length != 0) {
      SkyName = other.SkyName;
    }
    if (other.HostName.Length != 0) {
      HostName = other.HostName;
    }
    if (other.AddonName.Length != 0) {
      AddonName = other.AddonName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Protocol = input.ReadInt32();
          break;
        }
        case 16: {
          ServerCount = input.ReadInt32();
          break;
        }
        case 24: {
          IsDedicated = input.ReadBool();
          break;
        }
        case 32: {
          IsHltv = input.ReadBool();
          break;
        }
        case 40: {
          IsReplay = input.ReadBool();
          break;
        }
        case 48: {
          COs = input.ReadInt32();
          break;
        }
        case 61: {
          MapCrc = input.ReadFixed32();
          break;
        }
        case 69: {
          ClientCrc = input.ReadFixed32();
          break;
        }
        case 77: {
          StringTableCrc = input.ReadFixed32();
          break;
        }
        case 80: {
          MaxClients = input.ReadInt32();
          break;
        }
        case 88: {
          MaxClasses = input.ReadInt32();
          break;
        }
        case 96: {
          PlayerSlot = input.ReadInt32();
          break;
        }
        case 109: {
          TickInterval = input.ReadFloat();
          break;
        }
        case 114: {
          GameDir = input.ReadString();
          break;
        }
        case 122: {
          MapName = input.ReadString();
          break;
        }
        case 130: {
          SkyName = input.ReadString();
          break;
        }
        case 138: {
          HostName = input.ReadString();
          break;
        }
        case 146: {
          AddonName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSVCMsg_PacketEntities : pb::IMessage<CSVCMsg_PacketEntities> {
  private static readonly pb::MessageParser<CSVCMsg_PacketEntities> _parser = new pb::MessageParser<CSVCMsg_PacketEntities>(() => new CSVCMsg_PacketEntities());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsg_PacketEntities> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_PacketEntities() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_PacketEntities(CSVCMsg_PacketEntities other) : this() {
    maxEntries_ = other.maxEntries_;
    updatedEntries_ = other.updatedEntries_;
    isDelta_ = other.isDelta_;
    updateBaseline_ = other.updateBaseline_;
    baseline_ = other.baseline_;
    deltaFrom_ = other.deltaFrom_;
    entityData_ = other.entityData_;
    pendingFullFrame_ = other.pendingFullFrame_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_PacketEntities Clone() {
    return new CSVCMsg_PacketEntities(this);
  }

  /// <summary>Field number for the "max_entries" field.</summary>
  public const int MaxEntriesFieldNumber = 1;
  private int maxEntries_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxEntries {
    get { return maxEntries_; }
    set {
      maxEntries_ = value;
    }
  }

  /// <summary>Field number for the "updated_entries" field.</summary>
  public const int UpdatedEntriesFieldNumber = 2;
  private int updatedEntries_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UpdatedEntries {
    get { return updatedEntries_; }
    set {
      updatedEntries_ = value;
    }
  }

  /// <summary>Field number for the "is_delta" field.</summary>
  public const int IsDeltaFieldNumber = 3;
  private bool isDelta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDelta {
    get { return isDelta_; }
    set {
      isDelta_ = value;
    }
  }

  /// <summary>Field number for the "update_baseline" field.</summary>
  public const int UpdateBaselineFieldNumber = 4;
  private bool updateBaseline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UpdateBaseline {
    get { return updateBaseline_; }
    set {
      updateBaseline_ = value;
    }
  }

  /// <summary>Field number for the "baseline" field.</summary>
  public const int BaselineFieldNumber = 5;
  private int baseline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Baseline {
    get { return baseline_; }
    set {
      baseline_ = value;
    }
  }

  /// <summary>Field number for the "delta_from" field.</summary>
  public const int DeltaFromFieldNumber = 6;
  private int deltaFrom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DeltaFrom {
    get { return deltaFrom_; }
    set {
      deltaFrom_ = value;
    }
  }

  /// <summary>Field number for the "entity_data" field.</summary>
  public const int EntityDataFieldNumber = 7;
  private pb::ByteString entityData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EntityData {
    get { return entityData_; }
    set {
      entityData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pending_full_frame" field.</summary>
  public const int PendingFullFrameFieldNumber = 8;
  private bool pendingFullFrame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PendingFullFrame {
    get { return pendingFullFrame_; }
    set {
      pendingFullFrame_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsg_PacketEntities);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsg_PacketEntities other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MaxEntries != other.MaxEntries) return false;
    if (UpdatedEntries != other.UpdatedEntries) return false;
    if (IsDelta != other.IsDelta) return false;
    if (UpdateBaseline != other.UpdateBaseline) return false;
    if (Baseline != other.Baseline) return false;
    if (DeltaFrom != other.DeltaFrom) return false;
    if (EntityData != other.EntityData) return false;
    if (PendingFullFrame != other.PendingFullFrame) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MaxEntries != 0) hash ^= MaxEntries.GetHashCode();
    if (UpdatedEntries != 0) hash ^= UpdatedEntries.GetHashCode();
    if (IsDelta != false) hash ^= IsDelta.GetHashCode();
    if (UpdateBaseline != false) hash ^= UpdateBaseline.GetHashCode();
    if (Baseline != 0) hash ^= Baseline.GetHashCode();
    if (DeltaFrom != 0) hash ^= DeltaFrom.GetHashCode();
    if (EntityData.Length != 0) hash ^= EntityData.GetHashCode();
    if (PendingFullFrame != false) hash ^= PendingFullFrame.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MaxEntries != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MaxEntries);
    }
    if (UpdatedEntries != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UpdatedEntries);
    }
    if (IsDelta != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsDelta);
    }
    if (UpdateBaseline != false) {
      output.WriteRawTag(32);
      output.WriteBool(UpdateBaseline);
    }
    if (Baseline != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Baseline);
    }
    if (DeltaFrom != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(DeltaFrom);
    }
    if (EntityData.Length != 0) {
      output.WriteRawTag(58);
      output.WriteBytes(EntityData);
    }
    if (PendingFullFrame != false) {
      output.WriteRawTag(64);
      output.WriteBool(PendingFullFrame);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MaxEntries != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEntries);
    }
    if (UpdatedEntries != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdatedEntries);
    }
    if (IsDelta != false) {
      size += 1 + 1;
    }
    if (UpdateBaseline != false) {
      size += 1 + 1;
    }
    if (Baseline != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Baseline);
    }
    if (DeltaFrom != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeltaFrom);
    }
    if (EntityData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EntityData);
    }
    if (PendingFullFrame != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsg_PacketEntities other) {
    if (other == null) {
      return;
    }
    if (other.MaxEntries != 0) {
      MaxEntries = other.MaxEntries;
    }
    if (other.UpdatedEntries != 0) {
      UpdatedEntries = other.UpdatedEntries;
    }
    if (other.IsDelta != false) {
      IsDelta = other.IsDelta;
    }
    if (other.UpdateBaseline != false) {
      UpdateBaseline = other.UpdateBaseline;
    }
    if (other.Baseline != 0) {
      Baseline = other.Baseline;
    }
    if (other.DeltaFrom != 0) {
      DeltaFrom = other.DeltaFrom;
    }
    if (other.EntityData.Length != 0) {
      EntityData = other.EntityData;
    }
    if (other.PendingFullFrame != false) {
      PendingFullFrame = other.PendingFullFrame;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MaxEntries = input.ReadInt32();
          break;
        }
        case 16: {
          UpdatedEntries = input.ReadInt32();
          break;
        }
        case 24: {
          IsDelta = input.ReadBool();
          break;
        }
        case 32: {
          UpdateBaseline = input.ReadBool();
          break;
        }
        case 40: {
          Baseline = input.ReadInt32();
          break;
        }
        case 48: {
          DeltaFrom = input.ReadInt32();
          break;
        }
        case 58: {
          EntityData = input.ReadBytes();
          break;
        }
        case 64: {
          PendingFullFrame = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CSVCMsg_ClassInfo : pb::IMessage<CSVCMsg_ClassInfo> {
  private static readonly pb::MessageParser<CSVCMsg_ClassInfo> _parser = new pb::MessageParser<CSVCMsg_ClassInfo>(() => new CSVCMsg_ClassInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSVCMsg_ClassInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DemoReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_ClassInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_ClassInfo(CSVCMsg_ClassInfo other) : this() {
    createOnClient_ = other.createOnClient_;
    classes_ = other.classes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSVCMsg_ClassInfo Clone() {
    return new CSVCMsg_ClassInfo(this);
  }

  /// <summary>Field number for the "create_on_client" field.</summary>
  public const int CreateOnClientFieldNumber = 1;
  private bool createOnClient_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool CreateOnClient {
    get { return createOnClient_; }
    set {
      createOnClient_ = value;
    }
  }

  /// <summary>Field number for the "classes" field.</summary>
  public const int ClassesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CSVCMsg_ClassInfo.Types.class_t> _repeated_classes_codec
      = pb::FieldCodec.ForMessage(18, global::CSVCMsg_ClassInfo.Types.class_t.Parser);
  private readonly pbc::RepeatedField<global::CSVCMsg_ClassInfo.Types.class_t> classes_ = new pbc::RepeatedField<global::CSVCMsg_ClassInfo.Types.class_t>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CSVCMsg_ClassInfo.Types.class_t> Classes {
    get { return classes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSVCMsg_ClassInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSVCMsg_ClassInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CreateOnClient != other.CreateOnClient) return false;
    if(!classes_.Equals(other.classes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CreateOnClient != false) hash ^= CreateOnClient.GetHashCode();
    hash ^= classes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CreateOnClient != false) {
      output.WriteRawTag(8);
      output.WriteBool(CreateOnClient);
    }
    classes_.WriteTo(output, _repeated_classes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CreateOnClient != false) {
      size += 1 + 1;
    }
    size += classes_.CalculateSize(_repeated_classes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSVCMsg_ClassInfo other) {
    if (other == null) {
      return;
    }
    if (other.CreateOnClient != false) {
      CreateOnClient = other.CreateOnClient;
    }
    classes_.Add(other.classes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CreateOnClient = input.ReadBool();
          break;
        }
        case 18: {
          classes_.AddEntriesFrom(input, _repeated_classes_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CSVCMsg_ClassInfo message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class class_t : pb::IMessage<class_t> {
      private static readonly pb::MessageParser<class_t> _parser = new pb::MessageParser<class_t>(() => new class_t());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<class_t> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CSVCMsg_ClassInfo.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public class_t() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public class_t(class_t other) : this() {
        classId_ = other.classId_;
        dataTableName_ = other.dataTableName_;
        className_ = other.className_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public class_t Clone() {
        return new class_t(this);
      }

      /// <summary>Field number for the "class_id" field.</summary>
      public const int ClassIdFieldNumber = 1;
      private int classId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ClassId {
        get { return classId_; }
        set {
          classId_ = value;
        }
      }

      /// <summary>Field number for the "data_table_name" field.</summary>
      public const int DataTableNameFieldNumber = 2;
      private string dataTableName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DataTableName {
        get { return dataTableName_; }
        set {
          dataTableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "class_name" field.</summary>
      public const int ClassNameFieldNumber = 3;
      private string className_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string ClassName {
        get { return className_; }
        set {
          className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as class_t);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(class_t other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (ClassId != other.ClassId) return false;
        if (DataTableName != other.DataTableName) return false;
        if (ClassName != other.ClassName) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (ClassId != 0) hash ^= ClassId.GetHashCode();
        if (DataTableName.Length != 0) hash ^= DataTableName.GetHashCode();
        if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (ClassId != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(ClassId);
        }
        if (DataTableName.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(DataTableName);
        }
        if (ClassName.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(ClassName);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (ClassId != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassId);
        }
        if (DataTableName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(DataTableName);
        }
        if (ClassName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(class_t other) {
        if (other == null) {
          return;
        }
        if (other.ClassId != 0) {
          ClassId = other.ClassId;
        }
        if (other.DataTableName.Length != 0) {
          DataTableName = other.DataTableName;
        }
        if (other.ClassName.Length != 0) {
          ClassName = other.ClassName;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              ClassId = input.ReadInt32();
              break;
            }
            case 18: {
              DataTableName = input.ReadString();
              break;
            }
            case 26: {
              ClassName = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
